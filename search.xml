<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring学习笔记</title>
      <link href="/2022/05/12/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/12/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="容器接口"><a href="#容器接口" class="headerlink" title="容器接口"></a>容器接口</h1><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><h3 id="什么是BeanFactory"><a href="#什么是BeanFactory" class="headerlink" title="什么是BeanFactory"></a>什么是BeanFactory</h3><p>1.它是ApplicationContext的父接口</p><p>2.它才是Spring的核心容器，主要的ApplicationContext实现都【组合】了它的功能，BeanFactory是ApplicationContext的成员变量</p><h3 id="BeanFactory能干啥"><a href="#BeanFactory能干啥" class="headerlink" title="BeanFactory能干啥"></a>BeanFactory能干啥</h3><p>1.表面上只有getBean方法</p><p>2.实际上，控制反转、基本的依赖注入，制止Bean的生命周期的各种功能，都由它的实现类提供例如DefaultListableBeanFactory，继承关系如下</p><p><img src="/images/pasted-1.png" alt="DefaultListableBeanFactory继承关系图"></p><h4 id="DefaultListableBeanFactory"><a href="#DefaultListableBeanFactory" class="headerlink" title="DefaultListableBeanFactory"></a>DefaultListableBeanFactory</h4><h5 id="DefaultSingletonBeanRegistry"><a href="#DefaultSingletonBeanRegistry" class="headerlink" title="DefaultSingletonBeanRegistry"></a>DefaultSingletonBeanRegistry</h5><p>该类有一个如下成员变量<br>private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap(256);<br>是私有的，我们可以通过反射的方式拿到它的成员变量</p><h2 id="ApplicationContext有哪些扩展功能"><a href="#ApplicationContext有哪些扩展功能" class="headerlink" title="ApplicationContext有哪些扩展功能"></a>ApplicationContext有哪些扩展功能</h2><p>org.springframework.boot.SpringApplication#run(java.lang.Class&lt;?&gt;, java.lang.String…)方法返回org.springframework.context.ConfigurableApplicationContext，我们来看一下他的接口继承关系</p><p><img src="/images/pasted-0.png" alt="ConfigurableApplicationContext继承关系图"></p><p>可以看出ApplicationContext间接继承了BeanFactory</p><p>ApplicationContext对BeanFactory进行了一些扩展,其中主要有(MessageSource、ResourcePatternResolver、ApplicationEventPublisher、EnviromentCapable)</p><h3 id="MessageSource"><a href="#MessageSource" class="headerlink" title="MessageSource"></a>MessageSource</h3><p>MessageSource提供了处理国际化的能力,国际化字典我们一半存储在resource目录下的messages开头的properties文件</p><p><img src="/images/pasted-2.png" alt="resource示例"></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableApplicationContext context = SpringApplication.run(MarketServerApplication.class);</span><br><span class="line">String hi = context.getMessage(<span class="string">"hi"</span>, <span class="keyword">null</span>, Locale.CHINA);</span><br><span class="line">System.out.println(hi);</span><br></pre></td></tr></table></figure><h3 id="ResourcePatternResolver"><a href="#ResourcePatternResolver" class="headerlink" title="ResourcePatternResolver"></a>ResourcePatternResolver</h3><p>ResourcePatternResolver资源文件的处理能力，如application.properties</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableApplicationContext context = SpringApplication.run(MarketServerApplication.class);</span><br><span class="line">Resource[] resources = context.getResources(&quot;classpath*:META-INF/spring.factories&quot;);</span><br><span class="line">for (Resource resource : resources) &#123;</span><br><span class="line">System.out.println(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL [jar:file:/Users/anakin/develop/mvn-repository/org/springframework/boot/spring-boot/2.3.12.RELEASE/spring-boot-2.3.12.RELEASE.jar!/META-INF/spring.factories]</span><br><span class="line">URL [jar:file:/Users/anakin/develop/mvn-repository/org/springframework/boot/spring-boot-autoconfigure/2.3.12.RELEASE/spring-boot-autoconfigure-2.3.12.RELEASE.jar!/META-INF/spring.factories]</span><br><span class="line">URL [jar:file:/Users/anakin/develop/mvn-repository/org/springframework/spring-beans/5.2.15.RELEASE/spring-beans-5.2.15.RELEASE.jar!/META-INF/spring.factories]</span><br></pre></td></tr></table></figure><h3 id="EnviromentCapable"><a href="#EnviromentCapable" class="headerlink" title="EnviromentCapable"></a>EnviromentCapable</h3><p>EnviromentCapable提供配置信息查看能力，可以是配置文件，也可以是环境变量（不区分大小写）等。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(context.getEnviroment().getProperty(&quot;java_home&quot;));</span><br><span class="line">System.out.println(context.getEnviroment().getProperty(&quot;server.port&quot;));</span><br></pre></td></tr></table></figure><h3 id="ApplicationEventPublisher"><a href="#ApplicationEventPublisher" class="headerlink" title="ApplicationEventPublisher"></a>ApplicationEventPublisher</h3><p>ApplicationEventPublisher提供事件发布的能力</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Event event = new Event();</span><br><span class="line">applicationContext.publishEvent(event);</span><br></pre></td></tr></table></figure><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@EventListener</span><br><span class="line">public void listenEvent(Event event)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容器实现"><a href="#容器实现" class="headerlink" title="容器实现"></a>容器实现</h2><h3 id="BeanFactory实现的特点"><a href="#BeanFactory实现的特点" class="headerlink" title="BeanFactory实现的特点"></a>BeanFactory实现的特点</h3><blockquote><p>BeanFactory不会主动做的事情</p></blockquote><blockquote><blockquote><p>不会主动调用BeanFactory后处理器</p></blockquote></blockquote><blockquote><blockquote><p>不会主动添加Bean后处理器</p></blockquote></blockquote><blockquote><blockquote><p>不会主动初始化单例对象</p></blockquote></blockquote><blockquote><blockquote><p>不会解析BeanFactory，还不会解析${}与#{}</p></blockquote></blockquote><blockquote><p>Bean后处理器有排序的逻辑</p></blockquote><h4 id="DefaultListableBeanFactory-1"><a href="#DefaultListableBeanFactory-1" class="headerlink" title="DefaultListableBeanFactory"></a>DefaultListableBeanFactory</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();</span><br><span class="line">    // bean 的定义（class,scope,初始化,销毁)</span><br><span class="line">    AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(&quot;singleton).getBeanDefinition();</span><br><span class="line">    // 给BeanFactory添加一些常用的后置处理器(如@Configuration、@Bean等等扩展功能)</span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">    // 执行Bean工厂后置处理器</span><br><span class="line">    Map&lt;String, BeanFactoryPostProcessor&gt; beansOfType = beanFactory.getBeansOfType(BeanFactoryPostProcessor.class);</span><br><span class="line">    beansOfType.values().stream().forEach(beanFactoryPostProcessor -&gt; beanFactoryPostProcessor.postProcessBeanFactory(context.getBeanFactory()));</span><br><span class="line">    // 添加Bean后置处理器与bean工厂的联系（针对Bean生命周期的各个阶段提供扩展，例如@Autowired、@Resource等）</span><br><span class="line">    beanFactory.getBeansOfType(BeanPostProcessor.class).values().forEach(beanFactory::addBeanPostProcessor);</span><br><span class="line">    // beanFactory默认延迟创建对象，我们可以执行下面的方法提前创建对象</span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上添加的后置处理器如下(Bean工厂后置处理器及Bean后置处理器都有)</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br></pre></td></tr></table></figure><p>常见的Bean工厂后置处理器</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor------&gt;org.springframework.context.annotation.ConfigurationClassPostProcessor@2b27d5d3</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor------&gt;org.springframework.context.event.EventListenerMethodProcessor@12115c28</span><br><span class="line">propertySourcesPlaceholderConfigurer------&gt;org.springframework.context.support.PropertySourcesPlaceholderConfigurer@cc3fc5c</span><br><span class="line">preserveErrorControllerTargetClassPostProcessor------&gt;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$PreserveErrorControllerTargetClassPostProcessor@2aac60b</span><br><span class="line">cn.hutool.extra.spring.SpringUtil------&gt;cn.hutool.extra.spring.SpringUtil@173602c0</span><br><span class="line">org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer------&gt;org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer@fdeec12</span><br><span class="line">refreshScope------&gt;org.springframework.cloud.context.scope.refresh.RefreshScope@de579ff</span><br></pre></td></tr></table></figure><p>常见的Bean后置处理器</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor------&gt;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor@6fe55fcf</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor------&gt;org.springframework.context.annotation.CommonAnnotationBeanPostProcessor@4d1f6e1c</span><br><span class="line">org.springframework.aop.config.internalAutoProxyCreator------&gt;proxyTargetClass=true; optimize=false; opaque=false; exposeProxy=false; frozen=false</span><br><span class="line">org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor------&gt;org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor@3431cb1f</span><br><span class="line">webServerFactoryCustomizerBeanPostProcessor------&gt;org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor@42c9f2cd</span><br><span class="line">errorPageRegistrarBeanPostProcessor------&gt;org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor@797c67c</span><br><span class="line">methodValidationPostProcessor------&gt;proxyTargetClass=true; optimize=false; opaque=false; exposeProxy=false; frozen=false</span><br><span class="line">dataSourceInitializerPostProcessor------&gt;org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor@31ce271c</span><br><span class="line">org.springframework.amqp.rabbit.config.internalRabbitListenerAnnotationProcessor------&gt;org.springframework.amqp.rabbit.annotation.RabbitListenerAnnotationBeanPostProcessor@b1d7b09</span><br><span class="line">healthEndpointGroupsBeanPostProcessor------&gt;org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration$HealthEndpointGroupsBeanPostProcessor@64faf3d</span><br><span class="line">meterRegistryPostProcessor------&gt;org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessor@3f523dae</span><br><span class="line">rabbitConnectionFactoryMetricsPostProcessor------&gt;org.springframework.boot.actuate.autoconfigure.metrics.amqp.RabbitConnectionFactoryMetricsPostProcessor@7fe40b9f</span><br><span class="line">persistenceExceptionTranslationPostProcessor------&gt;proxyTargetClass=true; optimize=false; opaque=false; exposeProxy=false; frozen=false</span><br><span class="line">projectingArgumentResolverBeanPostProcessor------&gt;org.springframework.data.web.config.ProjectingArgumentResolverRegistrar$ProjectingArgumentResolverBeanPostProcessor@1f41f259</span><br><span class="line">configurationPropertiesBeans------&gt;org.springframework.cloud.context.properties.ConfigurationPropertiesBeans@648c80cb</span><br><span class="line">org.springframework.context.annotation.internalAsyncAnnotationProcessor------&gt;proxyTargetClass=false; optimize=false; opaque=false; exposeProxy=false; frozen=false</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-3.png" alt="一些Bean工厂后置处理器的实现类图"></p><p><img src="/images/pasted-4.png" alt="一些Bean后置处理器的实现类图"></p><h3 id="ApplicationContext的常见实现与特点"><a href="#ApplicationContext的常见实现与特点" class="headerlink" title="ApplicationContext的常见实现与特点"></a>ApplicationContext的常见实现与特点</h3><p><img src="/images/pasted-5.png" alt="ApplicationContext实现关系图"></p><h3 id="内嵌容器注册DispatcherServlet"><a href="#内嵌容器注册DispatcherServlet" class="headerlink" title="内嵌容器注册DispatcherServlet"></a>内嵌容器注册DispatcherServlet</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Golang实现一个Web服务器</title>
      <link href="/2021/09/18/%E4%BD%BF%E7%94%A8Golang%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/09/18/%E4%BD%BF%E7%94%A8Golang%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>废话少说直接看代码</p></blockquote> <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"> package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/***********************服务器抽象***********************/</span><br><span class="line">// Server 抽象服务器</span><br><span class="line">type Server interface &#123;</span><br><span class="line">// Route 设定一个路由，命中该路由的会执行handleFunc的代码</span><br><span class="line">Route(pattern string, handleFunc http.HandlerFunc)</span><br><span class="line"></span><br><span class="line">// Start 启动我们的服务器</span><br><span class="line">Start(address string) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***********************服务器实现***********************/</span><br><span class="line">type sdkHttpServer struct &#123;</span><br><span class="line">Name string // Name 服务器应用名称查看方法 NewSdkHttpServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Route 设定一个路由，命中该路由的会执行handleFunc的代码 实现了Server接口</span><br><span class="line">func (server *sdkHttpServer) Route(pattern string, handleFunc http.HandlerFunc) &#123;</span><br><span class="line">http.HandleFunc(pattern, handleFunc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Start 启动我们的服务器</span><br><span class="line">func (server *sdkHttpServer) Start(address string) error &#123;</span><br><span class="line">return http.ListenAndServe(&quot;:8080&quot;, nil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// NewSdkHttpServer 新建名为name的sdkHttpServer</span><br><span class="line">func NewSdkHttpServer(name string) Server &#123;</span><br><span class="line">return &amp;sdkHttpServer&#123;Name: name&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/********************HttpContext抽象********************/</span><br><span class="line">type Context struct &#123;</span><br><span class="line">writer  http.ResponseWriter</span><br><span class="line">request *http.Request</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// NewContext 构造方法</span><br><span class="line">func NewContext(writer http.ResponseWriter, request *http.Request) *Context &#123;</span><br><span class="line">return &amp;Context&#123;writer: writer, request: request&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ReadJson 读取request请求发过来的json数据</span><br><span class="line">func (context *Context) ReadJson(data interface&#123;&#125;) error &#123;</span><br><span class="line">body, err := io.ReadAll(context.request.Body)</span><br><span class="line">//读流错误</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return json.Unmarshal(body, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// WriteJson 响应Json数据</span><br><span class="line">func (context *Context) WriteJson(status int, data interface&#123;&#125;) error &#123;</span><br><span class="line">bytes, err := json.Marshal(data)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">_, err = context.writer.Write(bytes)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">context.writer.WriteHeader(status)</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// OkJson 请求成功</span><br><span class="line">func (context Context) OkJson(data interface&#123;&#125;) error &#123;</span><br><span class="line">return context.WriteJson(http.StatusOK, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SystemErrJson 系统内部异常</span><br><span class="line">func (context Context) SystemErrJson(data interface&#123;&#125;) error &#123;</span><br><span class="line">return context.WriteJson(http.StatusInternalServerError, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// BadRequestJson 错误的请求数据</span><br><span class="line">func (context Context) BadRequestJson(data interface&#123;&#125;) error &#123;</span><br><span class="line">return context.WriteJson(http.StatusBadRequest, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**********************响应实体封装**********************/</span><br><span class="line">// commonResponse 公共的响应结果包装</span><br><span class="line">type commonResponse struct &#123;</span><br><span class="line">Code int         `json:&quot;code&quot;`</span><br><span class="line">Msg  string      `json:&quot;msg&quot;`</span><br><span class="line">Data interface&#123;&#125; `json:&quot;data&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***********************请求的实体***********************/</span><br><span class="line">type signUpReq struct &#123;</span><br><span class="line">Email             string `json:&quot;email&quot;`</span><br><span class="line">Password          string `json:&quot;password&quot;`</span><br><span class="line">ConfirmedPassword string `json:&quot;confirmed_password&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**********************路由处理方法**********************/</span><br><span class="line">// handler</span><br><span class="line">func handler(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">fmt.Fprintf(writer, &quot;Hi there, I love %s!&quot;, request.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// parseForm</span><br><span class="line">func parseForm(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">fmt.Fprintf(writer, &quot;before parse form %v\n&quot;, request.Form)</span><br><span class="line">err := request.ParseForm()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Fprintf(writer, &quot;parse form error %v\n&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(writer, &quot;before parse form %v&quot;, request.Form)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// signUp 用户注册</span><br><span class="line">func signUp(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">context := NewContext(writer, request)</span><br><span class="line">req := &amp;signUpReq&#123;&#125;</span><br><span class="line">err := context.ReadJson(req)</span><br><span class="line">// 没有读到json请求错误</span><br><span class="line">if err != nil &#123;</span><br><span class="line">context.BadRequestJson(&amp;commonResponse&#123;</span><br><span class="line">Code: 400,</span><br><span class="line">Msg:  fmt.Sprintf(&quot;intalid request %v&quot;, err),</span><br><span class="line">&#125;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">_ = context.OkJson(&amp;commonResponse&#123;Code: 0, Msg: &quot;success&quot;, Data: req&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// main 程序入口</span><br><span class="line">func main() &#123;</span><br><span class="line">httpServer := NewSdkHttpServer(&quot;test&quot;)</span><br><span class="line">httpServer.Route(&quot;/&quot;, handler)</span><br><span class="line">httpServer.Route(&quot;/parseForm&quot;, parseForm)</span><br><span class="line">httpServer.Route(&quot;/signUp&quot;, signUp)</span><br><span class="line">httpServer.Start(&quot;:8080&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM知识体系</title>
      <link href="/2021/08/06/JVM%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
      <url>/2021/08/06/JVM%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="认识JVM"><a href="#认识JVM" class="headerlink" title="认识JVM"></a>认识JVM</h2><p>认识JVM规范：重点是理解JVM规范的作用，了解JVM规范的主要内容</p><p>认识JVM：是什么、有什么、能干什么<br>JVM:Java virtual machine,也就是java虚拟机</p><p>所谓的虚拟机是指：通过软件模拟的具有完整硬件系统功能、运行在一个完全隔离环境中的计算机系统</p><p>JVM是通过软件来模拟Java字节玛的指令集，是Java程序运行的环境</p><p>java如何实现平台无关</p><p><img src="/images/img_47.png" alt="JVM概述图"></p><p>JVM主要功能<br>1、通过ClassLoader寻找和装在class文件<br>2、解释字节码成为指令并执行，提供class文件运行环境<br>3、运行期间内存非配<br>4、提供硬件交互的平台</p><p>虚拟机是平台无关的保障</p><p><img src="/images/img_49.png" alt="虚拟机是平台无关的保障"></p><p>JVM规范作用<br>1.Java虚拟机规范为不同的硬件平台提供了一种编译Java技术代码的规范。<br>2.该规范使用Java软件独立于平台，因为编译是针对作为虚拟机的“一般机器”而做。<br>3.这个“一般机器”可用软件模拟并运行于各种现存的计算机系统，也可用硬件来实现。</p><p>JVM规范定义的主要内容<br>字节码指令集（相当于中央处理器CPU）,详看JVM虚拟机规范<br>class文件格式<br>数据类型和值，详看JVM虚拟机规范<br>运行时数据区<br>栈帧<br>特殊方法<br>    &lt;init&gt;:实例初始化方法，通过invokespecial指令来调用<br>    &lt;clinit&gt;:类或接口的初始化方法，不包含参数，返回void<br>类库<br>      Java虚拟机必须要对一些Java类库提供支持，否则这些类库根本无法实现，比如（反射、加载和创建类或接口，如ClassLoader、连接或初始化类和接口的类、安全，如security、多线程、弱引用）<br>异常处理<br>虚拟机的启动、加载、链接和初始化</p><p>Java虚拟机规范下载地址<br><a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/index.html</a></p><h2 id="class文件格式"><a href="#class文件格式" class="headerlink" title="class文件格式"></a>class文件格式</h2><ul><li><p>class文件是JVM的输入，Java虚拟机规范中定义了Class文件结构。Class文件Jvm实现平台无关、技术无关的基础</p><ul><li><p>1.class文件是一组以8字节为单位的字节流，各个数据项目按顺序紧凑排列</p></li><li><p>2.对于占用空间大于8字节的数据项，按照高位在前的方式分割成多个8字节进行存储</p></li><li><p>3.class文件格式里面只有两种类型：无符号数、表，详看JVM虚拟机规范</p><ul><li><p>（1）无符号数：基本数据类型，以u1、u2、u4、u8来代表几个字节的无符号数</p></li><li><p>（2）表：由多个无符号数和其他表构成的符合数据类型，通常以“_info”结尾</p></li></ul></li></ul></li><li><p>javap工具生成非正式的“虚拟机汇编语言”，格式如下</p></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;index&gt; &lt;opcode&gt; [&lt;operand1&gt; [&lt;operand2&gt; ...]][&lt;comment&gt;]</span><br></pre></td></tr></table></figure><ul><li><p>&lt;index&gt;是指令操作码在数组种的下标，该数组以字节的形式存储当前方法的Java虚拟机代码；也可以是相对方法起始处的字节偏移量</p></li><li><p>&lt;opcode&gt;是指令的助记码、&lt;operand&gt;是操作数、&lt;comment&gt;是注释</p></li></ul><h3 id="class文件格式说明"><a href="#class文件格式说明" class="headerlink" title="class文件格式说明"></a>class文件格式说明</h3><ul><li><p>constant_pool_count:是从1开始的</p></li><li><p>不同的常亮类型，用tag来区分的，它后面对应的info结构是不一样的</p></li><li><p>L表示对象，[表示数组，V表示void</p></li><li><p>了解预定义attribute的含义</p></li><li><p>stack:方法执行时，操作栈的深度</p></li><li><p>Locals：局部变量所需的存储空间，单位是slot</p></li><li><p>slot：是虚拟机为局部变量分配内存所使用的最小单位</p></li><li><p>arg_size：参数个数，为1的话，因实例方法会默认传入this，locals也会预留一个slot来存放</p></li></ul><p>TestJVM.java原始文件</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package world.ismyfree.demo;</span><br><span class="line"></span><br><span class="line">public class TestJvm &#123;</span><br><span class="line"></span><br><span class="line">    public static final     String HELLO_JAVA = &quot;hello java&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(String.format(&quot;get message = %s&quot;, HELLO_JAVA));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestJVM.class原始文件</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">cafe babe 0000 0034 002d 0a00 0400 1909</span><br><span class="line">001a 001b 0800 1c07 001d 0700 1e08 001f</span><br><span class="line">0a00 2000 210a 0022 0023 0100 0a48 454c</span><br><span class="line">4c4f 5f4a 4156 4101 0012 4c6a 6176 612f</span><br><span class="line">6c61 6e67 2f53 7472 696e 673b 0100 0d43</span><br><span class="line">6f6e 7374 616e 7456 616c 7565 0100 063c</span><br><span class="line">696e 6974 3e01 0003 2829 5601 0004 436f</span><br><span class="line">6465 0100 0f4c 696e 654e 756d 6265 7254</span><br><span class="line">6162 6c65 0100 124c 6f63 616c 5661 7269</span><br><span class="line">6162 6c65 5461 626c 6501 0004 7468 6973</span><br><span class="line">0100 1d4c 776f 726c 642f 6973 6d79 6672</span><br><span class="line">6565 2f64 656d 6f2f 5465 7374 4a76 6d3b</span><br><span class="line">0100 046d 6169 6e01 0016 285b 4c6a 6176</span><br><span class="line">612f 6c61 6e67 2f53 7472 696e 673b 2956</span><br><span class="line">0100 0461 7267 7301 0013 5b4c 6a61 7661</span><br><span class="line">2f6c 616e 672f 5374 7269 6e67 3b01 000a</span><br><span class="line">536f 7572 6365 4669 6c65 0100 0c54 6573</span><br><span class="line">744a 766d 2e6a 6176 610c 000c 000d 0700</span><br><span class="line">240c 0025 0026 0100 1067 6574 206d 6573</span><br><span class="line">7361 6765 203d 2025 7301 0010 6a61 7661</span><br><span class="line">2f6c 616e 672f 4f62 6a65 6374 0100 1b77</span><br><span class="line">6f72 6c64 2f69 736d 7966 7265 652f 6465</span><br><span class="line">6d6f 2f54 6573 744a 766d 0100 0a68 656c</span><br><span class="line">6c6f 206a 6176 6107 0027 0c00 2800 2907</span><br><span class="line">002a 0c00 2b00 2c01 0010 6a61 7661 2f6c</span><br><span class="line">616e 672f 5379 7374 656d 0100 036f 7574</span><br><span class="line">0100 154c 6a61 7661 2f69 6f2f 5072 696e</span><br><span class="line">7453 7472 6561 6d3b 0100 106a 6176 612f</span><br><span class="line">6c61 6e67 2f53 7472 696e 6701 0006 666f</span><br><span class="line">726d 6174 0100 3928 4c6a 6176 612f 6c61</span><br><span class="line">6e67 2f53 7472 696e 673b 5b4c 6a61 7661</span><br><span class="line">2f6c 616e 672f 4f62 6a65 6374 3b29 4c6a</span><br><span class="line">6176 612f 6c61 6e67 2f53 7472 696e 673b</span><br><span class="line">0100 136a 6176 612f 696f 2f50 7269 6e74</span><br><span class="line">5374 7265 616d 0100 0770 7269 6e74 6c6e</span><br><span class="line">0100 1528 4c6a 6176 612f 6c61 6e67 2f53</span><br><span class="line">7472 696e 673b 2956 0021 0005 0004 0000</span><br><span class="line">0001 0019 0009 000a 0001 000b 0000 0002</span><br><span class="line">0006 0002 0001 000c 000d 0001 000e 0000</span><br><span class="line">002f 0001 0001 0000 0005 2ab7 0001 b100</span><br><span class="line">0000 0200 0f00 0000 0600 0100 0000 0300</span><br><span class="line">1000 0000 0c00 0100 0000 0500 1100 1200</span><br><span class="line">0000 0900 1300 1400 0100 0e00 0000 4300</span><br><span class="line">0600 0100 0000 15b2 0002 1203 04bd 0004</span><br><span class="line">5903 1206 53b8 0007 b600 08b1 0000 0002</span><br><span class="line">000f 0000 000a 0002 0000 0008 0014 0009</span><br><span class="line">0010 0000 000c 0001 0000 0015 0015 0016</span><br><span class="line">0000 0001 0017 0000 0002 0018</span><br></pre></td></tr></table></figure><p>javap -verbose TestJVM.class(助记符)</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">Classfile /home/anakin/IdeaProjects/untitled/target/classes/world/ismyfree/demo/TestJvm.class</span><br><span class="line">  Last modified 2021-8-8; size 764 bytes</span><br><span class="line">  MD5 checksum b5c5da06a2ed9a50c599a61bf2f71066</span><br><span class="line">  Compiled from &quot;TestJvm.java&quot;</span><br><span class="line">public class world.ismyfree.demo.TestJvm</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #4.#25         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #26.#27        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #3 = String             #28            // get message = %s</span><br><span class="line">   #4 = Class              #29            // java/lang/Object</span><br><span class="line">   #5 = Class              #30            // world/ismyfree/demo/TestJvm</span><br><span class="line">   #6 = String             #31            // hello java</span><br><span class="line">   #7 = Methodref          #32.#33        // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</span><br><span class="line">   #8 = Methodref          #34.#35        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">   #9 = Utf8               HELLO_JAVA</span><br><span class="line">  #10 = Utf8               Ljava/lang/String;</span><br><span class="line">  #11 = Utf8               ConstantValue</span><br><span class="line">  #12 = Utf8               &lt;init&gt;</span><br><span class="line">  #13 = Utf8               ()V</span><br><span class="line">  #14 = Utf8               Code</span><br><span class="line">  #15 = Utf8               LineNumberTable</span><br><span class="line">  #16 = Utf8               LocalVariableTable</span><br><span class="line">  #17 = Utf8               this</span><br><span class="line">  #18 = Utf8               Lworld/ismyfree/demo/TestJvm;</span><br><span class="line">  #19 = Utf8               main</span><br><span class="line">  #20 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #21 = Utf8               args</span><br><span class="line">  #22 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #23 = Utf8               SourceFile</span><br><span class="line">  #24 = Utf8               TestJvm.java</span><br><span class="line">  #25 = NameAndType        #12:#13        // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #26 = Class              #36            // java/lang/System</span><br><span class="line">  #27 = NameAndType        #37:#38        // out:Ljava/io/PrintStream;</span><br><span class="line">  #28 = Utf8               get message = %s</span><br><span class="line">  #29 = Utf8               java/lang/Object</span><br><span class="line">  #30 = Utf8               world/ismyfree/demo/TestJvm</span><br><span class="line">  #31 = Utf8               hello java</span><br><span class="line">  #32 = Class              #39            // java/lang/String</span><br><span class="line">  #33 = NameAndType        #40:#41        // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</span><br><span class="line">  #34 = Class              #42            // java/io/PrintStream</span><br><span class="line">  #35 = NameAndType        #43:#44        // println:(Ljava/lang/String;)V</span><br><span class="line">  #36 = Utf8               java/lang/System</span><br><span class="line">  #37 = Utf8               out</span><br><span class="line">  #38 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #39 = Utf8               java/lang/String</span><br><span class="line">  #40 = Utf8               format</span><br><span class="line">  #41 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</span><br><span class="line">  #42 = Utf8               java/io/PrintStream</span><br><span class="line">  #43 = Utf8               println</span><br><span class="line">  #44 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  public static final java.lang.String HELLO_JAVA;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL</span><br><span class="line">    ConstantValue: String hello java</span><br><span class="line"></span><br><span class="line">  public world.ismyfree.demo.TestJvm();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   Lworld/ismyfree/demo/TestJvm;</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=6, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #3                  // String get message = %s</span><br><span class="line">         5: iconst_1</span><br><span class="line">         6: anewarray     #4                  // class java/lang/Object</span><br><span class="line">         9: dup</span><br><span class="line">        10: iconst_0</span><br><span class="line">        11: ldc           #6                  // String hello java</span><br><span class="line">        13: aastore</span><br><span class="line">        14: invokestatic  #7                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</span><br><span class="line">        17: invokevirtual #8                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        20: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 8: 0</span><br><span class="line">        line 9: 20</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0      21     0  args   [Ljava/lang/String;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;TestJvm.java&quot;</span><br></pre></td></tr></table></figure><h2 id="ASM开发"><a href="#ASM开发" class="headerlink" title="ASM开发"></a>ASM开发</h2><h3 id="认识ASM"><a href="#认识ASM" class="headerlink" title="认识ASM"></a>认识ASM</h3><ul><li><p>ASM是一个Java字节码操纵框架，它能用来动态生成类或者增强既有类的功能</p></li><li><p>ASM能直接产生二进制class文件，也可以在类被加入虚拟机之前动态改变类行为，ASM类文件读入信息后，能够改变类行为，分析类信息，甚至能根据要求生成新类。</p></li><li><p>目前许多框架如cglib、Hibernate、Spring都直接或间接地使用ASM操作字节码</p></li></ul><h3 id="ASM编程模型"><a href="#ASM编程模型" class="headerlink" title="ASM编程模型"></a>ASM编程模型</h3><ul><li><p>Core API：提供了基于事件形式的编程模型。该模型不需要一次性将整个类的结构读取到内存中，因此这种方式更快，需要更少的内存，但这种编程方式难度较大。</p></li><li><p>Tree API：提供了基于树形的编程模型。该模型需要一次性将一个类的完整结构全部读取到内存当中，所以这种方法需要更多的内存，这种编程方式较简单。</p></li></ul><h3 id="ASM核心API"><a href="#ASM核心API" class="headerlink" title="ASM核心API"></a>ASM核心API</h3><h4 id="ASM的Core-API"><a href="#ASM的Core-API" class="headerlink" title="ASM的Core API"></a>ASM的Core API</h4><ul><li><p>ASM Core API种操纵字节码的功能基于ClassVisitor接口。这个接口种的每个方法对应了class中的每一项。</p></li><li><p>ASM提供了三个基于ClassVisitor接口的类实现class文件的生成和转换</p><ul><li><p>1.ClassReader：ClassReader解析一个类的class字节码</p></li><li><p>2.ClassAdapter：ClassAdapter是ClassVisitor的实现类，实现要变化的功能</p></li><li><p>3.ClassWriter：ClassWriter也是ClassVisitor的实现类，可以用来输出要变化的字节码</p></li></ul></li></ul><h4 id="ASMifier"><a href="#ASMifier" class="headerlink" title="ASMifier"></a>ASMifier</h4><ul><li><p>1.ASM给我们提供了ASMifier工具帮助开发，可以使用ASMifier工具生成ASM结构来对比</p></li><li><p>2.工具Maven依赖</p></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.ow2.asm&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;asm&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.ow2.asm&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;asm-util&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>3.idea使用maven命令将jar包copy到当前项目的dependency目录方便调试</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:copy-dependencies</span><br></pre></td></tr></table></figure><ul><li>4.执行命令使用工具解析字节码</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp .:../dependency/asm-9.2.jar:../dependency/asm-util-9.2.jar org.objectweb.asm.util.ASMifier world.ismyfree.jvm.asm.CC</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql查询时间日期转换</title>
      <link href="/2021/03/01/mysql%E6%9F%A5%E8%AF%A2%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2/"/>
      <url>/2021/03/01/mysql%E6%9F%A5%E8%AF%A2%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转换示例如下</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">order_id orderId,</span><br><span class="line">REPLACE(REPLACE(FROM_UNIXTIME(order_time/1000,&apos;%Y%m%D%H:%i&apos;),&apos;th&apos;,&apos;&apos;),&apos;:&apos;,&apos;&apos;) AS orderTime,</span><br><span class="line">&quot;202102&quot; AS orderMonth </span><br><span class="line">FROM</span><br><span class="line">mall_order_sku_202102 as t1</span><br><span class="line">WHERE</span><br><span class="line">sku_id = 10023919984358 </span><br><span class="line">AND order_time &gt;= 1614355200000 </span><br><span class="line">AND order_time &lt; 1614441600000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Nginx配置HTTPS域名证书</title>
      <link href="/2021/01/28/%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AEHTTPS%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
      <url>/2021/01/28/%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AEHTTPS%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="配置ssl域名证书"><a href="#配置ssl域名证书" class="headerlink" title="配置ssl域名证书"></a>配置ssl域名证书</h1><blockquote><p>参考阿里云帮助文档<a href="https://help.aliyun.com/document_detail/98728.html?spm=5176.11065259.1996646101.searchclickresult.7f092f78xxRTpU" target="_blank" rel="noopener">在Nginx（或Tengine）服务器上安装证书</a></p></blockquote><h2 id="下载证书到本地"><a href="#下载证书到本地" class="headerlink" title="下载证书到本地"></a>下载证书到本地</h2><blockquote><p>去域名服务提供商申请域名证书（腾讯云与阿里云都可以申请免费的域名证书）</p></blockquote><p><img src="/images/img_41.png" alt="下载域名证书"></p><h2 id="上传证书文件到服务器"><a href="#上传证书文件到服务器" class="headerlink" title="上传证书文件到服务器"></a>上传证书文件到服务器</h2><blockquote><p>例如使用CRT附带的文件上传工具将证书文件上传到/usr/local/nginx/conf/cert目录下面</p></blockquote><blockquote><p>在nginx配置文件中添加配置（如下配置是根据nginx注释掉的默认配置直接修改而来,或参考上面提到的阿里云的文档）</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  www.ismyfree.world;</span><br><span class="line"></span><br><span class="line">    ssl_certificate      /usr/local/nginx/conf/cert/4810494_www.ismyfree.world.pem;</span><br><span class="line">    ssl_certificate_key  /usr/local/nginx/conf/cert/4810494_www.ismyfree.world.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本次演示基于本地服务器（无意义），正常情况下我们是通过现有的与服务器进行配置。</p></blockquote><h2 id="为什么要配置https域名证书"><a href="#为什么要配置https域名证书" class="headerlink" title="为什么要配置https域名证书"></a>为什么要配置https域名证书</h2><blockquote><p>符合苹果app审核的必要条件</p></blockquote><blockquote><p>同理安卓或微信小程序审核也是要符合这个条件的</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置JAVA环境变量</title>
      <link href="/2021/01/12/CentOS7%E9%85%8D%E7%BD%AEJAVA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2021/01/12/CentOS7%E9%85%8D%E7%BD%AEJAVA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在/etc/profile.d/路径下新建一个文件，名为java.sh</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/java.sh</span><br></pre></td></tr></table></figure><blockquote><p>在文件中配置如下环境配置内容</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_251</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br></pre></td></tr></table></figure><blockquote><p>保存并关闭文件，执行以下命令使之可运行</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/profile.d/java.sh</span><br></pre></td></tr></table></figure><blockquote><p>最后，执行以下命令来永久设置环境变量</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile.d/java.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea以debug方式启动时报错 Command line is too long</title>
      <link href="/2020/12/14/Idea%E4%BB%A5debug%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5%E9%94%99/"/>
      <url>/2020/12/14/Idea%E4%BB%A5debug%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="错误描述信息"><a href="#错误描述信息" class="headerlink" title="错误描述信息"></a>错误描述信息</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error running &apos;SaleAdminApplication&apos;: Command line is too long. Shorten command line for SaleAdminApplication or also for Spring Boot default configuration.</span><br></pre></td></tr></table></figure><blockquote><p>这个错误信息在run运行方式不出现，在debug的运行方式才会出现</p></blockquote><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><blockquote><p>使用编辑器打开工作目录下的文件 —&gt; .idea\workspace.xml</p></blockquote><blockquote><p>找到标签</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component name=&quot;PropertiesComponent&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>标签中添加内容</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql表备份办法</title>
      <link href="/2020/12/11/mysql%E8%A1%A8%E5%A4%87%E4%BB%BD%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/12/11/mysql%E8%A1%A8%E5%A4%87%E4%BB%BD%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="复制表结构导入旧表数据"><a href="#复制表结构导入旧表数据" class="headerlink" title="复制表结构导入旧表数据"></a>复制表结构导入旧表数据</h1><h2 id="新建新表与旧表表结构相同"><a href="#新建新表与旧表表结构相同" class="headerlink" title="新建新表与旧表表结构相同"></a>新建新表与旧表表结构相同</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table new_table like old_table;</span><br></pre></td></tr></table></figure><h2 id="将旧表数据导入新表"><a href="#将旧表数据导入新表" class="headerlink" title="将旧表数据导入新表"></a>将旧表数据导入新表</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into new_table select * from old_table;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git中tag标签的使用</title>
      <link href="/2020/12/04/git%E4%B8%ADtag%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/12/04/git%E4%B8%ADtag%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是tag"><a href="#什么是tag" class="headerlink" title="什么是tag"></a>什么是tag</h1><blockquote><p>tag是git版本库的一个标记，指向某个commit的指针。</p></blockquote><blockquote><p>tag主要用于发布版本的管理，一个版本发布之后，我们可以为git打上 v.1.0.1 v.1.0.2 …这样的标签。</p></blockquote><blockquote><p>tag感觉跟branch有点相似，但是本质上和分工上是不同的：</p></blockquote><blockquote><p>tag 对应某次commit, 是一个点，是不可移动的。</p></blockquote><blockquote><p>branch 对应一系列commit，是很多点连成的一根线，有一个HEAD 指针，是可以依靠 HEAD 指针移动的。</p></blockquote><h1 id="创建tag"><a href="#创建tag" class="headerlink" title="创建tag"></a>创建tag</h1><h2 id="创建本地tag"><a href="#创建本地tag" class="headerlink" title="创建本地tag"></a>创建本地tag</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tagName&gt;</span><br></pre></td></tr></table></figure><h2 id="创建tag指定message"><a href="#创建tag指定message" class="headerlink" title="创建tag指定message"></a>创建tag指定message</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m &quot;message&quot;</span><br></pre></td></tr></table></figure><h2 id="指定某个commit-id创建tag"><a href="#指定某个commit-id创建tag" class="headerlink" title="指定某个commit id创建tag"></a>指定某个commit id创建tag</h2><p><strong>先查看历史的comitId</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure><p><strong>指定某个commitId创建tag</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagName&gt; &lt;commitId&gt;</span><br></pre></td></tr></table></figure><h2 id="将tag推送到远程仓库"><a href="#将tag推送到远程仓库" class="headerlink" title="将tag推送到远程仓库"></a>将tag推送到远程仓库</h2><h3 id="指定tag推送到远端"><a href="#指定tag推送到远端" class="headerlink" title="指定tag推送到远端"></a>指定tag推送到远端</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;tagName&gt;</span><br></pre></td></tr></table></figure><h3 id="推送所有tag到远端"><a href="#推送所有tag到远端" class="headerlink" title="推送所有tag到远端"></a>推送所有tag到远端</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h1 id="查看tag"><a href="#查看tag" class="headerlink" title="查看tag"></a>查看tag</h1><p><strong>查看本地某个 tag 的详细信息</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;tagName&gt;</span><br></pre></td></tr></table></figure><p><strong>查看本地所有 tag</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 或者 git tag -l</span><br></pre></td></tr></table></figure><p><strong>查看远程所有 tag</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-remote --tags origin</span><br></pre></td></tr></table></figure><h1 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h1><h2 id="本地标签删除"><a href="#本地标签删除" class="headerlink" title="本地标签删除"></a>本地标签删除</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tagName&gt;</span><br></pre></td></tr></table></figure><h2 id="远程-tag-的删除"><a href="#远程-tag-的删除" class="headerlink" title="远程 tag 的删除"></a>远程 tag 的删除</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :&lt;tagName&gt;</span><br></pre></td></tr></table></figure><h1 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branchName&gt; &lt;tagName&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>golang学习笔记</title>
      <link href="/2020/11/24/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/11/24/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><blockquote><p><strong>使用var关键字</strong></p><blockquote><p>var a,b,c bool<br>var s1,s2 string = “hello”,”world”<br>可以放在函数内，或直接放在包内<br>使用var()集中定义变量</p></blockquote></blockquote><blockquote><p><strong>使用:=定义变量</strong></p><blockquote><p>a,b,i,s1,s2 := true,false,3,”hello”,”world”，让编译器自动决定编译类型<br>只能在函数内使用</p></blockquote></blockquote><blockquote><p><strong>变量定义注意事项</strong></p><blockquote><p>定义过得变量一定要使用，否则编译器会报错<br>字符串类型的变量初始值是空字符串（不像java为null）<br>变量定义的时候赋值可以不用定义数据类型，编译器会进行类型推断，甚至在同一行代码定义不同类型的变量都是可以的<br>在函数外面定义变量不能使用:=来定义变量，只能使用var关键字进行变量定义<br>函数外面定义变量作用域在包内部，没有全局变量的说法</p></blockquote></blockquote><h2 id="内建变量类型"><a href="#内建变量类型" class="headerlink" title="内建变量类型"></a>内建变量类型</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p><strong>bool</strong>:布尔</p></blockquote><blockquote><p><strong>string</strong>字符串</p></blockquote><blockquote><p><strong>int</strong>整形</p><blockquote><p><strong>(u)int</strong>  根据操作系统位数决定长度(32位系统长度(u)int32/64位系统(u)int64)<br><strong>(u)int8</strong><br><strong>(u)int16</strong><br><strong>(u)int32</strong><br><strong>(u)int64</strong></p></blockquote></blockquote><blockquote><p><strong>uinttpr</strong>指针</p></blockquote><blockquote><p><strong>byte</strong>字节</p></blockquote><blockquote><p><strong>rune</strong>字符(32bit)</p></blockquote><blockquote><p><strong>float</strong>(浮点)</p><blockquote><p><strong>float32</strong><br><strong>float64</strong></p></blockquote></blockquote><blockquote><p><strong>complex</strong>(复数)</p><blockquote><p><strong>complex64</strong>  实部和虚部各32位浮点数<br><strong>complex128</strong>  实部和虚部各64位浮点数</p></blockquote></blockquote><h3 id="复数回顾"><a href="#复数回顾" class="headerlink" title="复数回顾"></a>复数回顾</h3><p><strong>什么是复数</strong>:复数是形如 a ＋ b i的数.式中a,b 为 实数,i是一个满足<strong>i^2 ＝－1</strong>的数,因为任何实数的平方不等于－1,所以i不是实数,而是实数以外的新的数.</p><p><strong>|3+4i| = 5 ？到底是怎么算的？有知道的可以告诉我一下，我不会算😢</strong>开始还以为这个公式有问题，结果程序跑出来的结果就是这么多😫</p><p><img src="/images/img_5.png" alt="复数"></p><p><strong>i^0 = 1</strong></p><p><strong>i^1 = i</strong></p><p><strong>i^2 = -1</strong></p><p><strong>i^3 = -i</strong></p><p><strong>i^4 = 1</strong></p><p><strong>i^5 = i</strong></p><p><strong>i^6 = -1</strong></p><p><strong>我们发现</strong>每增加一个次方就逆时针旋转90度</p><p><img src="/images/img_6.png" alt="欧拉公式的由来"></p><p><img src="/images/img_7.png" alt="最美公式-欧拉公式"></p><h2 id="常量与枚举"><a href="#常量与枚举" class="headerlink" title="常量与枚举"></a>常量与枚举</h2><h3 id="常量定义使用const关键字定义"><a href="#常量定义使用const关键字定义" class="headerlink" title="常量定义使用const关键字定义"></a>常量定义使用const关键字定义</h3><blockquote><p>常量可以规定数据类型，也可以让编译器自主推断类型</p></blockquote><blockquote><p>常量也可以定义在const()里面表示定义一组常量</p></blockquote><blockquote><p>go语言的常量名称定义一般不大写，大写F代表public</p></blockquote><h3 id="枚举类型使用const-定义"><a href="#枚举类型使用const-定义" class="headerlink" title="枚举类型使用const()定义"></a>枚举类型使用const()定义</h3><blockquote><p>go语言中没有专门的枚举类型，所以我们以常量组作为枚举类型</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">zero = 0</span><br><span class="line">one = 1</span><br><span class="line">two = 2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>go语言提供了iota关键字是枚举值的自增表达式,使用_下划线跳过</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">cpp = iota</span><br><span class="line">_</span><br><span class="line">python</span><br><span class="line">golang</span><br><span class="line">javascript</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以上枚举常量的值为cpp:0/_:1/python:2/golang:3/javascript:4</p><blockquote><p>还能以iota关键之定义磁盘容量表达式如下</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">b 1 &lt;&lt; (10 * iota)</span><br><span class="line">kb</span><br><span class="line">mb</span><br><span class="line">gb</span><br><span class="line">tb</span><br><span class="line">pb</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><blockquote><p><strong>示例</strong>：读取文件</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">const filename = &quot;abc.txt&quot;</span><br><span class="line">//go语言的函数可以返回多个值</span><br><span class="line">file, err := ioutil.ReadFile(filename)</span><br><span class="line">//错误不为空打印错误</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//没有错误打印文本文件内容</span><br><span class="line">fmt.Printf(&quot;%s\n\n&quot;, file)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：go语言的if语句可以像其它语言的for语句的写法，先初始化赋值（定义变量），再进行条件判断,使用分号分隔，作用域在if以内，写法如下</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">const filename = &quot;abc.txt&quot;</span><br><span class="line">if file, err := ioutil.ReadFile(filename); err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Printf(&quot;%s\n\n&quot;, file)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch条件语句"><a href="#switch条件语句" class="headerlink" title="switch条件语句"></a>switch条件语句</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func eval(a int, b int, op string) int &#123;</span><br><span class="line">var result int</span><br><span class="line">switch op &#123;</span><br><span class="line">case &quot;+&quot;:</span><br><span class="line">result = a+b</span><br><span class="line">case &quot;-&quot;:</span><br><span class="line">result = a-b</span><br><span class="line">case &quot;*&quot;:</span><br><span class="line">result = a*b</span><br><span class="line">case &quot;/&quot;:</span><br><span class="line">result = a/b</span><br><span class="line">default:</span><br><span class="line">panic(&quot;unsupported operator&quot; + op)</span><br><span class="line">&#125;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>看看这段</strong></p><blockquote><p>switch代码块中的case会自动break，如果不适用break使用fallthrough，也就是其它预压的case穿透。</p></blockquote><blockquote><p>panic是go语言中的报错，报错会让程序停下来。</p></blockquote><p><strong>switch里面如果没有表达式也可以将条件放到case语句里面，代码如下：</strong></p><figure class="hljs highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">grade</span><span class="params">(score <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">g := <span class="string">""</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> score &lt; <span class="number">60</span>:</span><br><span class="line">g = <span class="string">"F"</span></span><br><span class="line"><span class="keyword">case</span> score &lt; <span class="number">80</span>:</span><br><span class="line">g = <span class="string">"C"</span></span><br><span class="line"><span class="keyword">case</span> score &lt; <span class="number">90</span>:</span><br><span class="line">g = <span class="string">"B"</span></span><br><span class="line"><span class="keyword">case</span> score &lt;= <span class="number">100</span>:</span><br><span class="line">g = <span class="string">"A"</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"Wrong score:%d"</span>,score))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> g</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p><strong>一个简单的for循环</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func loopdemo() &#123;</span><br><span class="line">sum := 1</span><br><span class="line">for i := 0; i &lt; 100; i++ &#123;</span><br><span class="line">sum+=1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>for语句的条件里不需要括号</p></blockquote><blockquote><p>for的条件里面可以省略初始条件，结束条件，递增表达式</p></blockquote><p><strong>没有初始化条件的写法</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//将数字转换为2进制字符</span><br><span class="line">func convertToBin(number int) string &#123;</span><br><span class="line">result := &quot;&quot;</span><br><span class="line">for ; number &gt; 0; number /= 2 &#123;</span><br><span class="line">lsb := number % 2</span><br><span class="line">result = strconv.Itoa(lsb) + result</span><br><span class="line">&#125;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br><span class="line">//go语言对换行有所讲究，需要加上逗号</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">convertToBin(2),</span><br><span class="line">convertToBin(3),</span><br><span class="line">convertToBin(4),</span><br><span class="line">)</span><br><span class="line">//打印结果为10 11 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化条件及递增表达式同时省略（相当于while，但是go语言中没有while）</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func printFile(filename string) &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">scanner := bufio.NewScanner(file)</span><br><span class="line">for scanner.Scan() &#123;</span><br><span class="line">fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">printFile(&quot;abc.txt&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>死循环写法(并发编程相互通信会用到死循环)</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func forever() &#123;</span><br><span class="line">for true &#123;</span><br><span class="line">fmt.Println(&quot;死循环&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">forever()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>函数可以返回多个值</p></blockquote><blockquote><p>函数返回多个值时可以起名字（仅限于非常简单的函数，但对于调用者可以随便起名）</p></blockquote><blockquote><p>go语言函数是函数式编程语言，函数是一等公民，函数里面的参数、返回值、函数体都可以有函数</p></blockquote><blockquote><p>go语言没有花哨的lambda表达式，是需要将匿名函数写出即可</p></blockquote><blockquote><p>go语言没有默认参数，也没有方法重载</p></blockquote><blockquote><p>go语言函数有可变参数列表</p></blockquote><h3 id="使用函数式编程实现3的4次方"><a href="#使用函数式编程实现3的4次方" class="headerlink" title="使用函数式编程实现3的4次方"></a>使用函数式编程实现3的4次方</h3><p><strong>代码如下</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//重新定义pow函数接收int类型</span><br><span class="line">func pow(a, b int) int &#123;</span><br><span class="line">return int(math.Pow(float64(a), float64(b)))</span><br><span class="line">&#125;</span><br><span class="line">//op定义了调用方传递的函数</span><br><span class="line">func apply(op func(int, int) int, a int, b int) (result int) &#123;</span><br><span class="line">//反射获取到传递过来的函数的指针</span><br><span class="line">pointer := reflect.ValueOf(op).Pointer()</span><br><span class="line">//通过指针获取函数名称</span><br><span class="line">name := runtime.FuncForPC(pointer).Name()</span><br><span class="line">//打印传递的函数名称及参数</span><br><span class="line">fmt.Printf(&quot;calling function is %s with args (%d,%d) \n&quot;, name, a, b)</span><br><span class="line">//返回值由传入的函数处理后的结果决定</span><br><span class="line">return op(a, b)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">//计算3的4次方等于81,传的的函数式操作为pow,a的b次方</span><br><span class="line">fmt.Println(apply(pow, 3, 4))</span><br><span class="line">//也可以使用匿名函数的方式，计算2的3次方</span><br><span class="line">fmt.Println(apply(</span><br><span class="line">func(a int, b int) int &#123;</span><br><span class="line">return int(math.Pow(float64(a), float64(b)))</span><br><span class="line">&#125;, 2, 3))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">calling function is main.pow with args (3,4) </span><br><span class="line">81</span><br><span class="line">calling function is main.main.func1 with args (2,3) </span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="函数的可变参示例"><a href="#函数的可变参示例" class="headerlink" title="函数的可变参示例"></a>函数的可变参示例</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func sum(numbers ...int) int &#123;</span><br><span class="line">sum := 0</span><br><span class="line">for i := range numbers &#123;</span><br><span class="line">sum += numbers[i]</span><br><span class="line">&#125;</span><br><span class="line">return sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p><strong>先看一段代码</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func pointer() &#123;</span><br><span class="line">//定义变量a赋值为2</span><br><span class="line">var a int = 2</span><br><span class="line">//定义一个指针pa，类型为*int（指针型int），指向变量a的地址值</span><br><span class="line">var pa *int = &amp;a</span><br><span class="line">//将指针*pa指向的地址值赋值为3,也就是将变量a赋值为3</span><br><span class="line">*pa = 3</span><br><span class="line">fmt.Println(a)</span><br><span class="line">//打印结果为3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>go语言的指针不能进行运算</p></blockquote><blockquote><p>go语言只有值传递一种方式（值传递会copy一份数据进行操作/引用传递会操作传递的值）</p></blockquote><blockquote><p>go语言通过指针传递能打到引用传递的效果</p></blockquote><blockquote><p>自定义类型需要考虑该类型是需要作为指针使用还是作为值来使用</p></blockquote><h3 id="使用指针对变量进行操作"><a href="#使用指针对变量进行操作" class="headerlink" title="使用指针对变量进行操作"></a>使用指针对变量进行操作</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func swap(a *int, b *int) &#123;</span><br><span class="line">*a, *b = *b, *a</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">a := 3</span><br><span class="line">b := 4</span><br><span class="line">//使用指针对变量进行操作</span><br><span class="line">swap(&amp;a, &amp;b)</span><br><span class="line">fmt.Println(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不使用指针将操作后的结果返回或许更好"><a href="#不使用指针将操作后的结果返回或许更好" class="headerlink" title="不使用指针将操作后的结果返回或许更好"></a>不使用指针将操作后的结果返回或许更好</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func swap(a int, b int) (resa int, resb int) &#123;</span><br><span class="line">return b, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 3</span><br><span class="line">b := 4</span><br><span class="line">//使用指针对变量进行操作</span><br><span class="line">a, b = swap(a, b)</span><br><span class="line">fmt.Println(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内建容器"><a href="#内建容器" class="headerlink" title="内建容器"></a>内建容器</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p><strong>数组是值类型</strong>，在函数中执行的时候进行拷贝一份再处理</p></blockquote><blockquote><p>go语言中认为[3]int类型与[5]int认为是不同的类型，在调用的时候数组长度不一致go会认为是不同类型</p></blockquote><blockquote><p>go语言中我们一般情况下不使用数组，也不使用数组的指针，我们使用切片Slice</p></blockquote><p><strong>数组的定义方法</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//定义容量为5元素类型为int的数组(元素初始值为0)</span><br><span class="line">var array1 [5]int</span><br><span class="line">//定义容量为3元素类型为int的数组(指定元素初始值)</span><br><span class="line">array2 := [3]int&#123;1,2,3&#125;</span><br><span class="line">//容量为编译器来确定类型为int的数组</span><br><span class="line">array3 := [...]int&#123;2,4,6,8,10&#125;</span><br><span class="line">//定义4行5列的int类型二维数组(元素初始值为0)</span><br><span class="line">var grid [4][5]int</span><br></pre></td></tr></table></figure><p><strong>普通for循环遍历数组</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func foreachArr() &#123;</span><br><span class="line">arr := [...]int&#123;2,4,6,8,10&#125;</span><br><span class="line">for i := 0; i &lt; len(arr); i++ &#123;</span><br><span class="line">fmt.Println(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for i := range遍历数组</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func foreachArr() &#123;</span><br><span class="line">arr := [...]int&#123;2,4,6,8,10&#125;</span><br><span class="line">//这里的i取到的是arr的索引</span><br><span class="line">for i := range arr&#123;</span><br><span class="line">fmt.Println(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for i := range遍历数组同时取索引和值</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func foreachArr() &#123;</span><br><span class="line">arr := [...]int&#123;2,4,6,8,10&#125;</span><br><span class="line">//这里的i取到的是arr的索引，v取到的是值</span><br><span class="line">for i,v := range arr&#123;</span><br><span class="line">fmt.Println(i,v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for i := range遍历数组只获取值</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func foreachArr() &#123;</span><br><span class="line">arr := [...]int&#123;2,4,6,8,10&#125;</span><br><span class="line">//这里的索引以下标_替换代表不取索引，v取到的是值（任何地方都可以使用下标_省略变量）</span><br><span class="line">for _,v := range arr&#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切片-Slice"><a href="#切片-Slice" class="headerlink" title="切片(Slice)"></a>切片(Slice)</h2><p><strong>我们先看一段代码，看看什么是切片</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]int&#123;0,1,2,3,4,5,6,7&#125;</span><br><span class="line">s := arr[2:6]</span><br><span class="line">//这里的s就是切片,一个左闭右开的区(数学里面的闭区间是取等的)</span><br></pre></td></tr></table></figure><blockquote><p>Slice其实是数组的一个视图</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[2:6] = [2 3 4 5]</span><br><span class="line">arr[:6] = [0 1 2 3 4 5]</span><br><span class="line">arr[2:] = [2 3 4 5 6 7]</span><br><span class="line">arr[:] = [0 1 2 3 4 5 6 7]</span><br></pre></td></tr></table></figure><blockquote><p>Slice本身没有数据，是对底层array的一个view</p></blockquote><h3 id="Reslice"><a href="#Reslice" class="headerlink" title="Reslice"></a>Reslice</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]int&#123;0,1,2,3,4,5,6,7&#125;</span><br><span class="line">s2 := arr[:]</span><br><span class="line">//[0 1 2 3 4 5 6 7]</span><br><span class="line">s2 = s2[:5]</span><br><span class="line">//[0 1 2 3 4]</span><br><span class="line">s2 = s2[2:]</span><br><span class="line">//[2 3 4]</span><br></pre></td></tr></table></figure><h3 id="slice的扩展"><a href="#slice的扩展" class="headerlink" title="slice的扩展"></a>slice的扩展</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]int&#123;0,1,2,3,4,5,6,7&#125;</span><br><span class="line">//上面是元素数据</span><br><span class="line">s1 := arr[2:6]</span><br><span class="line">//[2 3 4 5]</span><br><span class="line">//fmt.Pringln(s1[4])</span><br><span class="line">//上面这行注释的代码会报索引越界异常，用下面的slice(s2)可以结局这个问题，golang的slice有cap的概念</span><br><span class="line">s2 := s1[3:5]</span><br><span class="line">//[5 6]</span><br></pre></td></tr></table></figure><p><strong>上面这一块的代码图解如下</strong></p><p><img src="/images/img_8.png" alt="slice扩展"></p><h3 id="slice的实现"><a href="#slice的实现" class="headerlink" title="slice的实现"></a>slice的实现</h3><p><img src="/images/img_9.png" alt="slice的实现"></p><blockquote><p>slice底层有一个array</p></blockquote><blockquote><p>ptr指向了slice开头的元素</p></blockquote><blockquote><p>len指向了slice的长度，使用slice[n]只能取len长度里面的值，超过长度值会报索引越界</p></blockquote><blockquote><p>cap代表了从ptr开始整个数组的长度，扩展的时候只要不超过cap的长度就可以</p></blockquote><blockquote><p>slice可以向后扩展，但是不可以往前扩展，向后扩展不可以超过cap的长度</p></blockquote><blockquote><p>len(slice)可以取到这个slice的长度，cap(slice)可以取到这个slice的cap长度</p></blockquote><h2 id="切片-slice-的操作"><a href="#切片-slice-的操作" class="headerlink" title="切片(slice)的操作"></a>切片(slice)的操作</h2><h3 id="slice的append操作"><a href="#slice的append操作" class="headerlink" title="slice的append操作"></a>slice的append操作</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]int&#123;0,1,2,3,4,5,6,7&#125;</span><br><span class="line">//上面是元素数据</span><br><span class="line">s1 := arr[2:6]</span><br><span class="line">//s1---&gt;[2 3 4 5]</span><br><span class="line">//fmt.Pringln(s1[4])</span><br><span class="line">//上面这行注释的代码会报索引越界异常，用下面的slice(s2)可以结局这个问题，golang的slice有cap的概念</span><br><span class="line">s2 := s1[3:5]</span><br><span class="line">//s2---&gt;[5 6]</span><br><span class="line">s3 := appent(s2,10)</span><br><span class="line">//s3---&gt;[5 6 10]</span><br><span class="line">s4 := appent(s3,11)</span><br><span class="line">//s4---&gt;[5 6 10 11]</span><br><span class="line">s5 := appent(s4,12)</span><br><span class="line">//s5---&gt;[5 6 10 11 12]</span><br><span class="line"></span><br><span class="line">//arr最终的值为[0 1 2 3 4 5 6 10],arr的长度并没有发生变化，而s4及s5是对被扩展的数组的一个view，我们拿不到扩展的数组，s3 appent过后但是他并没有超过arr长度，所以对底层arr相应索引位置的数据进行了修改</span><br></pre></td></tr></table></figure><blockquote><p>添加元素时如果超过cap的长度，系统会重新分配更大的底层数组作为新slice的view</p></blockquote><blockquote><p>如果原来的数组有用系统会保留，如果没用会被go的垃圾回收机制给回收掉</p></blockquote><blockquote><p>由于值传递的关系必须接受appent的返回值 s = append(s,val)</p></blockquote><h3 id="slice的其它操作"><a href="#slice的其它操作" class="headerlink" title="slice的其它操作"></a>slice的其它操作</h3><h4 id="slice的创建"><a href="#slice的创建" class="headerlink" title="slice的创建"></a>slice的创建</h4><p><strong>定义一个空的slice长度为0</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var s []int</span><br></pre></td></tr></table></figure><p><strong>定义指定元素内容的slice</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 := []int&#123;2,4,6,8&#125;</span><br></pre></td></tr></table></figure><p><strong>内建函数定义len为16的slice</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2 := make([]int,16)</span><br></pre></td></tr></table></figure><p><strong>内建函数定义len为10 cap为32 的slice</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s3 := make([]int,10,32)</span><br></pre></td></tr></table></figure><h4 id="slice的copy及元素remove操作"><a href="#slice的copy及元素remove操作" class="headerlink" title="slice的copy及元素remove操作"></a>slice的copy及元素remove操作</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 := []int&#123;2,4,6,8&#125;</span><br><span class="line">//s1---&gt;[2 4 6 8]</span><br><span class="line">s2 := make([]int,16)</span><br><span class="line">//s2---&gt;[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]</span><br><span class="line">copy(s2,s1)</span><br><span class="line">//s2---&gt;[2 4 6 8 0 0 0 0 0 0 0 0 0 0 0 0]</span><br></pre></td></tr></table></figure><p><strong>如果我们想要把s2中的元素8删掉怎么操作呢</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//s2---&gt;[2 4 6 8 0 0 0 0 0 0 0 0 0 0 0 0]</span><br><span class="line">s2 = append(s2[:3],s2[4:]...)//s2所在的参数列表是一个可变参，如果需要将s2索引4右面的所有元素都送个它需要加上...的语法</span><br><span class="line">//s2---&gt;[2 4 6 0 0 0 0 0 0 0 0 0 0 0 0]</span><br></pre></td></tr></table></figure><p><strong>去掉s2的首尾操作</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//s2---&gt;[2 4 6 0 0 0 0 0 0 0 0 0 0 0 0]</span><br><span class="line">//获取首元素的值，可以用于打印</span><br><span class="line">front := s2[0]</span><br><span class="line">//获取尾元素，可以用于打印</span><br><span class="line">tail := s2[len(s2)-1]</span><br><span class="line">//剔除首位操作</span><br><span class="line">s2 := s2[1:]</span><br><span class="line">s2 := s2[:len(s2)-1]</span><br><span class="line">//s2---&gt;[4 6 0 0 0 0 0 0 0 0 0 0 0]</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="Map的创建"><a href="#Map的创建" class="headerlink" title="Map的创建"></a>Map的创建</h3><blockquote><p>map[Key]Value 创建单层Key/Value类型的Map</p></blockquote><blockquote><p>map[Key1]map[Key2]Value 创建复合多层级Map</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mapDemo := map[string]string&#123;</span><br><span class="line">&quot;name&quot;:    &quot;anakin&quot;,</span><br><span class="line">&quot;course&quot;:  &quot;java&quot;,</span><br><span class="line">&quot;site&quot;:    &quot;imooc&quot;,</span><br><span class="line">&quot;quality&quot;: &quot;notbad&quot;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(mapDemo)</span><br></pre></td></tr></table></figure><p><strong>空map的创建</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//使用make</span><br><span class="line">m1 := make(map[string]int)</span><br><span class="line">//m1---&gt;map[] (m1 == empty)</span><br><span class="line">//或者使用</span><br><span class="line">var m2 map[string]int</span><br><span class="line">//m2---&gt;map[] (m2 == nil)</span><br><span class="line"></span><br><span class="line">//go语言中的nil及empty是可以参与运算的，跟其它语言有所区别，值是nil也可以很安全的使用</span><br></pre></td></tr></table></figure><h3 id="Map的迭代"><a href="#Map的迭代" class="headerlink" title="Map的迭代"></a>Map的迭代</h3><p><strong>使用range对map进行迭代</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func mapIterate() &#123;</span><br><span class="line">mapDemo := map[string]string&#123;</span><br><span class="line">&quot;name&quot;:    &quot;anakin&quot;,</span><br><span class="line">&quot;course&quot;:  &quot;java&quot;,</span><br><span class="line">&quot;site&quot;:    &quot;imooc&quot;,</span><br><span class="line">&quot;quality&quot;: &quot;notbad&quot;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(mapDemo)</span><br><span class="line">for k,v := range mapDemo&#123;</span><br><span class="line">fmt.Println(k,v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//map打印出来的值我们发现map中的元素是无序的</span><br></pre></td></tr></table></figure><h3 id="map获取指定元素"><a href="#map获取指定元素" class="headerlink" title="map获取指定元素"></a>map获取指定元素</h3><p><strong>通过key获取map中value的值</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func mapDemo() &#123;</span><br><span class="line">mapDemo := map[string]string&#123;</span><br><span class="line">&quot;name&quot;:    &quot;anakin&quot;,</span><br><span class="line">&quot;course&quot;:  &quot;java&quot;,</span><br><span class="line">&quot;site&quot;:    &quot;imooc&quot;,</span><br><span class="line">&quot;quality&quot;: &quot;notbad&quot;,</span><br><span class="line">&#125;</span><br><span class="line">courseName := mapDemo[&quot;course&quot;]</span><br><span class="line">fmt.Println(courseName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果map中没有这个key的话获取map的值不会报错，他是一个空串，Println他会打印一个空行</p></blockquote><h3 id="判断map中的某个元素是否存在"><a href="#判断map中的某个元素是否存在" class="headerlink" title="判断map中的某个元素是否存在"></a>判断map中的某个元素是否存在</h3><p><strong>判断元素在map中是否存在，存在则打印，不存在不打印</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func mapDemo() &#123;</span><br><span class="line">mapDemo := map[string]string&#123;</span><br><span class="line">&quot;name&quot;:    &quot;anakin&quot;,</span><br><span class="line">&quot;course&quot;:  &quot;java&quot;,</span><br><span class="line">&quot;site&quot;:    &quot;imooc&quot;,</span><br><span class="line">&quot;quality&quot;: &quot;notbad&quot;,</span><br><span class="line">&#125;</span><br><span class="line">if courseName, ok := mapDemo[&quot;course&quot;]; ok &#123;</span><br><span class="line">fmt.Println(courseName)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(&quot;key does not exist&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map删除指定元素"><a href="#map删除指定元素" class="headerlink" title="map删除指定元素"></a>map删除指定元素</h3><p><strong>删除map中的指定key</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func mapDemo() &#123;</span><br><span class="line">mapDemo := map[string]string&#123;</span><br><span class="line">&quot;name&quot;:    &quot;anakin&quot;,</span><br><span class="line">&quot;course&quot;:  &quot;java&quot;,</span><br><span class="line">&quot;site&quot;:    &quot;imooc&quot;,</span><br><span class="line">&quot;quality&quot;: &quot;notbad&quot;,</span><br><span class="line">&#125;</span><br><span class="line">delete(mapDemo,&quot;name&quot;)</span><br><span class="line">//删除key为name的元素，后面的key does not exist提示将会被打印</span><br><span class="line">if courseName, ok := mapDemo[&quot;name&quot;]; ok &#123;</span><br><span class="line">fmt.Println(courseName)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(&quot;key does not exist&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么样的数据类型才能作为map的key呢"><a href="#什么样的数据类型才能作为map的key呢" class="headerlink" title="什么样的数据类型才能作为map的key呢"></a>什么样的数据类型才能作为map的key呢</h3><blockquote><p>map使用哈希表，必须可以比较相等</p></blockquote><blockquote><p>除了slice，map，function的内建类型都可以作为key</p></blockquote><blockquote><p>Struct(自建)类型不包含上述字段也可以作为key</p></blockquote><blockquote><p>go在编译器会对上述条件进行检查</p></blockquote><h3 id="map实现leetCode算法3-无重复字符的最长子串"><a href="#map实现leetCode算法3-无重复字符的最长子串" class="headerlink" title="map实现leetCode算法3.无重复字符的最长子串"></a>map实现leetCode算法3.无重复字符的最长子串</h3><p><strong>英文版</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func lengthOfLongestSubstring(s string) int &#123;</span><br><span class="line">    //记录每个字母最后出现的位置</span><br><span class="line">    lastOccurred := make(map[byte]int)</span><br><span class="line">    start := 0</span><br><span class="line">    maxLenght := 0</span><br><span class="line">    for i,ch := range []byte(s) &#123;</span><br><span class="line">        //有可能不存在这个map获取出来的值是0,而0又是一个合法的下标，所以要判断这个key是否存在</span><br><span class="line">        if lastI,ok := lastOccurred[ch] ; ok &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">            start = lastOccurred[ch] +1</span><br><span class="line">        &#125;</span><br><span class="line">        if i - start +1 &gt; maxLenght &#123;</span><br><span class="line">            maxLenght = i - start + 1</span><br><span class="line">        &#125;</span><br><span class="line">        lastOccurred[ch] = i</span><br><span class="line">    &#125;</span><br><span class="line">    return maxLenght</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>国际版</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func lengthOfLongestSubstring(s string) int &#123;</span><br><span class="line">    //记录每个字母最后出现的位置</span><br><span class="line">    lastOccurred := make(map[rune]int)</span><br><span class="line">    start := 0</span><br><span class="line">    maxLenght := 0</span><br><span class="line">    for i,ch := range []rune(s) &#123;</span><br><span class="line">        //有可能不存在这个map获取出来的值是0,而0又是一个合法的下标，所以要判断这个key是否存在</span><br><span class="line">        if lastI,ok := lastOccurred[ch] ; ok &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">            start = lastOccurred[ch] +1</span><br><span class="line">        &#125;</span><br><span class="line">        if i - start +1 &gt; maxLenght &#123;</span><br><span class="line">            maxLenght = i - start + 1</span><br><span class="line">        &#125;</span><br><span class="line">        lastOccurred[ch] = i</span><br><span class="line">    &#125;</span><br><span class="line">    return maxLenght</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><blockquote><p>go语言仅支持封装，不支持继承和多态</p></blockquote><blockquote><p>go语言没有class，只有struct</p></blockquote><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//定义结构体</span><br><span class="line">type TreeNode struct &#123;</span><br><span class="line">value int</span><br><span class="line">left,right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//对结构体数据进行处理</span><br><span class="line">func main() &#123;</span><br><span class="line">node1 := TreeNode&#123;value: 3&#125;</span><br><span class="line">left := TreeNode&#123;value: 1&#125;</span><br><span class="line">right := TreeNode&#123;value: 2&#125;</span><br><span class="line">node1.left = &amp;left</span><br><span class="line">node1.right = &amp;right</span><br><span class="line">fmt.Println(node1)</span><br><span class="line">&#125;</span><br><span class="line">//打印结果</span><br><span class="line">&#123;3 0xc000004480 0xc0000044a0&#125;</span><br></pre></td></tr></table></figure><blockquote><p>go语言没有构造函数的说法,但是可以使用func实现自定义工厂构造函数</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func createNode(value int) *TreeNode &#123;</span><br><span class="line">//c**函数返回局部变量不可用，不过在go语言中是可以的</span><br><span class="line">//注意返回的是局部变量的地址</span><br><span class="line">return &amp;TreeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为结构体定义方法"><a href="#为结构体定义方法" class="headerlink" title="为结构体定义方法"></a>为结构体定义方法</h3><blockquote><p>结构体的方法有一个特点，就是它在函数名前面多了一个接收者</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//定义结构体方法</span><br><span class="line">func (node TreeNode) print() &#123;</span><br><span class="line">fmt.Print(node.value)</span><br><span class="line">&#125;</span><br><span class="line">//使用结构体方法</span><br><span class="line">func main() &#123;</span><br><span class="line">node := TreeNode&#123;value: 3&#125;</span><br><span class="line">node.print()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>go语言中所有方法参数的传递都是值传递，参数会被copy执行，执行过后传递的参数并没有被修改，如需修改需要使用指针</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">type TreeNode struct &#123;</span><br><span class="line">value int</span><br><span class="line">left,right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line">func (node TreeNode) print() &#123;</span><br><span class="line">fmt.Println(node.value)</span><br><span class="line">&#125;</span><br><span class="line">func (node TreeNode) setVal(value int)  &#123;</span><br><span class="line">node.value = value</span><br><span class="line">&#125;</span><br><span class="line">//解决值传递问题需要加*号以指针的方式即可修改传递过来的值</span><br><span class="line">func (node *TreeNode) setValue(value int)  &#123;</span><br><span class="line">node.value = value</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">node := TreeNode&#123;&#125;</span><br><span class="line">node.print()</span><br><span class="line">//打印值为0</span><br><span class="line">node.setVal(1)</span><br><span class="line">node.print()</span><br><span class="line">//打印值为0</span><br><span class="line">node.setValue(2)</span><br><span class="line">node.print()</span><br><span class="line">//打印值为2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的值接收者与指针接收者原则"><a href="#方法的值接收者与指针接收者原则" class="headerlink" title="方法的值接收者与指针接收者原则"></a>方法的值接收者与指针接收者原则</h3><blockquote><p>要改变内容必须使用指针接收者</p></blockquote><blockquote><p>结构过大也要考虑使用指针接收者</p></blockquote><blockquote><p>一致性：如果有指针接收者，最好都是用指针接收者</p></blockquote><blockquote><p><strong>值接收者</strong>是go语言特有</p></blockquote><blockquote><p>值/指针接收者既可以接收值也可以接收指针</p></blockquote><h3 id="遍历树"><a href="#遍历树" class="headerlink" title="遍历树"></a>遍历树</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">type TreeNode struct &#123;</span><br><span class="line">value int</span><br><span class="line">left,right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line">func (node TreeNode) print() &#123;</span><br><span class="line">fmt.Print(node.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (node *TreeNode) traverse() &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">node.left.traverse()</span><br><span class="line">node.print()</span><br><span class="line">node.right.traverse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">root := TreeNode&#123;value:3&#125;</span><br><span class="line">root.left = &amp;TreeNode&#123;&#125;</span><br><span class="line">root.right = &amp;TreeNode&#123;value: 5&#125;</span><br><span class="line">root.left.right = &amp;TreeNode&#123;value: 2&#125;</span><br><span class="line">root.right.left = &amp;TreeNode&#123;value: 4&#125;</span><br><span class="line">root.traverse()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果 0 2 3 4 5</p></blockquote><p><strong>遍历树图解</strong></p><p><img src="/images/img_10.png" alt="遍历树"></p><blockquote><p>traverse()函数先遍历左边再遍历自己再遍历右边往复递归</p></blockquote><h2 id="封装和包"><a href="#封装和包" class="headerlink" title="封装和包"></a>封装和包</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p><strong>定义完方法我们一般要进行封装</strong></p><blockquote><p>go语言名字一般使用CamelCase</p></blockquote><blockquote><p>方法结构常量等定义首字母大写代表：public(针对包)，</p></blockquote><blockquote><p>方法结构常量等定义首字母小写代表：private(针对包)，</p></blockquote><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><blockquote><p>每个目录只能有一个包，包名不一定和目录名一样</p></blockquote><blockquote><p>main包包含和执行入口</p></blockquote><blockquote><p>一个目录下面main函数只能有一个main包,否则我们需要给目录起一个其它的名字</p></blockquote><blockquote><p>为结构定义方法必须放在同一个包内，但是可以是不同的文件</p></blockquote><h3 id="扩展已有类型"><a href="#扩展已有类型" class="headerlink" title="扩展已有类型"></a>扩展已有类型</h3><blockquote><p>扩展已有类型可以<u><strong>定义别名</strong></u>或者<u><strong>使用组合</strong></u></p></blockquote><p><strong>包装TreeNode为MyTreeNode实现新的遍历方式</strong>这里使用的方式是<u><strong>组合</strong></u></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/tree&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type MyTreeNode struct &#123;</span><br><span class="line">node *tree.Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (myNode *MyTreeNode) postOrder() &#123;</span><br><span class="line">if myNode == nil || myNode.node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">left := MyTreeNode&#123;myNode.node.Left&#125;</span><br><span class="line">left.postOrder()</span><br><span class="line">right := MyTreeNode&#123;myNode.node.Right&#125;</span><br><span class="line">right.postOrder()</span><br><span class="line">myNode.node.Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">root := tree.Node&#123;Value: 3&#125;</span><br><span class="line">root.Left = &amp;tree.Node&#123;&#125;</span><br><span class="line">root.Right = &amp;tree.Node&#123;Value: 5&#125;</span><br><span class="line">root.Left.Right = &amp;tree.Node&#123;Value: 2&#125;</span><br><span class="line">root.Right.Left = &amp;tree.Node&#123;Value: 4&#125;</span><br><span class="line">root.Traverse()</span><br><span class="line">fmt.Println()</span><br><span class="line">node := MyTreeNode&#123;&amp;root&#125;</span><br><span class="line">node.postOrder()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>树还是之前的树，就不图解了，遍历结果为 2 0 4 5 3</p></blockquote><p><strong>定义slice的别名实现一个先进先出的队列</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Queue.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package queue</span><br><span class="line"></span><br><span class="line">//定义一个队列，xian，它是一个int类型的slice</span><br><span class="line">type Queue []int</span><br><span class="line"></span><br><span class="line">//推进队列</span><br><span class="line">func (q *Queue) Push(v int) &#123;</span><br><span class="line">*q = append(*q,v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//弹出队列</span><br><span class="line">func (q *Queue) Pop() int &#123;</span><br><span class="line">head := (*q)[0]</span><br><span class="line">*q = (*q)[1:]</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//队列元素是否为空</span><br><span class="line">func (q *Queue) IsEmpty() bool &#123;</span><br><span class="line">return len(*q) == 0</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/queue&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">q := queue.Queue&#123;1&#125;</span><br><span class="line">q.Push(2)</span><br><span class="line">q.Push(3)</span><br><span class="line">fmt.Println(q.Pop())</span><br><span class="line">fmt.Println(q.Pop())</span><br><span class="line">fmt.Println(q.IsEmpty())</span><br><span class="line">fmt.Println(q.Pop())</span><br><span class="line">fmt.Println(q.IsEmpty())</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br></pre></td></tr></table></figure><p><strong>打印结果</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">false</span><br><span class="line">3</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="安装第三方包goimports"><a href="#安装第三方包goimports" class="headerlink" title="安装第三方包goimports"></a>安装第三方包goimports</h3><blockquote><p>移动到一下目录%GOPATH%/src/golang.org/x从github上download以下包</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:golang/tools.git</span><br></pre></td></tr></table></figure><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:golang/mod.git</span><br></pre></td></tr></table></figure><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:golang/xerrors.git</span><br></pre></td></tr></table></figure><p><strong>执行命令安装goimports</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//请将%GOPATH%替换为绝对路径后执行命令</span><br><span class="line">go install %GOPATH%/src/golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure><p><strong>尝试使用第三方库</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;golang.org/x/tools/container/intsets&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func testSparse() &#123;</span><br><span class="line">sparse := intsets.Sparse&#123;&#125;</span><br><span class="line">sparse.Insert(1)</span><br><span class="line">sparse.Insert(2)</span><br><span class="line">sparse.Insert(3)</span><br><span class="line">sparse.Insert(4)</span><br><span class="line">fmt.Println(sparse.Has(5))</span><br><span class="line">fmt.Println(sparse.Has(4))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">testSparse()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GOPATH目录结构"><a href="#GOPATH目录结构" class="headerlink" title="GOPATH目录结构"></a>GOPATH目录结构</h3><blockquote><p><strong>go build</strong>进行编译</p></blockquote><blockquote><p><strong>go install</strong>产生pkg文件和可执行文件</p></blockquote><blockquote><p><strong>go run</strong>直接编译运行</p></blockquote><blockquote><p>src</p><blockquote><p>git repository1<br>git repository2</p></blockquote></blockquote><blockquote><p>pkg</p><blockquote><p>git repository1<br>git repository2</p></blockquote></blockquote><blockquote><p>bin</p><blockquote><p>可执行文件1，2，3</p></blockquote></blockquote><h1 id="面向接口"><a href="#面向接口" class="headerlink" title="面向接口"></a>面向接口</h1><blockquote><p>go语言的接口是<strong>使用者定义的</strong></p></blockquote><blockquote><p>接口实现是隐式的，无需注明实现了哪个接口，只需拥有接口同样的方法</p></blockquote><blockquote><p>接口变量自带指针</p></blockquote><blockquote><p>接口变量同样采用值传递，几乎不需要使用接口的指针</p></blockquote><blockquote><p>指针接收者实现只能以指针的方式使用；值接收者两者都可以</p></blockquote><blockquote><p>接口变量强制转换用变量接收后后面加’,ok’,可以使用ok判断是否该类型，学名叫<strong>Type assertion</strong></p></blockquote><blockquote><p>除了使用<strong>Type assertion</strong>方式判断类型，也可以使用<strong>switch case</strong>语句的方式来判断类型并执行相关逻辑</p></blockquote><blockquote><p>interface{} 可以表示任何类型</p></blockquote><h2 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">mockretriever.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package mock</span><br><span class="line"></span><br><span class="line">type Retriever struct &#123;</span><br><span class="line">Contents string</span><br><span class="line">&#125;</span><br><span class="line">//定义接口实现，无需指明实现了哪个接口，方法只需要实现接口中的方法</span><br><span class="line">func (r Retriever) Get(url string) string &#123;</span><br><span class="line">return r.Contents</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">realretriever.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package rel</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/http/httputil&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Retriever struct &#123;</span><br><span class="line">UserAgent string</span><br><span class="line">TimeOut time.Duration</span><br><span class="line">&#125;</span><br><span class="line">//定义接口实现，无需指明实现了哪个接口，方法只需要实现接口中的方法</span><br><span class="line">func (r Retriever) Get(url string) string &#123;</span><br><span class="line">resp, err := http.Get(url)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">result, err := httputil.DumpResponse(resp, true)</span><br><span class="line">resp.Body.Close()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">return string(result)</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/retriever/mock&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/retriever/rel&quot;</span><br><span class="line">)</span><br><span class="line">//定义接口</span><br><span class="line">type Retriever interface &#123;</span><br><span class="line">Get(url string) string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func download(r Retriever) string &#123;</span><br><span class="line">return r.Get(&quot;http://www.baidu.com&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">//接口变量(里面有是闲着类型/实现者的值或实现者的指针(它指向了一个实现者))</span><br><span class="line">//不要使用接口变量的地址，因为接口变量本身可以包含指针，内部指向实现者即可</span><br><span class="line">var r Retriever</span><br><span class="line">//假的retriever</span><br><span class="line">r = mock.Retriever&#123;Contents: &quot;this is a fack imooc.com&quot;&#125;</span><br><span class="line">fmt.Println(download(r))</span><br><span class="line">//真实的retriever</span><br><span class="line">r = rel.Retriever&#123;&#125;</span><br><span class="line">fmt.Println(download(r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口组合"><a href="#接口组合" class="headerlink" title="接口组合"></a>接口组合</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">mockretriever.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package mock</span><br><span class="line"></span><br><span class="line">type (</span><br><span class="line">Retriever struct &#123;</span><br><span class="line">Contents string</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func (r *Retriever) Post(url string, form map[string]string) string &#123;</span><br><span class="line">r.Contents = form[&quot;contents&quot;]</span><br><span class="line">return &quot;ok&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (r *Retriever) Get(url string) string &#123;</span><br><span class="line">return r.Contents</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">main.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/retriever/mock&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Retriever interface &#123;</span><br><span class="line">Get(url string) string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Poster interface &#123;</span><br><span class="line">Post(url string,form map[string]string) string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func download(r Retriever) string &#123;</span><br><span class="line">return r.Get(&quot;http://www.baidu.com&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func post(poster Poster) &#123;</span><br><span class="line">poster.Post(&quot;http:www.baidu.com&quot;, map[string]string&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;course&quot;:&quot;java&quot;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type RetrieverPoster interface &#123;</span><br><span class="line">Retriever</span><br><span class="line">Poster</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const url = &quot;http://www.baidu.com&quot;</span><br><span class="line">func session(s RetrieverPoster) string&#123;</span><br><span class="line">s.Post(url, map[string]string&#123;&quot;contents&quot;:&quot;anather faked imooc.com&quot;&#125;)</span><br><span class="line">return s.Get(url)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var r RetrieverPoster</span><br><span class="line">r = &amp;mock.Retriever&#123;Contents: &quot;this is a fack imooc.com&quot;&#125;</span><br><span class="line">//type assertion</span><br><span class="line">if mockRetriever,ok := r.(*mock.Retriever); ok&#123;</span><br><span class="line">fmt.Println(mockRetriever.Contents)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(&quot;not a mock retriever&quot;)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(session(r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用标准接口"><a href="#常用标准接口" class="headerlink" title="常用标准接口"></a>常用标准接口</h2><h3 id="print-go-—-gt-fmt-Stringer-String-string"><a href="#print-go-—-gt-fmt-Stringer-String-string" class="headerlink" title="print.go —&gt; fmt.Stringer#String() (string)"></a>print.go —&gt; fmt.Stringer#String() (string)</h3><blockquote><p>该接口相当于其它语言中的toString</p></blockquote><h3 id="io-go-—-gt-io-Reader-Read-p-byte-n-int-err-error"><a href="#io-go-—-gt-io-Reader-Read-p-byte-n-int-err-error" class="headerlink" title="io.go —&gt; io.Reader#Read(p []byte) (n int, err error)"></a>io.go —&gt; io.Reader#Read(p []byte) (n int, err error)</h3><blockquote><p>文件、网络、byte、slice、string等等都会用Reader#Read</p></blockquote><h3 id="io-go-—-gt-io-Writer-Write-p-byte-n-int-err-error"><a href="#io-go-—-gt-io-Writer-Write-p-byte-n-int-err-error" class="headerlink" title="io.go —&gt; io.Writer#Write(p []byte) (n int, err error)"></a>io.go —&gt; io.Writer#Write(p []byte) (n int, err error)</h3><blockquote><p>文件、网络、byte、slice、string等等都会用Reader#Write</p></blockquote><h3 id="使用io-go-—-gt-io-Reader-Read-p-byte-代替file示例"><a href="#使用io-go-—-gt-io-Reader-Read-p-byte-代替file示例" class="headerlink" title="使用io.go —&gt; io.Reader#Read(p []byte)代替file示例"></a>使用io.go —&gt; io.Reader#Read(p []byte)代替file示例</h3><blockquote><p>这里不仅可以使用文件还可以使用其它字符串等数据类型</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">func printFile(filename string) &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">printFileContents(file)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func printFileContents(reader io.Reader) &#123;</span><br><span class="line">scanner := bufio.NewScanner(reader)</span><br><span class="line">for scanner.Scan() &#123;</span><br><span class="line">fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">printFile(&quot;basic/loop/abc.txt&quot;)</span><br><span class="line">s := `abc&quot;d&quot;</span><br><span class="line">kkkk</span><br><span class="line">123</span><br><span class="line">p`</span><br><span class="line">printFileContents(strings.NewReader(s))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><blockquote><p>函数是一等公民：参数、变量、返回值等都可以是函数,可以给函数实现接口</p></blockquote><blockquote><p>高阶函数：函数的参数还是一个函数</p></blockquote><blockquote><p>函数—&gt;闭包</p></blockquote><blockquote><p>正统函数式编程</p><blockquote><p>不可变性：不能有状态，只有常量和函数<br>正统函数只能有一个参数<br>go语言式通用语言，不会再正统函数式做文章</p></blockquote></blockquote><h2 id="使用函数式编程实现一个累加器-闭包"><a href="#使用函数式编程实现一个累加器-闭包" class="headerlink" title="使用函数式编程实现一个累加器(闭包)"></a>使用函数式编程实现一个累加器(闭包)</h2><p><strong>代码</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">//定义函数，返回值是一个函数</span><br><span class="line">func adder() func(int) int &#123;</span><br><span class="line">sum := 0</span><br><span class="line">//这里的v既是一个参数又是函数体的一个局部变量</span><br><span class="line">return  func(v int) int &#123;</span><br><span class="line">sum += v</span><br><span class="line">//这里的sum是这个函数体外面定义的，他是一个自有变量</span><br><span class="line">return sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">//这里返回的是一个函数实例，每调用一次函数实例将对实例的返回值进行累加</span><br><span class="line">funcAdder := adder()</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">fmt.Printf(&quot;0+...+%d = %d\n&quot;,i,funcAdder(i))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0+...+0 = 0</span><br><span class="line">0+...+1 = 1</span><br><span class="line">0+...+2 = 3</span><br><span class="line">0+...+3 = 6</span><br><span class="line">0+...+4 = 10</span><br><span class="line">0+...+5 = 15</span><br><span class="line">0+...+6 = 21</span><br><span class="line">0+...+7 = 28</span><br><span class="line">0+...+8 = 36</span><br><span class="line">0+...+9 = 45</span><br></pre></td></tr></table></figure><p><img src="/images/img_11.png" alt="闭包"></p><blockquote><p><strong>自由变量</strong>不断地找与<strong>局部变量</strong>的联系然后整体返回一个<strong>闭包</strong></p></blockquote><h2 id="以正统函数方式实现累加器"><a href="#以正统函数方式实现累加器" class="headerlink" title="以正统函数方式实现累加器"></a>以正统函数方式实现累加器</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">type innerAdder func(int) (int, innerAdder)</span><br><span class="line"></span><br><span class="line">func adder(base int) innerAdder &#123;</span><br><span class="line">return func(v int) (int, innerAdder) &#123;</span><br><span class="line">return base + v, adder(base + v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">innerAdder := adder(0)</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">var s int</span><br><span class="line">s, innerAdder = innerAdder(i)</span><br><span class="line">fmt.Printf(&quot;0+...+%d = %d\n&quot;,i,s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java中的闭包实现累加器"><a href="#java中的闭包实现累加器" class="headerlink" title="java中的闭包实现累加器"></a>java中的闭包实现累加器</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    private static Function&lt;Integer, Integer&gt; adder() &#123;</span><br><span class="line">        final Holder&lt;Integer&gt; sum = new Holder&lt;&gt;(0);</span><br><span class="line">        return (Integer value) -&gt; &#123;</span><br><span class="line">            sum.value += value;</span><br><span class="line">            return sum.value;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Function&lt;Integer, Integer&gt; adder = adder();</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            System.out.println(adder.apply(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>java8后：使用Function接口和lambda表达式来创建函数对象</p></blockquote><blockquote><p>匿名类或者lambda表达式均支持闭包</p></blockquote><h2 id="斐波那契生成器"><a href="#斐波那契生成器" class="headerlink" title="斐波那契生成器"></a>斐波那契生成器</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">//斐波那契生成器</span><br><span class="line">func fibonacci() func() int &#123;</span><br><span class="line">a,b := 0,1</span><br><span class="line">return func() int &#123;</span><br><span class="line">a,b = b,a+b</span><br><span class="line">return a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">generate := fibonacci()</span><br><span class="line">fmt.Println(generate())</span><br><span class="line">fmt.Println(generate())</span><br><span class="line">fmt.Println(generate())</span><br><span class="line">fmt.Println(generate())</span><br><span class="line">fmt.Println(generate())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现io-Reader遍历斐波那契生成器中的数据"><a href="#实现io-Reader遍历斐波那契生成器中的数据" class="headerlink" title="实现io.Reader遍历斐波那契生成器中的数据"></a>实现io.Reader遍历斐波那契生成器中的数据</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bufio&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line">//定义函数类型</span><br><span class="line">type intGen func() int</span><br><span class="line">//为函数类型实现接口</span><br><span class="line">func (g intGen) Read(p []byte) (n int, err error) &#123;</span><br><span class="line">next := g()</span><br><span class="line">//斐波那契生成器永远读不完做一个限制</span><br><span class="line">if next &gt; 10000 &#123;</span><br><span class="line">return 0,io.EOF</span><br><span class="line">&#125;</span><br><span class="line">s := fmt.Sprintf(&quot;%d\n&quot;, next)</span><br><span class="line">//TODO: 如果p太小则不正确</span><br><span class="line">return strings.NewReader(s).Read(p)</span><br><span class="line">&#125;</span><br><span class="line">//斐波那契生成器(替换定义类型，它实现了io.Reader接口)</span><br><span class="line">func fibonacci() intGen &#123;</span><br><span class="line">a,b := 0,1</span><br><span class="line">return func() int &#123;</span><br><span class="line">a,b = b,a+b</span><br><span class="line">return a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//传递reader实现</span><br><span class="line">func printFileContents(reader io.Reader) &#123;</span><br><span class="line">scanner := bufio.NewScanner(reader)</span><br><span class="line">//遍历生成器中的数据</span><br><span class="line">for scanner.Scan() &#123;</span><br><span class="line">fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//主函数</span><br><span class="line">func main() &#123;</span><br><span class="line">//实现reader的斐波那契生成器</span><br><span class="line">generate := fibonacci()</span><br><span class="line">//读取斐波那契生成器的数据</span><br><span class="line">printFileContents(generate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历二叉树传递遍历过程中的操作"><a href="#遍历二叉树传递遍历过程中的操作" class="headerlink" title="遍历二叉树传递遍历过程中的操作"></a>遍历二叉树传递遍历过程中的操作</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">node.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package tree</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func (node Node) setVal(value int)  &#123;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line">func (node *Node) setValue(value int)  &#123;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line">//定义类型</span><br><span class="line">type Node struct &#123;</span><br><span class="line">Value      int</span><br><span class="line">Left,Right *Node</span><br><span class="line">&#125;</span><br><span class="line">//定义print</span><br><span class="line">func (node Node) Print() &#123;</span><br><span class="line">fmt.Print(node.Value,&quot; &quot;)</span><br><span class="line">&#125;</span><br><span class="line">//遍历树</span><br><span class="line">func (node *Node) Traverse() &#123;</span><br><span class="line">node.TraverseFunc(func(n *Node) &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">n.Print()</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">//遍历树同时做什么操作由传递的函数决定</span><br><span class="line">func (node *Node) TraverseFunc(f func(node *Node)) &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">node.Left.TraverseFunc(f)</span><br><span class="line">f(node)</span><br><span class="line">node.Right.TraverseFunc(f)</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">main.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/tree&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">root := tree.Node&#123;Value: 3&#125;</span><br><span class="line">root.Left = &amp;tree.Node&#123;&#125;</span><br><span class="line">root.Right = &amp;tree.Node&#123;Value: 5&#125;</span><br><span class="line">root.Left.Right = &amp;tree.Node&#123;Value: 2&#125;</span><br><span class="line">root.Right.Left = &amp;tree.Node&#123;Value: 4&#125;</span><br><span class="line">root.Traverse()</span><br><span class="line">count := 0</span><br><span class="line">root.TraverseFunc(func(node *tree.Node) &#123;</span><br><span class="line">count++</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(&quot;Noce count&quot;,count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="错误处理与资源管理"><a href="#错误处理与资源管理" class="headerlink" title="错误处理与资源管理"></a>错误处理与资源管理</h1><h2 id="defer调用"><a href="#defer调用" class="headerlink" title="defer调用"></a>defer调用</h2><blockquote><p>defer确保在函数结束时发生调用</p></blockquote><blockquote><p>参数在defer语句时计算(for loop 会栈执行)</p></blockquote><blockquote><p>defer调用里面时栈存储，先进后出</p></blockquote><h3 id="defer调用使用斐波那契生成器写入文件关闭资源操作"><a href="#defer调用使用斐波那契生成器写入文件关闭资源操作" class="headerlink" title="defer调用使用斐波那契生成器写入文件关闭资源操作"></a>defer调用使用斐波那契生成器写入文件关闭资源操作</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">fib.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package fib</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type fibIntGen func() int</span><br><span class="line"></span><br><span class="line">//为函数类型实现接口</span><br><span class="line">func (g fibIntGen) Read(p []byte) (n int, err error) &#123;</span><br><span class="line">next := g()</span><br><span class="line">//斐波那契生成器永远读不完做一个限制</span><br><span class="line">if next &gt; 10000 &#123;</span><br><span class="line">return 0, io.EOF</span><br><span class="line">&#125;</span><br><span class="line">s := fmt.Sprintf(&quot;%d\n&quot;, next)</span><br><span class="line">return strings.NewReader(s).Read(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Fibonacci() fibIntGen &#123;</span><br><span class="line">a, b := 0, 1</span><br><span class="line">return func() int &#123;</span><br><span class="line">a, b = b, a+b</span><br><span class="line">return a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bufio&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/functional/fibonacci/fib&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func writeFile(filename string) &#123;</span><br><span class="line">file, err := os.Create(filename)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">//关闭文件资源</span><br><span class="line">defer file.Close()</span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line">//将数据写入文件</span><br><span class="line">defer writer.Flush()</span><br><span class="line">fibonacci := fib.Fibonacci()</span><br><span class="line">for i := 0; i &lt; 20; i++ &#123;</span><br><span class="line">fmt.Fprintln(writer,fibonacci())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">writeFile(&quot;fib.txt&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于defer调用是栈类型，writer.Flush()会比file.Close()先执行</p></blockquote><blockquote><p>defer在写代码的时候就想到创建file就要关闭，创建writer就要想到flush</p></blockquote><h3 id="何时使用defer调用"><a href="#何时使用defer调用" class="headerlink" title="何时使用defer调用"></a>何时使用defer调用</h3><h4 id="Open-Close"><a href="#Open-Close" class="headerlink" title="Open/Close"></a>Open/Close</h4><h4 id="Lock-Unlock"><a href="#Lock-Unlock" class="headerlink" title="Lock/Unlock"></a>Lock/Unlock</h4><h4 id="PrintHeader-PrintFooter"><a href="#PrintHeader-PrintFooter" class="headerlink" title="PrintHeader/PrintFooter"></a>PrintHeader/PrintFooter</h4><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bufio&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/functional/fibonacci/fib&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func writeFile(filename string) &#123;</span><br><span class="line">// If there is an error, it will be of type *PathError.</span><br><span class="line">file, err := os.OpenFile(filename, os.O_EXCL|os.O_CREATE, 0666)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">//如果是*os.PathError，打印指定信息</span><br><span class="line">if pathError,ok := err.(*os.PathError); ok &#123;</span><br><span class="line">fmt.Println(pathError.Op,pathError.Path,pathError.Err)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//否则打印正常错误信息</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">defer file.Close()</span><br><span class="line"></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line">defer writer.Flush()</span><br><span class="line"></span><br><span class="line">fibonacci := fib.Fibonacci()</span><br><span class="line">for i := 0; i &lt; 20; i++ &#123;</span><br><span class="line">fmt.Fprintln(writer,fibonacci())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">writeFile(&quot;fib.txt&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一错误处理"><a href="#统一错误处理" class="headerlink" title="统一错误处理"></a>统一错误处理</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">handler.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package filelisting</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//包装为http.HandleFunc(pattern string, handler func(ResponseWriter, *Request))的第二个参数</span><br><span class="line">func HandleFileList(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">path := request.URL.Path[len(&quot;/list/&quot;):]</span><br><span class="line">file, err := os.Open(path)</span><br><span class="line">//错误文件路径会控制台会报错，我们需要对错误进行统一处理</span><br><span class="line">//panic serving [::1]:55751: open fib.txt1: The system cannot find the file specified.</span><br><span class="line">/*if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;*/</span><br><span class="line">//内部错误展示给用户不太好，需要进行包装</span><br><span class="line">/*if err != nil &#123;</span><br><span class="line">http.Error(writer,</span><br><span class="line">err.Error(),</span><br><span class="line">http.StatusInternalServerError)</span><br><span class="line">return</span><br><span class="line">&#125;*/</span><br><span class="line">//错误直接返回使用通用处理方法</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">defer file.Close()</span><br><span class="line">content, err := ioutil.ReadAll(file)</span><br><span class="line">if  err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">writer.Write(content)</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">web.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/errhanding/filelistingserver/filelisting&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//定义函数类型对函数进行包装</span><br><span class="line">type appHandler func(writer http.ResponseWriter, request *http.Request) error</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">统一错误处理方法</span><br><span class="line">1.http.HandleFun函数的第二个参数是一个func(ResponseWriter, *Request)</span><br><span class="line">2.使用errWrapper方法对其进行包装返回一个func(ResponseWriter, *Request)</span><br><span class="line">3.handler(writer,request)执行过程中如果报错就会返回err，然后对err进行处理</span><br><span class="line">*/</span><br><span class="line">func errWrapper(handler appHandler) func(http.ResponseWriter, *http.Request) &#123;</span><br><span class="line">//包装一个函数，返回一个函数，在返回一个无返回值的函数中进行处理</span><br><span class="line">return func(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">//这个handler实质就是filelisting.HandleFileList</span><br><span class="line">err := handler(writer, request)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">//控制台打印错误信息</span><br><span class="line">log.Warn(&quot;Error handling request: %s&quot;,err.Error())</span><br><span class="line">//赋值默认值</span><br><span class="line">code := http.StatusOK</span><br><span class="line">switch &#123;</span><br><span class="line">//文件不存在code</span><br><span class="line">case os.IsNotExist(err):</span><br><span class="line">code = http.StatusNotFound</span><br><span class="line">//权限不够禁止访问</span><br><span class="line">case os.IsPermission(err):</span><br><span class="line">code = http.StatusForbidden</span><br><span class="line">//默认系统内部异常code</span><br><span class="line">default:</span><br><span class="line">code = http.StatusInternalServerError</span><br><span class="line">&#125;</span><br><span class="line">//将错误消息响应给客户端</span><br><span class="line">http.Error(writer, http.StatusText(code), code)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">http.HandleFunc(&quot;/list/&quot;, errWrapper(filelisting.HandleFileList))</span><br><span class="line"></span><br><span class="line">err := http.ListenAndServe(&quot;:8888&quot;, nil)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="panic与recover"><a href="#panic与recover" class="headerlink" title="panic与recover"></a>panic与recover</h2><h3 id="panic-恐慌"><a href="#panic-恐慌" class="headerlink" title="panic(恐慌)"></a>panic(恐慌)</h3><p><img src="/images/img_12.png" alt="看到panic想到这幅图(重)"></p><blockquote><p>panic是一个很重的词，尽量少用</p></blockquote><blockquote><p>停止当前函数执行(跟其它语言的throw Exception有点像)</p></blockquote><blockquote><p>一致向上返回，执行每一层的defer调用</p></blockquote><blockquote><p>如果没有遇见recover，程序退出</p></blockquote><h3 id="recover-恢复"><a href="#recover-恢复" class="headerlink" title="recover(恢复)"></a>recover(恢复)</h3><blockquote><p>仅在defer调用中使用</p></blockquote><blockquote><p>在defer调用recover里面可以获取panic的值进行处理</p></blockquote><blockquote><p>如果在defer调用中无法处理panic的值，可以重新panic</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">tryRecover()</span><br><span class="line">fmt.Println(&quot;test&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func tryRecover() &#123;</span><br><span class="line">//匿名函数</span><br><span class="line">defer func() &#123;</span><br><span class="line">//defer调用遇见recover</span><br><span class="line">r := recover()</span><br><span class="line">//如果是一个错误对错误进行处理</span><br><span class="line">if err, ok := r.(error); ok &#123;</span><br><span class="line">fmt.Println(&quot;Error occurred:&quot;, err)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//否则重新panic</span><br><span class="line">//panic(r)</span><br><span class="line">panic(fmt.Sprintf(&quot;I don&apos;t know what to do: %v&quot;,err))</span><br><span class="line">&#125;</span><br><span class="line">&#125;() //大括号是匿名函数的函数体，我们需要匿名函数被调用在函数体后面需要加上小括号</span><br><span class="line">//recover这个错误我们在defer中调用</span><br><span class="line">//panic(errors.New(&quot;this is an error&quot;))</span><br><span class="line">//b := 0</span><br><span class="line">//a := 5 / b</span><br><span class="line">//fmt.Println(a)</span><br><span class="line">panic(123)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对统一错误处理进行改进 使用dever调用recover</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">//http.HandleFunc调用到server.go文件中的func (c *conn) serve(ctx context.Context)方法走了defer调用recover</span><br><span class="line">defer func() &#123;</span><br><span class="line">if err := recover(); err != nil &amp;&amp; err != ErrAbortHandler &#123;</span><br><span class="line">const size = 64 &lt;&lt; 10</span><br><span class="line">buf := make([]byte, size)</span><br><span class="line">buf = buf[:runtime.Stack(buf, false)]</span><br><span class="line">c.server.logf(&quot;http: panic serving %v: %v\n%s&quot;, c.remoteAddr, err, buf)</span><br><span class="line">&#125;</span><br><span class="line">if !c.hijacked() &#123;</span><br><span class="line">c.close()</span><br><span class="line">c.setState(c.rwc, StateClosed)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">web.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">//我们手动处理更友好，处理未知错误，友好相应给客户端</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/errhanding/filelistingserver/filelisting&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//定义函数类型对函数进行包装</span><br><span class="line">type appHandler func(writer http.ResponseWriter, request *http.Request) error</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">统一错误处理方法</span><br><span class="line">1.http.HandleFun函数的第二个参数是一个func(ResponseWriter, *Request)</span><br><span class="line">2.使用errWrapper方法对其进行包装返回一个func(ResponseWriter, *Request)</span><br><span class="line">3.handler(writer,request)执行过程中如果报错就会返回err，然后对err进行处理</span><br><span class="line">*/</span><br><span class="line">func errWrapper(handler appHandler) func(http.ResponseWriter, *http.Request) &#123;</span><br><span class="line">//包装一个函数，返回一个函数，在返回一个无返回值的函数中进行处理</span><br><span class="line">return func(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">//defer对未知错误进行处理！！！！！！！！！！！！！！</span><br><span class="line">defer func() &#123;</span><br><span class="line">if r := recover(); r != nil &#123;</span><br><span class="line">log.Printf(&quot;Panic: %v&quot;, r)</span><br><span class="line">http.Error(writer, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">//这个handler实质就是filelisting.HandleFileList</span><br><span class="line">err := handler(writer, request)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">//控制台打印错误信息</span><br><span class="line">log.Printf(&quot;Error occurred handling request: %s&quot;, err.Error())</span><br><span class="line">//赋值默认值</span><br><span class="line">code := http.StatusOK</span><br><span class="line">switch &#123;</span><br><span class="line">//文件不存在code</span><br><span class="line">case os.IsNotExist(err):</span><br><span class="line">code = http.StatusNotFound</span><br><span class="line">//权限不够禁止访问</span><br><span class="line">case os.IsPermission(err):</span><br><span class="line">code = http.StatusForbidden</span><br><span class="line">//默认系统内部异常code</span><br><span class="line">default:</span><br><span class="line">code = http.StatusInternalServerError</span><br><span class="line">&#125;</span><br><span class="line">//将错误消息响应给客户端</span><br><span class="line">http.Error(writer, http.StatusText(code), code)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">http.HandleFunc(&quot;/&quot;, errWrapper(filelisting.HandleFileList))</span><br><span class="line"></span><br><span class="line">err := http.ListenAndServe(&quot;:8888&quot;, nil)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义用户错误处理未知错误给前端友好提示(终极版)</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">handler.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package filelisting</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const prefix = &quot;/list/&quot;</span><br><span class="line"></span><br><span class="line">type userError string</span><br><span class="line">//error接口有一个Error方法相当于实现了error接口</span><br><span class="line">func (e userError) Error() string &#123;</span><br><span class="line">return e.Message()</span><br><span class="line">&#125;</span><br><span class="line">//userError包装了一个Message方法，这两个方法相当于实现了userError接口及error接口</span><br><span class="line">func (e userError) Message() string &#123;</span><br><span class="line">return string(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//包装为http.HandleFunc(pattern string, handler func(ResponseWriter, *Request))的第二个参数</span><br><span class="line">func HandleFileList(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">if strings.Index(request.URL.Path, prefix) != 0 &#123;</span><br><span class="line">//return errors.New(&quot;path mast start with :&quot; + prefix)</span><br><span class="line">return userError(&quot;path must start with: &quot;+prefix)</span><br><span class="line">&#125;</span><br><span class="line">path := request.URL.Path[len(prefix):]</span><br><span class="line">file, err := os.Open(path)</span><br><span class="line">//错误文件路径会控制台会报错，我们需要对错误进行统一处理</span><br><span class="line">//panic serving [::1]:55751: open fib.txt1: The system cannot find the file specified.</span><br><span class="line">/*if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;*/</span><br><span class="line">//内部错误展示给用户不太好，需要进行包装</span><br><span class="line">/*if err != nil &#123;</span><br><span class="line">http.Error(writer,</span><br><span class="line">err.Error(),</span><br><span class="line">http.StatusInternalServerError)</span><br><span class="line">return</span><br><span class="line">&#125;*/</span><br><span class="line">//错误直接返回使用通用处理方法</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">defer file.Close()</span><br><span class="line">content, err := ioutil.ReadAll(file)</span><br><span class="line">if  err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">writer.Write(content)</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">web.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/errhanding/filelistingserver/filelisting&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//定义函数类型对函数进行包装</span><br><span class="line">type appHandler func(writer http.ResponseWriter, request *http.Request) error</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">统一错误处理方法</span><br><span class="line">1.http.HandleFun函数的第二个参数是一个func(ResponseWriter, *Request)</span><br><span class="line">2.使用errWrapper方法对其进行包装返回一个func(ResponseWriter, *Request)</span><br><span class="line">3.handler(writer,request)执行过程中如果报错就会返回err，然后对err进行处理</span><br><span class="line">*/</span><br><span class="line">func errWrapper(handler appHandler) func(http.ResponseWriter, *http.Request) &#123;</span><br><span class="line">//包装一个函数，返回一个函数，在返回一个无返回值的函数中进行处理</span><br><span class="line">return func(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">//defer对未知错误进行处理！！！！！！！！！！！！！！</span><br><span class="line">defer func() &#123;</span><br><span class="line">if r := recover(); r != nil &#123;</span><br><span class="line">log.Printf(&quot;Panic: %v&quot;, r)</span><br><span class="line">http.Error(writer, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">//这个handler实质就是filelisting.HandleFileList</span><br><span class="line">err := handler(writer, request)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">//控制台打印错误信息</span><br><span class="line">log.Printf(&quot;Error occurred handling request: %s&quot;, err.Error())</span><br><span class="line">//如果错误是希望展示给用户的错误</span><br><span class="line">if userError, ok := err.(userError); ok &#123;</span><br><span class="line">http.Error(writer,userError.Message(),http.StatusBadRequest)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//赋值默认值</span><br><span class="line">code := http.StatusOK</span><br><span class="line">switch &#123;</span><br><span class="line">//文件不存在code</span><br><span class="line">case os.IsNotExist(err):</span><br><span class="line">code = http.StatusNotFound</span><br><span class="line">//权限不够禁止访问</span><br><span class="line">case os.IsPermission(err):</span><br><span class="line">code = http.StatusForbidden</span><br><span class="line">//默认系统内部异常code</span><br><span class="line">default:</span><br><span class="line">code = http.StatusInternalServerError</span><br><span class="line">&#125;</span><br><span class="line">//将错误消息响应给客户端</span><br><span class="line">http.Error(writer, http.StatusText(code), code)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义能给用户看的错误</span><br><span class="line">type userError interface &#123;</span><br><span class="line">error</span><br><span class="line">Message() string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">http.HandleFunc(&quot;/&quot;, errWrapper(filelisting.HandleFileList))</span><br><span class="line"></span><br><span class="line">err := http.ListenAndServe(&quot;:8888&quot;, nil)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试与性能调优"><a href="#测试与性能调优" class="headerlink" title="测试与性能调优"></a>测试与性能调优</h1><h2 id="表格驱动测试"><a href="#表格驱动测试" class="headerlink" title="表格驱动测试"></a>表格驱动测试</h2><blockquote><p>方法名称以func TestXxx(t *testing.T)格式</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;math&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//测试方法参数需要添加*testing.T作为方法参数</span><br><span class="line">func TestTriangle(t *testing.T) &#123;</span><br><span class="line">tests := []struct&#123; a, b, c int &#125;&#123;</span><br><span class="line">&#123;3, 4, 6&#125;,</span><br><span class="line">&#123;5, 12, 13&#125;,</span><br><span class="line">&#123;8, 15, 17&#125;,</span><br><span class="line">&#123;30000, 40000, 50000&#125;,</span><br><span class="line">&#125;</span><br><span class="line">for _, element := range tests &#123;</span><br><span class="line">if actual := calcTriangle(element.a, element.b); actual != element.c &#123;</span><br><span class="line">t.Errorf(&quot;calcTriangle(%d,%d) got %d ; expected %d&quot;,element.a,element.b,actual,element.c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//计算勾股定理</span><br><span class="line">func calcTriangle(a int, b int) int &#123;</span><br><span class="line">var c int</span><br><span class="line">c = int(math.Sqrt(float64(a*a + b*b)))</span><br><span class="line">return c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">打印结果</span><br><span class="line">------------------------------------------------------</span><br><span class="line">API server listening at: [::]:50325</span><br><span class="line">=== RUN   TestTriangle</span><br><span class="line">    add_test.go:17: calcTriangle(3,4) got 5 ; expected 6</span><br><span class="line">--- FAIL: TestTriangle (0.00s)</span><br><span class="line">FAIL</span><br><span class="line"></span><br><span class="line">Debugger finished with exit code 0</span><br><span class="line">------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="查看代码覆盖率"><a href="#查看代码覆盖率" class="headerlink" title="查看代码覆盖率"></a>查看代码覆盖率</h2><blockquote><p>先生成代码覆盖率文件</p></blockquote> <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go test -coverprofile=c.out</span><br></pre></td></tr></table></figure><blockquote><p>使用可视化工具查看文件</p></blockquote> <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go tool cover -html=c.out</span><br></pre></td></tr></table></figure><p><img src="/images/img_13.png" alt="代码覆盖率可视化查看"></p><blockquote><p>红色是没有覆盖的代码</p></blockquote><blockquote><p>绿色是覆盖的代码</p></blockquote><h2 id="代码性能测试"><a href="#代码性能测试" class="headerlink" title="代码性能测试"></a>代码性能测试</h2><blockquote><p>方法名称以func Benchmark(b *testing.B)格式</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;math&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line">//性能测试代码</span><br><span class="line">func BenchmarkSubStr(b *testing.B) &#123;</span><br><span class="line">s := &quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot;</span><br><span class="line">ans := 8</span><br><span class="line">//b.N让系统决定代码性能执行的次数</span><br><span class="line">for i := 0; i &lt; b.N; i++ &#123;</span><br><span class="line">actual := lengthOfLongestSubstring(s)</span><br><span class="line">if actual != ans &#123;</span><br><span class="line">b.Errorf(&quot;got %d for input %s; expected %d&quot;, actual,s,ans)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//需要进行性能测试的方法快</span><br><span class="line">func lengthOfLongestSubstring(s string) int &#123;</span><br><span class="line">//记录每个字母最后出现的位置</span><br><span class="line">lastOccurred := make(map[rune]int)</span><br><span class="line">start := 0</span><br><span class="line">maxLenght := 0</span><br><span class="line">for i,ch := range []rune(s) &#123;</span><br><span class="line">//有可能不存在这个map获取出来的值是0,而0又是一个合法的下标，所以要判断这个key是否存在</span><br><span class="line">if lastI,ok := lastOccurred[ch] ; ok &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">start = lastOccurred[ch] +1</span><br><span class="line">&#125;</span><br><span class="line">if i - start +1 &gt; maxLenght &#123;</span><br><span class="line">maxLenght = i - start + 1</span><br><span class="line">&#125;</span><br><span class="line">lastOccurred[ch] = i</span><br><span class="line">&#125;</span><br><span class="line">return maxLenght</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">打印结果</span><br><span class="line">------------------------------------------------------</span><br><span class="line">API server listening at: [::]:62673</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: world.ismyfree/go-learning/basic/loop</span><br><span class="line">BenchmarkSubStr</span><br><span class="line">BenchmarkSubStr-8     523216      2315 ns/op</span><br><span class="line">PASS</span><br><span class="line"></span><br><span class="line">Debugger finished with exit code 0</span><br><span class="line">------------------------------------------------------</span><br></pre></td></tr></table></figure><blockquote><p>也可以使用命令行对代码进行测试</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go test -bench .</span><br></pre></td></tr></table></figure><blockquote><p>生成性能测试生成cpu报告</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go test -bench . -cpuprofile cpu.out</span><br></pre></td></tr></table></figure><h3 id="使用pprof工具查看cpu-out报告文件"><a href="#使用pprof工具查看cpu-out报告文件" class="headerlink" title="使用pprof工具查看cpu.out报告文件"></a>使用pprof工具查看cpu.out报告文件</h3><blockquote><p>输入命令进入工具命令行</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go tool pprof cpu.out</span><br></pre></td></tr></table></figure><blockquote><p>进入命令行工具后输入web命令即可以图形化网页形式展示性能问题，针对问题进行调优</p></blockquote><blockquote><p>输入help可查看帮助命令</p></blockquote><blockquote><p>各种报错没能成功，有时间再研究</p></blockquote><h2 id="http测试"><a href="#http测试" class="headerlink" title="http测试"></a>http测试</h2><h3 id="仅对函数进行测试-更像单元测试"><a href="#仅对函数进行测试-更像单元测试" class="headerlink" title="仅对函数进行测试(更像单元测试)"></a>仅对函数进行测试(更像单元测试)</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">errorwrapper_test.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/http/httptest&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type testingUserError string</span><br><span class="line"></span><br><span class="line">//error接口有一个Error方法相当于实现了error接口</span><br><span class="line">func (e testingUserError) Error() string &#123;</span><br><span class="line">return e.Message()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//testingUserError包装了一个Message方法，这两个方法相当于实现了testingUserError接口及error接口</span><br><span class="line">func (e testingUserError) Message() string &#123;</span><br><span class="line">return string(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errPanic(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">panic(123)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errUserError(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">return testingUserError(&quot;user error&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errNotFound(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">return os.ErrNotExist</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errNoPermission(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">return os.ErrPermission</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errUnknown(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">return errors.New(&quot;unknown error&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func noError(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">fmt.Fprintln(writer, &quot;no error&quot;)</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestErrWrapper(t *testing.T) &#123;</span><br><span class="line">tests := []struct &#123;</span><br><span class="line">h       appHandler</span><br><span class="line">code    int</span><br><span class="line">message string</span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;errPanic, 500, &quot;Internal Server Error&quot;&#125;,</span><br><span class="line">&#123;errUserError, 400, &quot;user error&quot;&#125;,</span><br><span class="line">&#123;errNotFound, 404, &quot;Not Found&quot;&#125;,</span><br><span class="line">&#123;errNoPermission, 403, &quot;Forbidden&quot;&#125;,</span><br><span class="line">&#123;errUnknown, 500, &quot;Internal Server Error&quot;&#125;,</span><br><span class="line">&#123;noError,200,&quot;no error&quot;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">for _, tt := range tests &#123;</span><br><span class="line">f := errWrapper(tt.h)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">request := httptest.NewRequest(http.MethodGet, &quot;http://localhost:8888/list/fib.txt&quot;, nil)</span><br><span class="line">f(response, request)</span><br><span class="line">b, _ := ioutil.ReadAll(response.Body)</span><br><span class="line">body := strings.Trim(string(b), &quot;\n&quot;)</span><br><span class="line">if response.Code != tt.code || body != tt.message &#123;</span><br><span class="line">t.Errorf(&quot;expect (%d,%s); got (%d, %s)&quot;, tt.code, tt.message, response.Code, body)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line">响应结果</span><br><span class="line">------------------------------------------------------</span><br><span class="line">API server listening at: [::]:50904</span><br><span class="line">=== RUN   TestErrWrapper</span><br><span class="line">2020/12/28 17:26:00 Panic: 123</span><br><span class="line">2020/12/28 17:26:00 Error occurred handling request: user error</span><br><span class="line">2020/12/28 17:26:00 Error occurred handling request: file does not exist</span><br><span class="line">2020/12/28 17:26:00 Error occurred handling request: permission denied</span><br><span class="line">2020/12/28 17:26:00 Error occurred handling request: unknown error</span><br><span class="line">--- PASS: TestErrWrapper (0.01s)</span><br><span class="line">PASS</span><br><span class="line"></span><br><span class="line">Debugger finished with exit code 0</span><br><span class="line">------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="开一个服务器对http进行测试-集成度更高"><a href="#开一个服务器对http进行测试-集成度更高" class="headerlink" title="开一个服务器对http进行测试(集成度更高)"></a>开一个服务器对http进行测试(集成度更高)</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">errorwrapper_test.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/http/httptest&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type testingUserError string</span><br><span class="line"></span><br><span class="line">//error接口有一个Error方法相当于实现了error接口</span><br><span class="line">func (e testingUserError) Error() string &#123;</span><br><span class="line">return e.Message()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//testingUserError包装了一个Message方法，这两个方法相当于实现了testingUserError接口及error接口</span><br><span class="line">func (e testingUserError) Message() string &#123;</span><br><span class="line">return string(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errPanic(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">panic(123)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errUserError(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">return testingUserError(&quot;user error&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errNotFound(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">return os.ErrNotExist</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errNoPermission(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">return os.ErrPermission</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func errUnknown(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">return errors.New(&quot;unknown error&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func noError(writer http.ResponseWriter, request *http.Request) error &#123;</span><br><span class="line">fmt.Fprintln(writer, &quot;no error&quot;)</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestErrWrapperInServer(t *testing.T) &#123;</span><br><span class="line">tests := []struct &#123;</span><br><span class="line">h       appHandler</span><br><span class="line">code    int</span><br><span class="line">message string</span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;errPanic, 500, &quot;Internal Server Error&quot;&#125;,</span><br><span class="line">&#123;errUserError, 400, &quot;user error&quot;&#125;,</span><br><span class="line">&#123;errNotFound, 404, &quot;Not Found&quot;&#125;,</span><br><span class="line">&#123;errNoPermission, 403, &quot;Forbidden&quot;&#125;,</span><br><span class="line">&#123;errUnknown, 500, &quot;Internal Server Error&quot;&#125;,</span><br><span class="line">&#123;noError, 200, &quot;no error&quot;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">for _, tt := range tests &#123;</span><br><span class="line">f := errWrapper(tt.h)</span><br><span class="line">server := httptest.NewServer(http.HandlerFunc(f))</span><br><span class="line">resp, _ := http.Get(server.URL)</span><br><span class="line">verifyResponse(resp,tt.code,tt.message,t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func verifyResponse(resp *http.Response,expectCode int,expectMessage string,t *testing.T) &#123;</span><br><span class="line">b, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">body := strings.Trim(string(b), &quot;\n&quot;)</span><br><span class="line">if resp.StatusCode != expectCode || body != expectMessage &#123;</span><br><span class="line">t.Errorf(&quot;expect (%d,%s); got (%d, %s)&quot;, expectCode, expectMessage, resp.StatusCode, body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看接口文档"><a href="#查看接口文档" class="headerlink" title="查看接口文档"></a>查看接口文档</h2><blockquote><p>需要安装godoc工具</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install golang.org/x/tools/cmd/godoc</span><br></pre></td></tr></table></figure><blockquote><p>执行命令查看接口文档</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godoc -http=:6060</span><br></pre></td></tr></table></figure><blockquote><p>打开本地端口网页6060查看(所有接口文档,包含本地及官方)</p></blockquote><p><img src="/images/img_14.png" alt="web页面接口文档"></p><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="协程Coroutine"><a href="#协程Coroutine" class="headerlink" title="协程Coroutine"></a>协程Coroutine</h2><blockquote><p>轻量级”线程”</p></blockquote><blockquote><p><strong>非抢占式</strong>多任务处理，由协程主动交出控制权</p></blockquote><blockquote><p>编译器/解释器/虚拟机层的多任务</p></blockquote><blockquote><p>多个协程可以在一个或者多个线程上运行</p></blockquote><blockquote><p>子程序是协程的一个特例(协程是比子程序更宽泛的一个概念)</p></blockquote><p><img src="/images/img_15.png" alt="协程与普通函数的对比"></p><h3 id="协程简单演示go-func"><a href="#协程简单演示go-func" class="headerlink" title="协程简单演示go func"></a>协程简单演示go func</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;runtime&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var a [10]int</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">//协程</span><br><span class="line">go func(i int) &#123;</span><br><span class="line">for true &#123;</span><br><span class="line">//id操作协程之间会切换</span><br><span class="line">//fmt.Printf(&quot;hello from goroutine %d&quot;,i)</span><br><span class="line">a[i]++</span><br><span class="line">//手动交出协程控制权</span><br><span class="line">runtime.Gosched()</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此段代码有数据访问冲突,可以使用以下命令进行检测</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run -race xxx.go</span><br></pre></td></tr></table></figure><blockquote><p>命令执行结果如下</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">==================</span><br><span class="line">WARNING: DATA RACE</span><br><span class="line">//读</span><br><span class="line">Read at 0x00c0001300f0 by main goroutine:</span><br><span class="line">  main.main()</span><br><span class="line">      D:/goProject/src/world.ismyfree/go-learning/goroutine/goroutine.go:24 +0x104</span><br><span class="line">//写</span><br><span class="line">Previous write at 0x00c0001300f0 by goroutine 7:</span><br><span class="line">  main.main.func1()</span><br><span class="line">      D:/goProject/src/world.ismyfree/go-learning/goroutine/goroutine.go:17 +0x6f</span><br><span class="line"></span><br><span class="line">Goroutine 7 (running) created at:</span><br><span class="line">  main.main()</span><br><span class="line">      D:/goProject/src/world.ismyfree/go-learning/goroutine/goroutine.go:13 +0xca</span><br><span class="line">==================</span><br><span class="line">[4400 3695 3707 3321 3159 2643 2964 2641 2969 2490]</span><br><span class="line">Found 1 data race(s)</span><br><span class="line">exit status 66</span><br></pre></td></tr></table></figure><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><p><img src="/images/img_16.png" alt="goroutine抽象图"></p><blockquote><p>任何函数只要加上go就能送给调度器运行</p></blockquote><blockquote><p>不需要在定义是区分是否是异步函数</p></blockquote><blockquote><p>调度器在合适的点进行切换</p></blockquote><blockquote><p>使用-race可以检测数据访问冲突</p></blockquote><blockquote><p>调度器会将各个协程映射到物理机的各个线程</p></blockquote><h3 id="goroutine可能切换的参考点"><a href="#goroutine可能切换的参考点" class="headerlink" title="goroutine可能切换的参考点"></a>goroutine可能切换的参考点</h3><blockquote><p>I/O,select (如print)<br>d<br>channel</p></blockquote><blockquote><p>等待锁</p></blockquote><blockquote><p>函数调用(有时)</p></blockquote><blockquote><p>runtime.Gosched()(手动交出协程控制权)</p></blockquote><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p><img src="/images/img_17.png" alt="channel"></p><blockquote><p>goroutine与goroutine之间双向的通道就是channel</p></blockquote><blockquote><p>channel是goroutine与goroutine之间的交互，一个goroutine发送数据就要有一个goroutine接收数据，没有goroutine接收数据会发生dadelock</p></blockquote><blockquote><p>channel</p><blockquote><p>channel<br>buffered channel<br>range</p><blockquote><p>理论基础：Communication Sequential Process (CSP模型)</p></blockquote></blockquote></blockquote><blockquote><p>不要通过共享内存来通信;<strong>通过通信来共享内存</strong></p></blockquote><h3 id="channel的示例"><a href="#channel的示例" class="headerlink" title="channel的示例"></a>channel的示例</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//worker是一个goroutine</span><br><span class="line">func worker(id int, c chan int) &#123;</span><br><span class="line">/*for true &#123;</span><br><span class="line">//从channel中获取数据并打印（一般打印的数据都是乱序，调度器随意选择调度的goroutine）</span><br><span class="line">if n, ok := &lt;-c; !ok &#123;</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Printf(&quot;worker %d received %c\n&quot;, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;*/</span><br><span class="line">for n := range c &#123;</span><br><span class="line">fmt.Printf(&quot;worker %d received %c\n&quot;, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建worker</span><br><span class="line">func createWorker(id int) chan&lt;- int &#123;</span><br><span class="line">c := make(chan int)</span><br><span class="line">//这部分操作需要交给一个goroutine</span><br><span class="line">go worker(id, c)</span><br><span class="line">//返回一个channel</span><br><span class="line">return c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//channel示例代码</span><br><span class="line">func chanDemo() &#123;</span><br><span class="line">var channels [10]chan&lt;- int</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">//创建一个channel（channel是一等公民,能作为参数也能作为返回值）</span><br><span class="line">//channels[i] = make(chan int)</span><br><span class="line">//创建一个goroutine接收channel中的数据</span><br><span class="line">channels[i] = createWorker(i)</span><br><span class="line">&#125;</span><br><span class="line">//往channel里面发送数据</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">channels[i] &lt;- &apos;a&apos; + i</span><br><span class="line">&#125;</span><br><span class="line">//往channel里面发送数据</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">channels[i] &lt;- &apos;A&apos; + i</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//bufferedChannel</span><br><span class="line">func bufferedChannel() &#123;</span><br><span class="line">c := make(chan int, 3)</span><br><span class="line">go worker(0, c)</span><br><span class="line">c &lt;- &apos;A&apos;</span><br><span class="line">c &lt;- &apos;B&apos;</span><br><span class="line">c &lt;- &apos;C&apos;</span><br><span class="line">c &lt;- &apos;C&apos;</span><br><span class="line">c &lt;- &apos;C&apos;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//bufferedChannel</span><br><span class="line">func channelClose() &#123;</span><br><span class="line">c := make(chan int, 3)</span><br><span class="line">go worker(0, c)</span><br><span class="line">c &lt;- &apos;A&apos;</span><br><span class="line">c &lt;- &apos;B&apos;</span><br><span class="line">c &lt;- &apos;C&apos;</span><br><span class="line">c &lt;- &apos;C&apos;</span><br><span class="line">c &lt;- &apos;C&apos;</span><br><span class="line">close(c)</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//main</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;Channel as first-class citizen&quot;)</span><br><span class="line">chanDemo()</span><br><span class="line">fmt.Println(&quot;Buffered channel&quot;)</span><br><span class="line">bufferedChannel()</span><br><span class="line">fmt.Println(&quot;Channel close and range&quot;)</span><br><span class="line">channelClose()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="channel示例优化-通过通信来共享内存"><a href="#channel示例优化-通过通信来共享内存" class="headerlink" title="channel示例优化(通过通信来共享内存)"></a>channel示例优化(通过通信来共享内存)</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//worker是一个goroutine</span><br><span class="line">func doWorker(id int, c chan int, done chan bool) &#123;</span><br><span class="line">/*for true &#123;</span><br><span class="line">//从channel中获取数据并打印（一般打印的数据都是乱序，调度器随意选择调度的goroutine）</span><br><span class="line">if n, ok := &lt;-c; !ok &#123;</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Printf(&quot;worker %d received %c\n&quot;, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;*/</span><br><span class="line">for n := range c &#123;</span><br><span class="line">fmt.Printf(&quot;worker %d received %c\n&quot;, id, n)</span><br><span class="line">//通过通信来共享内存通知外面打印完成</span><br><span class="line">//done &lt;- true</span><br><span class="line">//channel发送数据需要在另外的goroutine中做,否则会发生阻塞</span><br><span class="line">//go func() &#123;done&lt;-true&#125;()</span><br><span class="line">done &lt;- true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建worker</span><br><span class="line">func createWorker(id int) worker &#123;</span><br><span class="line">w := worker&#123;</span><br><span class="line">in:   make(chan int),</span><br><span class="line">done: make(chan bool),</span><br><span class="line">&#125;</span><br><span class="line">//c := make(chan int)</span><br><span class="line">//这部分操作需要交给一个goroutine</span><br><span class="line">go doWorker(id, w.in, w.done)</span><br><span class="line">//返回一个channel</span><br><span class="line">return w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type worker struct &#123;</span><br><span class="line">in   chan int</span><br><span class="line">done chan bool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//channel示例代码</span><br><span class="line">func chanDemo() &#123;</span><br><span class="line">var workers [10]worker</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">//创建一个channel（channel是一等公民,能作为参数也能作为返回值）</span><br><span class="line">//channels[i] = make(chan int)</span><br><span class="line">//创建一个goroutine接收channel中的数据</span><br><span class="line">workers[i] = createWorker(i)</span><br><span class="line">&#125;</span><br><span class="line">//往channel里面发送数据</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">workers[i].in &lt;- &apos;a&apos; + i</span><br><span class="line">//现在没有sleep也能打印完成，但是是顺序打印的</span><br><span class="line">//&lt;-workers[i].done</span><br><span class="line">&#125;</span><br><span class="line">for _, worker := range workers &#123;</span><br><span class="line">&lt;-worker.done</span><br><span class="line">&#125;</span><br><span class="line">//往channel里面发送数据</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">workers[i].in &lt;- &apos;A&apos; + i</span><br><span class="line">//现在没有sleep也能打印完成，但是是顺序打印的</span><br><span class="line">//&lt;-workers[i].done</span><br><span class="line">&#125;</span><br><span class="line">for _, worker := range workers &#123;</span><br><span class="line">&lt;-worker.done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*for _,worker := range workers&#123;</span><br><span class="line">&lt;-worker.done</span><br><span class="line">&lt;-worker.done</span><br><span class="line">&#125;*/</span><br><span class="line">//sleep的方式很不好,我们需要通知到外面已经打印完成</span><br><span class="line">//time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//main</span><br><span class="line">func main() &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用go提供的waitGroup改进示例"><a href="#使用go提供的waitGroup改进示例" class="headerlink" title="使用go提供的waitGroup改进示例"></a>使用go提供的waitGroup改进示例</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//worker是一个goroutine</span><br><span class="line">func doWorker(id int, c chan int, wg *sync.WaitGroup) &#123;</span><br><span class="line">/*for true &#123;</span><br><span class="line">//从channel中获取数据并打印（一般打印的数据都是乱序，调度器随意选择调度的goroutine）</span><br><span class="line">if n, ok := &lt;-c; !ok &#123;</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Printf(&quot;worker %d received %c\n&quot;, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;*/</span><br><span class="line">for n := range c &#123;</span><br><span class="line">fmt.Printf(&quot;worker %d received %c\n&quot;, id, n)</span><br><span class="line">//通过通信来共享内存通知外面打印完成</span><br><span class="line">//done &lt;- true</span><br><span class="line">//channel发送数据需要在另外的goroutine中做,否则会发生阻塞</span><br><span class="line">//go func() &#123;done&lt;-true&#125;()</span><br><span class="line">//done &lt;- true</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建worker</span><br><span class="line">func createWorker(id int,wg *sync.WaitGroup) worker &#123;</span><br><span class="line">w := worker&#123;</span><br><span class="line">in:   make(chan int),</span><br><span class="line">wg: wg,</span><br><span class="line">&#125;</span><br><span class="line">//c := make(chan int)</span><br><span class="line">//这部分操作需要交给一个goroutine</span><br><span class="line">go doWorker(id, w.in, wg)</span><br><span class="line">//返回一个channel</span><br><span class="line">return w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type worker struct &#123;</span><br><span class="line">in   chan int</span><br><span class="line">wg *sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//channel示例代码</span><br><span class="line">func chanDemo() &#123;</span><br><span class="line">//go提供的等待多任务完成的方法</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">var workers [10]worker</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">//创建一个channel（channel是一等公民,能作为参数也能作为返回值）</span><br><span class="line">//channels[i] = make(chan int)</span><br><span class="line">//创建一个goroutine接收channel中的数据</span><br><span class="line">workers[i] = createWorker(i,&amp;wg)</span><br><span class="line">&#125;</span><br><span class="line">//往channel里面发送数据</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">workers[i].in &lt;- &apos;a&apos; + i</span><br><span class="line">//现在没有sleep也能打印完成，但是是顺序打印的</span><br><span class="line">//&lt;-workers[i].done</span><br><span class="line">wg.Add(1)</span><br><span class="line">&#125;</span><br><span class="line">//往channel里面发送数据</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">workers[i].in &lt;- &apos;A&apos; + i</span><br><span class="line">//现在没有sleep也能打印完成，但是是顺序打印的</span><br><span class="line">//&lt;-workers[i].done</span><br><span class="line">wg.Add(1)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//main</span><br><span class="line">func main() &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用函数式编程对示例进行抽象重构"><a href="#使用函数式编程对示例进行抽象重构" class="headerlink" title="使用函数式编程对示例进行抽象重构"></a>使用函数式编程对示例进行抽象重构</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//worker是一个goroutine</span><br><span class="line">func doWorker(id int, w worker) &#123;</span><br><span class="line">/*for true &#123;</span><br><span class="line">//从channel中获取数据并打印（一般打印的数据都是乱序，调度器随意选择调度的goroutine）</span><br><span class="line">if n, ok := &lt;-c; !ok &#123;</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Printf(&quot;worker %d received %c\n&quot;, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;*/</span><br><span class="line">for n := range w.in &#123;</span><br><span class="line">fmt.Printf(&quot;worker %d received %c\n&quot;, id, n)</span><br><span class="line">//通过通信来共享内存通知外面打印完成</span><br><span class="line">//done &lt;- true</span><br><span class="line">//channel发送数据需要在另外的goroutine中做,否则会发生阻塞</span><br><span class="line">//go func() &#123;done&lt;-true&#125;()</span><br><span class="line">//done &lt;- true</span><br><span class="line">w.done()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建worker</span><br><span class="line">func createWorker(id int, wg *sync.WaitGroup) worker &#123;</span><br><span class="line">w := worker&#123;</span><br><span class="line">in: make(chan int),</span><br><span class="line">done: func() &#123;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">//c := make(chan int)</span><br><span class="line">//这部分操作需要交给一个goroutine</span><br><span class="line">go doWorker(id, w)</span><br><span class="line">//返回一个channel</span><br><span class="line">return w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type worker struct &#123;</span><br><span class="line">in   chan int</span><br><span class="line">done func()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//channel示例代码</span><br><span class="line">func chanDemo() &#123;</span><br><span class="line">//go提供的等待多任务完成的方法</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">var workers [10]worker</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">//创建一个channel（channel是一等公民,能作为参数也能作为返回值）</span><br><span class="line">//channels[i] = make(chan int)</span><br><span class="line">//创建一个goroutine接收channel中的数据</span><br><span class="line">workers[i] = createWorker(i, &amp;wg)</span><br><span class="line">&#125;</span><br><span class="line">//往channel里面发送数据</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">workers[i].in &lt;- &apos;a&apos; + i</span><br><span class="line">//现在没有sleep也能打印完成，但是是顺序打印的</span><br><span class="line">//&lt;-workers[i].done</span><br><span class="line">wg.Add(1)</span><br><span class="line">&#125;</span><br><span class="line">//往channel里面发送数据</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">workers[i].in &lt;- &apos;A&apos; + i</span><br><span class="line">//现在没有sleep也能打印完成，但是是顺序打印的</span><br><span class="line">//&lt;-workers[i].done</span><br><span class="line">wg.Add(1)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//main</span><br><span class="line">func main() &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用channel实现树的遍历"><a href="#使用channel实现树的遍历" class="headerlink" title="使用channel实现树的遍历"></a>使用channel实现树的遍历</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">Node.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package tree</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func (node Node) setVal(value int) &#123;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line">func (node *Node) setValue(value int) &#123;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义类型</span><br><span class="line">type Node struct &#123;</span><br><span class="line">Value       int</span><br><span class="line">Left, Right *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义print</span><br><span class="line">func (node Node) Print() &#123;</span><br><span class="line">fmt.Print(node.Value, &quot; &quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//遍历树</span><br><span class="line">func (node *Node) Traverse() &#123;</span><br><span class="line">node.TraverseFunc(func(n *Node) &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">n.Print()</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//遍历树同时做什么操作由传递的函数决定</span><br><span class="line">func (node *Node) TraverseFunc(f func(node *Node)) &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">node.Left.TraverseFunc(f)</span><br><span class="line">f(node)</span><br><span class="line">node.Right.TraverseFunc(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用channel对树进行遍历</span><br><span class="line">func (node *Node) TraverseWithChannel() chan *Node &#123;</span><br><span class="line">out := make(chan *Node)</span><br><span class="line">go func() &#123;</span><br><span class="line">node.TraverseFunc(</span><br><span class="line">func(node *Node) &#123;</span><br><span class="line">out &lt;- node</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">close(out)</span><br><span class="line">&#125;()</span><br><span class="line">return out</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">main.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;world.ismyfree/go-learning/tree&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">root := tree.Node&#123;Value: 3&#125;</span><br><span class="line">root.Left = &amp;tree.Node&#123;&#125;</span><br><span class="line">root.Right = &amp;tree.Node&#123;Value: 5&#125;</span><br><span class="line">root.Left.Right = &amp;tree.Node&#123;Value: 2&#125;</span><br><span class="line">root.Right.Left = &amp;tree.Node&#123;Value: 4&#125;</span><br><span class="line">root.Traverse()</span><br><span class="line">count := 0</span><br><span class="line">root.TraverseFunc(func(node *tree.Node) &#123;</span><br><span class="line">count++</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(&quot;Node count: &quot;, count)</span><br><span class="line"></span><br><span class="line">//使用channel遍历树获取最大值</span><br><span class="line">c := root.TraverseWithChannel()</span><br><span class="line">maxNode := 0</span><br><span class="line">for node := range c &#123;</span><br><span class="line">if node.Value &gt; maxNode &#123;</span><br><span class="line">maxNode = node.Value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;Max node value:&quot;, maxNode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用select方式对chnnel进行调度"><a href="#使用select方式对chnnel进行调度" class="headerlink" title="使用select方式对chnnel进行调度"></a>使用select方式对chnnel进行调度</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math/rand&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//worker是一个goroutine</span><br><span class="line">func worker(id int, c chan int) &#123;</span><br><span class="line">/*for true &#123;</span><br><span class="line">//从channel中获取数据并打印（一般打印的数据都是乱序，调度器随意选择调度的goroutine）</span><br><span class="line">if n, ok := &lt;-c; !ok &#123;</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Printf(&quot;worker %d received %c\n&quot;, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;*/</span><br><span class="line">for n := range c &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Printf(&quot;worker %d received %d\n&quot;, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建worker</span><br><span class="line">func createWorker(id int) chan&lt;- int &#123;</span><br><span class="line">c := make(chan int)</span><br><span class="line">//这部分操作需要交给一个goroutine</span><br><span class="line">go worker(id, c)</span><br><span class="line">//返回一个channel</span><br><span class="line">return c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func generator() chan int &#123;</span><br><span class="line">out := make(chan int)</span><br><span class="line">go func() &#123;</span><br><span class="line">i := 0</span><br><span class="line">for true &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(1500)) * time.Millisecond)</span><br><span class="line">out &lt;- i</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">return out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var c1, c2 = generator(), generator()</span><br><span class="line">var worker = createWorker(0)</span><br><span class="line">var values []int</span><br><span class="line">//10s后往这个channel发送时间</span><br><span class="line">afterTenSecond := time.After(10 * time.Second)</span><br><span class="line">//每秒往这个</span><br><span class="line">tick := time.Tick(time.Second)</span><br><span class="line">for true &#123;</span><br><span class="line">var activeWorker chan&lt;- int</span><br><span class="line">var activeValue int</span><br><span class="line">if len(values) &gt; 0 &#123;</span><br><span class="line">activeWorker = worker</span><br><span class="line">activeValue = values[0]</span><br><span class="line">&#125;</span><br><span class="line">select &#123;</span><br><span class="line">case n := &lt;-c1:</span><br><span class="line">values = append(values, n)</span><br><span class="line">case n := &lt;-c2:</span><br><span class="line">values = append(values, n)</span><br><span class="line">case activeWorker &lt;- activeValue:</span><br><span class="line">values = values[1:]</span><br><span class="line">case &lt;-time.After(500 * time.Millisecond):</span><br><span class="line">//每次进寻魂生成数据超过500毫秒打印time out</span><br><span class="line">fmt.Println(&quot;time out&quot;)</span><br><span class="line">case &lt;-tick:</span><br><span class="line">fmt.Println(&quot;queue len = &quot;, len(values))</span><br><span class="line">case &lt;-afterTenSecond:</span><br><span class="line">//10s后冲这个channel获取到数据结束程序</span><br><span class="line">fmt.Println(&quot;Bye&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传统同步机制"><a href="#传统同步机制" class="headerlink" title="传统同步机制"></a>传统同步机制</h3><blockquote><p>WaitGroup</p></blockquote><blockquote><p>Mutex(互斥量)</p></blockquote><blockquote><p>cond(条件变量)</p></blockquote><h4 id="Mutex示例-真实操作请使用系统库提供的原子操作，这里仅作为示例"><a href="#Mutex示例-真实操作请使用系统库提供的原子操作，这里仅作为示例" class="headerlink" title="Mutex示例(真实操作请使用系统库提供的原子操作，这里仅作为示例)"></a>Mutex示例(真实操作请使用系统库提供的原子操作，这里仅作为示例)</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type atomicInt struct &#123;</span><br><span class="line">value int</span><br><span class="line">lock sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (a *atomicInt) increment() &#123;</span><br><span class="line">fmt.Println(&quot;safe increment&quot;)</span><br><span class="line">func()&#123;</span><br><span class="line">a.lock.Lock()</span><br><span class="line">defer a.lock.Unlock()</span><br><span class="line">a.value++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (a *atomicInt) get() int &#123;</span><br><span class="line">a.lock.Lock()</span><br><span class="line">defer a.lock.Unlock()</span><br><span class="line">return a.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var a atomicInt</span><br><span class="line">a.increment()</span><br><span class="line">go func() &#123;</span><br><span class="line">a.increment()</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Println(a.get())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="http及其它标准库"><a href="#http及其它标准库" class="headerlink" title="http及其它标准库"></a>http及其它标准库</h1><h2 id="httpClient示例"><a href="#httpClient示例" class="headerlink" title="httpClient示例"></a>httpClient示例</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/http/httputil&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">request, err := http.NewRequest(http.MethodGet, &quot;https://www.imooc.com&quot;, nil)</span><br><span class="line">//控制请求的头部信息</span><br><span class="line">request.Header.Add(&quot;User-Agent&quot;,&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1&quot;)</span><br><span class="line">//自己构建客户端打印重定向时候的操作</span><br><span class="line">client := http.Client&#123;</span><br><span class="line">CheckRedirect: func(req *http.Request, via []*http.Request) error &#123;</span><br><span class="line">fmt.Println(&quot;Redirect&quot;, req)</span><br><span class="line">return nil</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">//我们使用自己构建的client</span><br><span class="line">resp, err := client.Do(request)</span><br><span class="line">//resp, err := http.DefaultClient.Do(request)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">defer resp.Body.Close()</span><br><span class="line">//使用httputil简化工作</span><br><span class="line">s, err := httputil.DumpResponse(resp, true)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;%s\n&quot;,s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="httpServer性能分析"><a href="#httpServer性能分析" class="headerlink" title="httpServer性能分析"></a>httpServer性能分析</h2><blockquote><p>在程序中import _ “net/http/pprof”</p></blockquote><blockquote><p>在浏览器中打开接口路径为/debug/pprof/的请求</p></blockquote><p><img src="/images/img_18.png" alt="http pprof工具"></p><blockquote><p>使用命令行pprof工具获得程序30秒的性能访问权限(30秒内随意访问服务的接口)</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go tool pprof http://localhost:8888/debug/pprof/profile</span><br></pre></td></tr></table></figure><blockquote><p>以上命令操作完后输入web以图形化界面进行分析程序（需要安装Graphviz）</p></blockquote><blockquote><p>也可以使用如下命令查看内存使用情况</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go tool pprof http://localhost:8888/debug/pprof/profile</span><br></pre></td></tr></table></figure><h2 id="其它标准库"><a href="#其它标准库" class="headerlink" title="其它标准库"></a>其它标准库</h2><h3 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h3><blockquote><p>bufio</p></blockquote><blockquote><p>log</p></blockquote><blockquote><p>encoding/json</p></blockquote><blockquote><p>regexp</p></blockquote><blockquote><p>time</p></blockquote><blockquote><p>strings/math/rand</p></blockquote><h3 id="起一个服务查看标准库文档"><a href="#起一个服务查看标准库文档" class="headerlink" title="起一个服务查看标准库文档"></a>起一个服务查看标准库文档</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godoc -http=:6060</span><br></pre></td></tr></table></figure><h3 id="中文标准库网址"><a href="#中文标准库网址" class="headerlink" title="中文标准库网址"></a>中文标准库网址</h3><p>点此进行跳转<strong><a href="https://studygolang.com/pkgdoc" target="_blank" rel="noopener">go中文api</a></strong></p><h1 id="迷宫的广度优先搜索"><a href="#迷宫的广度优先搜索" class="headerlink" title="迷宫的广度优先搜索"></a>迷宫的广度优先搜索</h1><p><img src="/images/img_19.png" alt="迷宫示意图"></p><blockquote><p>0代表可以走的地方</p></blockquote><blockquote><p>1代表墙</p></blockquote><blockquote><p>人为规定入口和出口为左上角和右下角</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>想想我们在一个未知的世界</p></blockquote><p><img src="/images/img_20.png" alt="第0步"></p><blockquote><p>顺序探索并放入未探索队列当中(上左下右)</p></blockquote><p><img src="/images/img_21.png" alt="第1步"></p><blockquote><p>每探索一个移除未探索队列并将新探索到未探索的加入队列中</p></blockquote><p><img src="/images/img_22.png" alt="第2步上"></p><p><img src="/images/img_23.png" alt="第2步左"></p><p><img src="/images/img_24.png" alt="第2步下"></p><p><img src="/images/img_25.png" alt="第2步右"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">maze.in</span><br><span class="line">------------------------------------------------------</span><br><span class="line">6 5</span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 0 0 1 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">1 1 1 0 0</span><br><span class="line">0 1 0 0 1</span><br><span class="line">0 1 0 0 0</span><br><span class="line">------------------------------------------------------</span><br><span class="line">maze.go</span><br><span class="line">------------------------------------------------------</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//读取迷宫文件</span><br><span class="line">func readMaze(filename string) [][]int &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">//定义行列临时变量</span><br><span class="line">var row, col int</span><br><span class="line">//扫描第一行获取文件的行列数(\n读换行)</span><br><span class="line">fmt.Fscanf(file, &quot;%d %d\n&quot;, &amp;row, &amp;col)</span><br><span class="line">//创建第一维slice</span><br><span class="line">maze := make([][]int, row)</span><br><span class="line">for i := range maze &#123;</span><br><span class="line">//创建第二维slice</span><br><span class="line">maze[i] = make([]int, col)</span><br><span class="line">//将数据放到二维slice中的每一个元素中</span><br><span class="line">for j := range maze[i] &#123;</span><br><span class="line">a := &amp;maze[i][j]</span><br><span class="line">if j == len(maze[i])-1 &#123;</span><br><span class="line">//(\n读换行)</span><br><span class="line">fmt.Fscanf(file, &quot;%d\n&quot;, a)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Fscanf(file, &quot;%d&quot;, a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return maze</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type point struct &#123;</span><br><span class="line">i, j int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//移动(上左下右)</span><br><span class="line">var dirs = [4]point&#123;</span><br><span class="line">&#123;-1, 0&#125;,</span><br><span class="line">&#123;0, -1&#125;,</span><br><span class="line">&#123;1, 0&#125;,</span><br><span class="line">&#123;0, 1&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//移动add</span><br><span class="line">func (p point) add(r point) point &#123;</span><br><span class="line">return point&#123;p.i + r.i, p.j + r.j&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//at校验当前位置</span><br><span class="line">func (p point) at(grid [][]int) (int, bool) &#123;</span><br><span class="line">//往上走或者往下走越界的时候</span><br><span class="line">if p.i &lt; 0 || p.i &gt;= len(grid) &#123;</span><br><span class="line">return 0, false</span><br><span class="line">&#125;</span><br><span class="line">//往左走或者往右走越界的时候</span><br><span class="line">if p.j &lt; 0 || p.j &gt;= len(grid[p.i]) &#123;</span><br><span class="line">return 0, false</span><br><span class="line">&#125;</span><br><span class="line">return grid[p.i][p.j],true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//走迷宫</span><br><span class="line">func walk(maze [][]int, start, end point) [][]int&#123;</span><br><span class="line">//要走的每一步</span><br><span class="line">steps := make([][]int, len(maze))</span><br><span class="line">for i := range steps &#123;</span><br><span class="line">steps[i] = make([]int, len(maze[i]))</span><br><span class="line">&#125;</span><br><span class="line">//将起点放入队列当中</span><br><span class="line">Q := []point&#123;start&#125;</span><br><span class="line"></span><br><span class="line">for len(Q) &gt; 0 &#123;</span><br><span class="line">//取出队列中当前的位置作为要探索的点</span><br><span class="line">cur := Q[0]</span><br><span class="line">Q = Q[1:]</span><br><span class="line">//判断当前探索点是否是终点</span><br><span class="line">if cur == end &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">for _, dir := range dirs &#123;</span><br><span class="line">next := cur.add(dir)</span><br><span class="line">//如果越界或者撞墙,继续探索</span><br><span class="line">val, ok := next.at(maze)</span><br><span class="line">if !ok || val == 1 &#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">//如果当前有值说明已经有值了，继续探索</span><br><span class="line">val, ok = next.at(steps)</span><br><span class="line">if !ok || val != 0 &#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">//如果当前点在起点继续探索</span><br><span class="line">if next == start &#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">//探索(需要做的事：1.探索到的下一步填上是第几步2.将探索到的下一步加入到队列)</span><br><span class="line">curSteps, _ := cur.at(steps)</span><br><span class="line">steps[next.i][next.j] = curSteps + 1</span><br><span class="line">Q = append(Q, next)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return steps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">maze := readMaze(&quot;maze/maze.in&quot;)</span><br><span class="line">fmt.Println(&quot;print maze&quot;)</span><br><span class="line">fmt.Println(&quot;-----------------------&quot;)</span><br><span class="line">//打印读取出来的数据</span><br><span class="line">for _, row := range maze &#123;</span><br><span class="line">for _, val := range row &#123;</span><br><span class="line">fmt.Printf(&quot;%d &quot;, val)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;-----------------------&quot;)</span><br><span class="line">fmt.Println(&quot;print steps&quot;)</span><br><span class="line">fmt.Println(&quot;-----------------------&quot;)</span><br><span class="line">//走迷宫</span><br><span class="line">steps := walk(maze, point&#123;0, 0&#125;, point&#123;len(maze) - 1, len(maze[0]) - 1&#125;)</span><br><span class="line">for _,row := range steps &#123;</span><br><span class="line">for _, val := range row &#123;</span><br><span class="line">fmt.Printf(&quot;%3d &quot;,val)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;-----------------------&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打印结果</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">print maze</span><br><span class="line">-----------------------</span><br><span class="line">0 1 0 0 0 </span><br><span class="line">0 0 0 1 0 </span><br><span class="line">0 1 0 1 0 </span><br><span class="line">1 1 1 0 0 </span><br><span class="line">0 1 0 0 1 </span><br><span class="line">0 1 0 0 0 </span><br><span class="line">-----------------------</span><br><span class="line">print steps</span><br><span class="line">-----------------------</span><br><span class="line">  0   0   4   5   6 </span><br><span class="line">  1   2   3   0   7 </span><br><span class="line">  2   0   4   0   8 </span><br><span class="line">  0   0   0  10   9 </span><br><span class="line">  0   0  12  11   0 </span><br><span class="line">  0   0  13  12  13 </span><br><span class="line">-----------------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Keepalived实现nginx双机主备或双机热备高可用</title>
      <link href="/2020/11/23/Keepalived%E5%AE%9E%E7%8E%B0nginx%E5%8F%8Cj%E6%9C%BA%E4%B8%BB%E5%A4%87%E6%88%96%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>/2020/11/23/Keepalived%E5%AE%9E%E7%8E%B0nginx%E5%8F%8Cj%E6%9C%BA%E4%B8%BB%E5%A4%87%E6%88%96%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="HA高可用"><a href="#HA高可用" class="headerlink" title="HA高可用"></a>HA高可用</h1><p><img src="/images/img_45.png" alt="HA高可用架构图"></p><h1 id="Keepalived介绍"><a href="#Keepalived介绍" class="headerlink" title="Keepalived介绍"></a>Keepalived介绍</h1><blockquote><p>解决单点故障</p></blockquote><blockquote><p>组件免费</p></blockquote><blockquote><p>可以实现高可用HA机制</p></blockquote><blockquote><p>基于VRRP协议</p><blockquote><p>检测nginx状态，发生故障切换到备用机，还可邮件通知管理员。<br>主机修复完成可以通过keepalived自动加入内网，重新成为主机，备用机会让主机继续工作<br>一切过程由keepalived处理，人工干预的只有修复出故障的nginx节点</p></blockquote></blockquote><h2 id="VRRP协议"><a href="#VRRP协议" class="headerlink" title="VRRP协议"></a>VRRP协议</h2><blockquote><p>Virtual Router Redundance Protocol（虚拟路由冗余协议）</p></blockquote><blockquote><p>解决内网单机故障的路由协议</p></blockquote><blockquote><p>构建有多个路由器 MASTER BACKUP</p></blockquote><blockquote><p>虚拟IP - VIP （Virtual IP Address）</p></blockquote><h2 id="keepalive双机主备原理"><a href="#keepalive双机主备原理" class="headerlink" title="keepalive双机主备原理"></a>keepalive双机主备原理</h2><p><img src="/images/img_46.png" alt="KeepAlived双机主备原理"></p><blockquote><p>用户请求虚拟ip虚拟ip与nginx绑定到一起。</p></blockquote><blockquote><p>由于keepalived会进行心跳检测nginx挂了后虚拟ip会与我们的备用nginx绑定到一起。</p></blockquote><blockquote><p>主备节点配置需要保持一致}（如果备用节点机器配置低于主节点机器可能发生瞬间宕机的情况）</p></blockquote><h1 id="安装Keepalived"><a href="#安装Keepalived" class="headerlink" title="安装Keepalived"></a>安装Keepalived</h1><blockquote><p>安装libnl/libnl-3依赖</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libnl libnl-devel</span><br></pre></td></tr></table></figure><blockquote><p>打开<a href="https://www.keepalived.org/" target="_blank" rel="noopener">keepalived官网</a>选择download选择响应的版本进行下载并上传到服务器。</p></blockquote><blockquote><p>解压安装包</p></blockquote><blockquote><p>进入目录执行命令进行配置生成配置文件</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/keepalived --sysconf=/etc</span><br></pre></td></tr></table></figure><blockquote><p>各个参数代表的含义</p></blockquote><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>–prefix</td><td>指定keepalived安装位置</td></tr><tr><td>–sysconf</td><td>核心配置文件路径(要是不设置到这个目录下面的话后面日志会报一个错在/etc目录下找不到keepalived,核心配置文件路径为/etc/keepalived/keepalived.conf)</td></tr></tbody></table><h1 id="修改核心配置文件"><a href="#修改核心配置文件" class="headerlink" title="修改核心配置文件"></a>修改核心配置文件</h1><blockquote><p>主节点配置文件</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    # 路由id：当前安装keepalived的节点主机标识符，保证全局唯一</span><br><span class="line">    router_id keep_001</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    # 表示状态是MASTER主机还是备用机BACKUP</span><br><span class="line">    state MASTER</span><br><span class="line">    # 该实例绑定的网卡（可以使用 ip addr 执行查看）</span><br><span class="line">    interface ens33</span><br><span class="line">    # 虚拟路由Id，保证主备节点一致即可</span><br><span class="line">    virtual_router_id 101</span><br><span class="line">    # 权重，master权重一般高于backup，如果有多个，那就是选举，谁的权重高，谁就当选</span><br><span class="line">    priority 100</span><br><span class="line">    # 主备之间同步检查时间间隔，单位秒</span><br><span class="line">    advert_int 1</span><br><span class="line">    # 认证权限密码，防止非法节点进入</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    # 虚拟出来的ip，可以有多个（vip）</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.88.88</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备用节点配置文件</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    # 路由id：当前安装keepalived的节点主机标识符，保证全局唯一</span><br><span class="line">    router_id keep_002</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    # 表示状态是MASTER主机还是备用机BACKUP</span><br><span class="line">    state BACKUP</span><br><span class="line">    # 该实例绑定的网卡（可以使用 ip addr 执行查看）</span><br><span class="line">    interface ens33</span><br><span class="line">    # 虚拟路由Id，保证主备节点一致即可</span><br><span class="line">    virtual_router_id 101</span><br><span class="line">    # 权重，master权重一般高于backup，如果有多个，那就是选举，谁的权重高，谁就当选</span><br><span class="line">    priority 80</span><br><span class="line">    # 主备之间同步检查时间间隔，单位秒</span><br><span class="line">    advert_int 1</span><br><span class="line">    # 认证权限密码，防止非法节点进入</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    # 虚拟出来的ip，可以有多个（vip）</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.88.88</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux添加定时任务</title>
      <link href="/2020/11/13/linux%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/11/13/linux%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="安装定时任务"><a href="#安装定时任务" class="headerlink" title="安装定时任务"></a>安装定时任务</h1><ul><li>安装定时任务(centos6或centos7已经子弹)</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install crontabs</span><br></pre></td></tr></table></figure><h1 id="查看当前已经存在的定时任务"><a href="#查看当前已经存在的定时任务" class="headerlink" title="查看当前已经存在的定时任务"></a>查看当前已经存在的定时任务</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h1 id="编辑定时任务"><a href="#编辑定时任务" class="headerlink" title="编辑定时任务"></a>编辑定时任务</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><h1 id="编辑并添加一行新的任务"><a href="#编辑并添加一行新的任务" class="headerlink" title="编辑并添加一行新的任务"></a>编辑并添加一行新的任务</h1><ul><li>前面是表达式,后面是要定时执行的脚本<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /usr/local/nginx/sbin/cut_my_log.sh</span><br></pre></td></tr></table></figure></li></ul><h1 id="重启定时任务"><a href="#重启定时任务" class="headerlink" title="重启定时任务"></a>重启定时任务</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond restart</span><br></pre></td></tr></table></figure><h1 id="定时任务常用命令"><a href="#定时任务常用命令" class="headerlink" title="定时任务常用命令"></a>定时任务常用命令</h1><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>service crond restart</td><td>启动服务</td></tr><tr><td>service crond stop</td><td>关闭服务</td></tr><tr><td>service crond restart</td><td>重启服务</td></tr><tr><td>service crond reload</td><td>重新载入配置</td></tr><tr><td>crontab -e</td><td>编辑任务</td></tr><tr><td>crontab -l</td><td>查看任务列表</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx核心配置及进程事件模型</title>
      <link href="/2020/11/12/Nginx%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%9B%E7%A8%8B%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/11/12/Nginx%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%9B%E7%A8%8B%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx默认配置文件"><a href="#nginx默认配置文件" class="headerlink" title="nginx默认配置文件"></a>nginx默认配置文件</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">#user可以配置文件目录访问的用户</span><br><span class="line">#user  nobody;</span><br><span class="line"># worker_processes可以指定工作进程的数量</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#事件处理</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;#默认使用epoll</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">    #每个worker工作进程允许连接客户端的最大连接数（可以配置）</span><br><span class="line">    #nginx之所以能处理高并发就是因为这里及nginx的事件处理模型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #include包含导入外部文件（mime.types在config目录下，包含了平时请求包含的类型），提高可读性</span><br><span class="line">    #我们自己通过include导入server配置也是没有问题的(导入配置一定要记得加分号)</span><br><span class="line">    include       mime.types;</span><br><span class="line">    #默认的type类型</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #日志格式的配置（默认自带日志格式不需要配置/如果需要定制化日志格式可以对其进行配置）</span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    </span><br><span class="line">    #http请求日志路径，同时代表我们nginx的性能也得到了提升</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">    #打开sendfile可开启文件的高效传输</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #开启sendfile才可以开启tcp_nopush,表示数据包累积到一定大小过后再开始发送，提升文件传输的效率（类比外卖小哥打包送餐放到集装箱提高工作效率）/不开启则使用同步阻塞的方式，效率是极其低下的。</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout客户端连接服务器的超时时间（以秒为单位），每个客户端连接服务器可以保持连接的时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    #内容传输进行压缩，节约服务器带宽的开销，不过压缩肯定会消耗服务器的性能</span><br><span class="line">    #gzip  on;</span><br><span class="line">    </span><br><span class="line">    #限制最小压缩，文件内容小于1个字节就不会对其进行压缩</span><br><span class="line">    #gzip_min_length 1;</span><br><span class="line">    </span><br><span class="line">    #定义压缩的级别（压缩比，文件越大，压缩越多，但是cpu消耗就更多）</span><br><span class="line">    #gzip_min_lenght 3;</span><br><span class="line">    </span><br><span class="line">    #定义压缩文件的类型</span><br><span class="line">    #gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/json</span><br><span class="line"></span><br><span class="line">    #为虚拟主机配置监听信息（可以配置多块）</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听的端口号</span><br><span class="line">        listen       80;</span><br><span class="line">        #服务器名称（可以是备案过后域名或ip或者是localhost）</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        #路由，找到对应的页面</span><br><span class="line">        location / &#123;</span><br><span class="line">            #资源路径（可以是绝对路径也可以是相对路径，这里是相对路径）</span><br><span class="line">            root   html;</span><br><span class="line">            #根路径默认访问的资源</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #错误页面展示</span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        #发生50x错误的时候重定向到相关错误页面</span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">        #以上配置多个资源路径</span><br><span class="line">        </span><br><span class="line">        #以别名形式配置路径(隐藏真实资源路径)</span><br><span class="line">        #location /resource &#123;</span><br><span class="line">        #    #将资源路径resource映射到/xxx/xxx/xxx/resource路径下</span><br><span class="line">        #    alias /xxx/xxx/xxx/resource;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    #配置上游服务器</span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        #默认使用轮询策略，添加weight根据权重选择执行的机器</span><br><span class="line">        server 192.168.1.101:8080 weight=1;</span><br><span class="line">        server 192.168.1.102:8080;</span><br><span class="line">        server 192.168.1.103:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line">    #允许跨域请求的域，*代表所有</span><br><span class="line">    #    add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class="line">    #允许带上cookie请求</span><br><span class="line">    #    add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">    #允许请求的方法get/post/put/delete</span><br><span class="line">    #    add_header &apos;Access-Control-Allow-Method&apos; *;</span><br><span class="line">    #允许请求的header</span><br><span class="line">    #    add_header &apos;Access-Control-Allow-Header&apos; *;</span><br><span class="line">    #对源站点验证(静态资源防盗链)</span><br><span class="line">    #valid_referers *.xxx.com;</span><br><span class="line">    #if($invalid_refer) &#123;</span><br><span class="line">    #    return 404;</span><br><span class="line">    #&#125;</span><br><span class="line">    #    add_header &apos;Access-Control-Allow-Header&apos; *;</span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #        #静态资源访问缓存过期时间，文件发生更改也会不使用缓存。</span><br><span class="line">    #        expires 10s;</span><br><span class="line">    #        #指定缓存过期时间为22点30分</span><br><span class="line">    #        expires @22h30m</span><br><span class="line">    #        #缓存在1个小时之前已经过期</span><br><span class="line">    #        expires -1h</span><br><span class="line">    #        #不设置缓存</span><br><span class="line">    #        expires epoch</span><br><span class="line">    #        #关闭nginx缓存（默认），浏览器还是有缓存机制</span><br><span class="line">    #        expires off</span><br><span class="line">    #        #最大过期时间（相当于永不过期）</span><br><span class="line">    #        expires max</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx配置结构"><a href="#nginx配置结构" class="headerlink" title="nginx配置结构"></a>nginx配置结构</h1><p><img src="/images/QQDVHSPWSN.png" alt="nginx配置结构"></p><h1 id="校验nginx配置文件是否正确"><a href="#校验nginx配置文件是否正确" class="headerlink" title="校验nginx配置文件是否正确"></a>校验nginx配置文件是否正确</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -t</span><br></pre></td></tr></table></figure><h1 id="修改配置文件过后需要重新装载nginx"><a href="#修改配置文件过后需要重新装载nginx" class="headerlink" title="修改配置文件过后需要重新装载nginx"></a>修改配置文件过后需要重新装载nginx</h1><ul><li>重新装载nginx的命令如下</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><h1 id="Nginx进程模型"><a href="#Nginx进程模型" class="headerlink" title="Nginx进程模型"></a>Nginx进程模型</h1><h2 id="查看nginx进程"><a href="#查看nginx进程" class="headerlink" title="查看nginx进程"></a>查看nginx进程</h2><ul><li>查看nginx进程命令</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><ul><li>命令执行结果</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root       4640      1  0 13:59 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody     4641   4640  0 13:59 ?        00:00:00 nginx: worker process</span><br><span class="line">root       4723   4668  0 15:22 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>根据命令执行结果我们可以看到一共是有两个nginx的进程，第1个是nginx:master主进程，第2个是nginx:worker工作进程，实际上我们是可以通过配置文件指定nginx:worker的工作进程的数量的，配置文件属性如下。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;#指定工作进程的数量</span><br></pre></td></tr></table></figure><h2 id="nginx进程模型"><a href="#nginx进程模型" class="headerlink" title="nginx进程模型"></a>nginx进程模型</h2><ul><li><p>nginx:master进程是主进程，对nginx:worker进程进行管理</p></li><li><p>nginx:worker进程是工作进程，为nginx:master进程服务</p></li><li><p>nginx:master会发送信号给nginx:worker进程，实例信号指令如下</p></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line">./nginx -t</span><br></pre></td></tr></table></figure><p>//todo多看看nginx的进程模型及nginx抢占机制这块知识<br><img src="/images/WGMHZNCTSG.png" alt="nginx进程模型"></p><h1 id="nginx事件处理模型"><a href="#nginx事件处理模型" class="headerlink" title="nginx事件处理模型"></a>nginx事件处理模型</h1><ul><li>nginx事件处理模型类似于多路复用</li></ul><p><img src="/images/YSGFWLTNXZI.png" alt="nginx事件处理模型"></p><h1 id="nginx常见的问题"><a href="#nginx常见的问题" class="headerlink" title="nginx常见的问题"></a>nginx常见的问题</h1><h2 id="open-“-XXX-XXX-nginx-pid”-failed-2-No-such-file-or-directory"><a href="#open-“-XXX-XXX-nginx-pid”-failed-2-No-such-file-or-directory" class="headerlink" title="open “/XXX/XXX/nginx.pid” failed (2: No such file or directory)"></a>open “/XXX/XXX/nginx.pid” failed (2: No such file or directory)</h2><ul><li>首先进入pid目录</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /XXX/XXX</span><br></pre></td></tr></table></figure><ul><li>如果提示cd: /XXX/XXX：没有哪个文件或目录，创建目录</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /XXX/XXX</span><br></pre></td></tr></table></figure><h2 id="nginx-error-invalid-PID-number-“”-“in-xxx-xxx-nginx-pid”"><a href="#nginx-error-invalid-PID-number-“”-“in-xxx-xxx-nginx-pid”" class="headerlink" title="nginx:[error] invalid PID number “” “in /xxx/xxx/nginx.pid”"></a>nginx:[error] invalid PID number “” “in /xxx/xxx/nginx.pid”</h2><ul><li><p>该错误告诉我们这个pid无效，我们只需要重新指定一下nginx的配置文件</p></li><li><p>首先查看nginx的帮助命令,在nginx安装目录下的sbin目录下执行</p></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -h</span><br></pre></td></tr></table></figure><ul><li>命令结果</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  //-c查看帮助</span><br><span class="line">  -?,-h         : this help</span><br><span class="line">  //查看版本</span><br><span class="line">  -v            : show version and exit</span><br><span class="line">  //版本及具体编译安装环境配置参数</span><br><span class="line">  -V            : show version and configure options then exit</span><br><span class="line">  //校验配置文件是否正确</span><br><span class="line">  -t            : test configuration and exit</span><br><span class="line">  -T            : test configuration, dump it and exit</span><br><span class="line">  -q            : suppress non-error messages during configuration testing</span><br><span class="line">  //发送信号给nginx:master进程，stop停止/quit优雅停止/reopen重新打开/reload重新装载</span><br><span class="line">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class="line">  //nginx安装路径</span><br><span class="line">  -p prefix     : set prefix path (default: /usr/local/nginx/)</span><br><span class="line">  //-c指定配置文件路径</span><br><span class="line">  -c filename   : set configuration file (default: conf/nginx.conf)</span><br><span class="line">  -g directives : set global directives out of configuration file</span><br></pre></td></tr></table></figure><ul><li>执行命令</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -c /.../conf/nginx.conf</span><br></pre></td></tr></table></figure><h1 id="nginx日志切割"><a href="#nginx日志切割" class="headerlink" title="nginx日志切割"></a>nginx日志切割</h1><ul><li>随着时间的推移项目日志越大，达到10GB甚至几十GB，不便于日志分析，我们需要对日志进行切割</li></ul><h2 id="手动切割日志的脚本"><a href="#手动切割日志的脚本" class="headerlink" title="手动切割日志的脚本"></a>手动切割日志的脚本</h2><ul><li>创建一个可执行的shell脚本：cut_my_log.sh，内容如下：</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">LOG_PATH=&quot;/var/log/nginx&quot;</span><br><span class="line">RECORD_TIME=$(date -d &quot;yesterday&quot; +%Y-%m-%d+%H:%M)</span><br><span class="line">PID=/var/run/nginx/nginx.pid</span><br><span class="line">mv $&#123;LOG_PATH&#125;/access.log $&#123;LOG_PATH&#125;/access.$&#123;RECORD_TIME&#125;.log</span><br><span class="line">mv $&#123;LOG_PATH&#125;/error.log $&#123;LOG_PATH&#125;/access.$&#123;RECORD_TIME&#125;.log</span><br><span class="line">#向nginx:master进程发送信号，用于重新打开日志文件</span><br><span class="line">kill -USR1 `cat $PID`</span><br></pre></td></tr></table></figure><ul><li>为cut_my_log.sh脚本添加执行权限</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x cut_my_log.sh</span><br></pre></td></tr></table></figure><h1 id="nginx匹配规则"><a href="#nginx匹配规则" class="headerlink" title="nginx匹配规则"></a>nginx匹配规则</h1><ul><li><p>location / #路径存在即可访问</p></li><li><p>location = / #精确匹配 （这里只能访问到根）</p></li><li><p>location ~ .(GIF|png|bmp|jpg|jpeg) #正则表达式不带*区分大小写</p></li><li><p>location ~* .(GIF|png|bmp|jpg|jpeg) #正则表达式带*不区分大小写</p></li><li><p>location ^~ /xxx/xxx #不使用正则表达式以/xxx/xxx路径开头</p></li></ul><h1 id="upstream指令参数"><a href="#upstream指令参数" class="headerlink" title="upstream指令参数"></a>upstream指令参数</h1><ul><li>upstream指定参数以key与value的形式配置到ip及端口的后面如下所示</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">     server 192.168.1.101:8080 key=value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指令参数"><a href="#指令参数" class="headerlink" title="指令参数"></a>指令参数</h2><hr><h3 id="max-conns-count-根据服务器性能设置过载保护做限流现作用，每个工作进程都能生效，在1-11-5之前这个参数只适用于商业版本"><a href="#max-conns-count-根据服务器性能设置过载保护做限流现作用，每个工作进程都能生效，在1-11-5之前这个参数只适用于商业版本" class="headerlink" title="max_conns=count (根据服务器性能设置过载保护做限流现作用，每个工作进程都能生效，在1.11.5之前这个参数只适用于商业版本)"></a>max_conns=count (根据服务器性能设置过载保护做限流现作用，每个工作进程都能生效，在1.11.5之前这个参数只适用于商业版本)</h3><hr><h3 id="slow-start-time-服务器恢复过后经过time的时间过后再加入到upstream集群中，商业版nginx中才能使用"><a href="#slow-start-time-服务器恢复过后经过time的时间过后再加入到upstream集群中，商业版nginx中才能使用" class="headerlink" title="slow_start=time(服务器恢复过后经过time的时间过后再加入到upstream集群中，商业版nginx中才能使用)"></a>slow_start=time(服务器恢复过后经过time的时间过后再加入到upstream集群中，商业版nginx中才能使用)</h3><hr><h3 id="down-配置该服务器在集群中标记为不可用状态"><a href="#down-配置该服务器在集群中标记为不可用状态" class="headerlink" title="down 配置该服务器在集群中标记为不可用状态"></a>down 配置该服务器在集群中标记为不可用状态</h3><hr><h3 id="back-标记该服务是一台备用机，集群中其它服务器不可用的时候会启动该台服务器进行备用"><a href="#back-标记该服务是一台备用机，集群中其它服务器不可用的时候会启动该台服务器进行备用" class="headerlink" title="back 标记该服务是一台备用机，集群中其它服务器不可用的时候会启动该台服务器进行备用"></a>back 标记该服务是一台备用机，集群中其它服务器不可用的时候会启动该台服务器进行备用</h3><hr><h3 id="max-fails-count最大失败次数"><a href="#max-fails-count最大失败次数" class="headerlink" title="max_fails=count最大失败次数"></a>max_fails=count最大失败次数</h3><h3 id="fail-time-out-time"><a href="#fail-time-out-time" class="headerlink" title="fail_time_out=time"></a>fail_time_out=time</h3><h3 id="以上两个参数连用表示time时间内失败次数超过count就会将服务踢出upstream集群中，15s后再尝试请求是否正常如此往复"><a href="#以上两个参数连用表示time时间内失败次数超过count就会将服务踢出upstream集群中，15s后再尝试请求是否正常如此往复" class="headerlink" title="以上两个参数连用表示time时间内失败次数超过count就会将服务踢出upstream集群中，15s后再尝试请求是否正常如此往复"></a>以上两个参数连用表示time时间内失败次数超过count就会将服务踢出upstream集群中，15s后再尝试请求是否正常如此往复</h3><hr><h1 id="keepalive-count提高吞吐量"><a href="#keepalive-count提高吞吐量" class="headerlink" title="keepalive=count提高吞吐量"></a>keepalive=count提高吞吐量</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">server 192.168.1.101:8080;</span><br><span class="line">#保持长连接的数量</span><br><span class="line">keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen80;</span><br><span class="line">server_namewww.tomcats.com;</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://tomcats;</span><br><span class="line">#协议版本号http1.1才支持保持长连接避免服务经常创建关闭消耗服务器资源</span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line">#清除collection中的信息</span><br><span class="line">proxy_set_header Connection &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ip-hash-ip地址取模请求打到固定的服务器上面"><a href="#ip-hash-ip地址取模请求打到固定的服务器上面" class="headerlink" title="ip_hash ip地址取模请求打到固定的服务器上面"></a>ip_hash ip地址取模请求打到固定的服务器上面</h1><ul><li><p>配置方式如下即可</p></li><li><p>不同ip的客户端会会固定的请求到不同的固定服务器</p></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">#ip_hash根据请求的ip地址与集群中服务器的数量进行求模操作</span><br><span class="line">ip_hash;</span><br><span class="line">server 192.168.1.101:8080;</span><br><span class="line">server 192.168.1.102:8080;</span><br><span class="line">server 192.168.1.103:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ip-hash在nginx源码中的算法"><a href="#ip-hash在nginx源码中的算法" class="headerlink" title="ip_hash在nginx源码中的算法"></a>ip_hash在nginx源码中的算法</h2><ul><li><p>ip_hash源码在安装包内/src/http/modules/ngx_http_upstream_ip_hash_module.c文件中</p></li><li><p>源码中通过”.”对ip进行切割的数组长度为4，索引为0~3，取索引2进行取模，所以在本地内网环境访问服务器的时候看不出来不同的ip打到了相同的服务器</p><h2 id="ip-hash注意"><a href="#ip-hash注意" class="headerlink" title="ip_hash注意"></a>ip_hash注意</h2></li><li><p>使用ip_hash的时候如果其中一台服务器出现了问题我们需要移除不能在upstrem中直接删除，否则hash的值会发生改变，请求的服务器就会发生改变，我们应该将服务器标记为down不被请求。</p></li></ul><h2 id="ip-hash带来的问题"><a href="#ip-hash带来的问题" class="headerlink" title="ip_hash带来的问题"></a>ip_hash带来的问题</h2><ul><li>如果服务器数量发生变化，无论是新增或者减少都会导致hash算法算出来的值发生变化，会话丢失，缓存无法访问等问题。</li></ul><h1 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h1><ul><li>一致性哈希算法是将用户哈希到这个环上，相同的用户在访问的主机不会发生变化，只有当主机节点数量发生变化的时候才会有少量的用户主机请求的服务器发生变化,保证大部分用户请求的主机不会发生变化。</li></ul><h2 id="原有的服务器及用户状态"><a href="#原有的服务器及用户状态" class="headerlink" title="原有的服务器及用户状态"></a>原有的服务器及用户状态</h2><p><img src="/images/img_2.png" alt="原有节点及用户状态"></p><h2 id="服务器数量减少"><a href="#服务器数量减少" class="headerlink" title="服务器数量减少"></a>服务器数量减少</h2><p><img src="/images/img_3.png" alt="服务器数量减少"></p><ul><li>图中节点3移除了，原有访问节点3的2个少量用户转移到了节点4，其余节点上的用户访问的服务器不发生变化</li></ul><h2 id="假如说要增加服务器"><a href="#假如说要增加服务器" class="headerlink" title="假如说要增加服务器"></a>假如说要增加服务器</h2><p><img src="/images/img_4.png" alt="服务器数量增加"></p><ul><li>图中我们看出服务器数量增加只有一个用户变更了服务器的请求地址，其余用户不发生改变。</li></ul><h1 id="Nginx负载均衡算法有哪些"><a href="#Nginx负载均衡算法有哪些" class="headerlink" title="Nginx负载均衡算法有哪些"></a>Nginx负载均衡算法有哪些</h1><ul><li><p>nginx默认使用轮询算法。</p></li><li><p>ip_hash根据请求客户端的ip进行哈希请求到固定的服务器。</p></li><li><p>url_hash根据url地址进行hash请求到固定的服务器。</p></li><li><p>least_conn哪台服务器的连接数少就连接到哪一台服务器</p></li></ul><h1 id="配置nginx静态资源文件缓存过期时间"><a href="#配置nginx静态资源文件缓存过期时间" class="headerlink" title="配置nginx静态资源文件缓存过期时间"></a>配置nginx静态资源文件缓存过期时间</h1><ul><li>在nginx配置结构中的http层进行配置</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path /usr/local/nginx/upstream_cache keys_zone=mycache:5m max_size=1g inactive=30s use_temp_path=off;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen80;</span><br><span class="line">server_namewww.tomcats.com;</span><br><span class="line"></span><br><span class="line">#静态资源开启并且使用缓存</span><br><span class="line">proxy_cache mycache;</span><br><span class="line">#针对200和304状态码的缓存设置过期时间为8h</span><br><span class="line">proxy_cache_valid200 304 8h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>proxy_cache_path 设置缓存保存的目录</p></li><li><p>/usr/local/nginx/upstream_cache是定义的保存缓存的路径</p></li><li><p>keys_zone 设置共享内存一级占用空间的大小</p></li><li><p>max_size 设置缓存大小</p></li><li><p>inactive 超过此时间缓存自动清理</p></li><li><p>use_temp_path 关闭临时目录</p></li></ul><h1 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h1><h2 id="什么是动静分离？"><a href="#什么是动静分离？" class="headerlink" title="什么是动静分离？"></a>什么是动静分离？</h2><blockquote><p>动静分离本质是将前端静态资源与我们后端服务的接口分开减小后端服务器的压力，提高静态资源的访问速度（静态资源可以是被缓存的访问起来更快，后端不需要渲染页面）</p></blockquote><blockquote><p>静态数据：css/js/html/images/audios/videos/…</p></blockquote><blockquote><p>动态数据：后端接口，不同时间得到的响应可能不同</p></blockquote><h2 id="动静分离的特点"><a href="#动静分离的特点" class="headerlink" title="动静分离的特点"></a>动静分离的特点</h2><blockquote><p>分布式</p></blockquote><blockquote><p>前后端接口</p></blockquote><blockquote><p>静态归nginx</p></blockquote><blockquote><p>接口服务化</p></blockquote><h2 id="动静分离实现方式"><a href="#动静分离实现方式" class="headerlink" title="动静分离实现方式"></a>动静分离实现方式</h2><blockquote><p>使用cdn加速</p></blockquote><p><img src="/images/img_42.png" alt="cdm加速"></p><blockquote><p>使用nginx实现动静分离</p></blockquote><p><img src="/images/img_43.png" alt="nginx"></p><h1 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h1><blockquote><p>nginx配置管理工具<a href="http://www.nginxwebui.cn/" target="_blank" rel="noopener">nginxWebUI</a></p></blockquote><blockquote><p>自建ngrok，从此抛弃花生壳<a href="https://www.vediotalk.com/archives/336" target="_blank" rel="noopener">教程地址</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Nginx</title>
      <link href="/2020/11/12/CentOS%E5%AE%89%E8%A3%85Nginx/"/>
      <url>/2020/11/12/CentOS%E5%AE%89%E8%A3%85Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="下载并上传nginx安装包到linux"><a href="#下载并上传nginx安装包到linux" class="headerlink" title="下载并上传nginx安装包到linux"></a>下载并上传nginx安装包到linux</h1><h1 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h1><ul><li>安装gcc环境</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc-c++</span><br></pre></td></tr></table></figure><ul><li>安装pcre库用于正则表达式</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><ul><li>zlib压缩和解压缩依赖</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><ul><li>ssl安全的加密的套接字协议，用与HTTP的安全传输，也就是https</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><h1 id="解压nginx"><a href="#解压nginx" class="headerlink" title="解压nginx"></a>解压nginx</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure><h1 id="创建nginx临时目录"><a href="#创建nginx临时目录" class="headerlink" title="创建nginx临时目录"></a>创建nginx临时目录</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/temp/nginx -p</span><br></pre></td></tr></table></figure><h1 id="在nginx目录下输入如下命令进行配置，目的是为了创建makefile文件"><a href="#在nginx目录下输入如下命令进行配置，目的是为了创建makefile文件" class="headerlink" title="在nginx目录下输入如下命令进行配置，目的是为了创建makefile文件"></a>在nginx目录下输入如下命令进行配置，目的是为了创建makefile文件</h1><ul><li>参数命令</li></ul><p>在安装包解压目录下复制如下命令直接生成makefile文件</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</span><br><span class="line">--with-http_ssl_module</span><br></pre></td></tr></table></figure><ul><li>各个参数代表的含义</li></ul><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>–prefix</td><td>指定nginx安装位置</td></tr><tr><td>–pid-path</td><td>指向nginx的pid</td></tr><tr><td>–lock-path</td><td>锁定安装文件、防止恶意篡改或误操作</td></tr><tr><td>–error-log-path</td><td>错误日志</td></tr><tr><td>–http-log-path</td><td>http日志</td></tr><tr><td>–with-http_gzip_static_module</td><td>启动gzip模块，在线实时压缩数据流</td></tr><tr><td>–http-client-body-temp-path</td><td>设定客户端请求的临时目录</td></tr><tr><td>–http-proxy-temp-path</td><td>设定http代理临时目录</td></tr><tr><td>–http-fastcgi-temp-path</td><td>设定fastcgi临时目录</td></tr><tr><td>–http-uwsgi-temp-path</td><td>设定uwsgi临时目录</td></tr><tr><td>–http-scgi-temp-path</td><td>设定scgi临时目录</td></tr><tr><td>–with-http_ssl_module</td><td>如果要配置ssl域名证书需要安装ssl模块</td></tr></tbody></table><h1 id="查看安装包目录下的objs目录"><a href="#查看安装包目录下的objs目录" class="headerlink" title="查看安装包目录下的objs目录"></a>查看安装包目录下的objs目录</h1><blockquote><p>查看objs目录下的ngx_modules.c，已经包含ssl相关模块内容如下</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;ngx_config.h&gt;</span><br><span class="line">#include &lt;ngx_core.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extern ngx_module_t  ngx_core_module;</span><br><span class="line">extern ngx_module_t  ngx_errlog_module;</span><br><span class="line">extern ngx_module_t  ngx_conf_module;</span><br><span class="line">extern ngx_module_t  ngx_events_module;</span><br><span class="line">extern ngx_module_t  ngx_event_core_module;</span><br><span class="line">extern ngx_module_t  ngx_epoll_module;</span><br><span class="line">extern ngx_module_t  ngx_openssl_module;</span><br><span class="line">extern ngx_module_t  ngx_regex_module;</span><br><span class="line">extern ngx_module_t  ngx_http_module;</span><br><span class="line">extern ngx_module_t  ngx_http_core_module;</span><br><span class="line">extern ngx_module_t  ngx_http_log_module;</span><br><span class="line">extern ngx_module_t  ngx_http_upstream_module;</span><br><span class="line">extern ngx_module_t  ngx_http_static_module;</span><br><span class="line">extern ngx_module_t  ngx_http_gzip_static_module;</span><br><span class="line">extern ngx_module_t  ngx_http_autoindex_module;</span><br><span class="line">extern ngx_module_t  ngx_http_index_module;</span><br><span class="line">extern ngx_module_t  ngx_http_auth_basic_module;</span><br><span class="line">extern ngx_module_t  ngx_http_access_module;</span><br><span class="line">extern ngx_module_t  ngx_http_limit_conn_module;</span><br><span class="line">extern ngx_module_t  ngx_http_limit_req_module;</span><br><span class="line">extern ngx_module_t  ngx_http_geo_module;</span><br><span class="line">extern ngx_module_t  ngx_http_map_module;</span><br><span class="line">extern ngx_module_t  ngx_http_split_clients_module;</span><br><span class="line">extern ngx_module_t  ngx_http_referer_module;</span><br><span class="line">extern ngx_module_t  ngx_http_rewrite_module;</span><br><span class="line">extern ngx_module_t  ngx_http_ssl_module;</span><br><span class="line">extern ngx_module_t  ngx_http_proxy_module;</span><br><span class="line">extern ngx_module_t  ngx_http_fastcgi_module;</span><br><span class="line">extern ngx_module_t  ngx_http_uwsgi_module;</span><br><span class="line">extern ngx_module_t  ngx_http_scgi_module;</span><br><span class="line">extern ngx_module_t  ngx_http_memcached_module;</span><br><span class="line">extern ngx_module_t  ngx_http_empty_gif_module;</span><br><span class="line">extern ngx_module_t  ngx_http_browser_module;</span><br><span class="line">extern ngx_module_t  ngx_http_upstream_hash_module;</span><br><span class="line">extern ngx_module_t  ngx_http_upstream_ip_hash_module;</span><br><span class="line">extern ngx_module_t  ngx_http_upstream_least_conn_module;</span><br><span class="line">extern ngx_module_t  ngx_http_upstream_keepalive_module;</span><br><span class="line">extern ngx_module_t  ngx_http_upstream_zone_module;</span><br><span class="line">extern ngx_module_t  ngx_http_write_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_header_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_chunked_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_range_header_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_gzip_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_postpone_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_ssi_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_charset_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_userid_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_headers_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_copy_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_range_body_filter_module;</span><br><span class="line">extern ngx_module_t  ngx_http_not_modified_filter_module;</span><br><span class="line"></span><br><span class="line">ngx_module_t *ngx_modules[] = &#123;</span><br><span class="line">    &amp;ngx_core_module,</span><br><span class="line">    &amp;ngx_errlog_module,</span><br><span class="line">    &amp;ngx_conf_module,</span><br><span class="line">    &amp;ngx_events_module,</span><br><span class="line">    &amp;ngx_event_core_module,</span><br><span class="line">    &amp;ngx_epoll_module,</span><br><span class="line">    &amp;ngx_openssl_module,</span><br><span class="line">    &amp;ngx_regex_module,</span><br><span class="line">    &amp;ngx_http_module,</span><br><span class="line">    &amp;ngx_http_core_module,</span><br><span class="line">    &amp;ngx_epoll_module,</span><br><span class="line">    &amp;ngx_openssl_module,</span><br><span class="line">    &amp;ngx_regex_module,</span><br><span class="line">    &amp;ngx_http_module,</span><br><span class="line">    &amp;ngx_http_core_module,</span><br><span class="line">    &amp;ngx_http_log_module,</span><br><span class="line">    &amp;ngx_http_upstream_module,</span><br><span class="line">    &amp;ngx_http_static_module,</span><br><span class="line">    &amp;ngx_http_gzip_static_module,</span><br><span class="line">    &amp;ngx_http_autoindex_module,</span><br><span class="line">    &amp;ngx_http_index_module,</span><br><span class="line">    &amp;ngx_http_auth_basic_module,</span><br><span class="line">    &amp;ngx_http_access_module,</span><br><span class="line">    &amp;ngx_http_limit_conn_module,</span><br><span class="line">    &amp;ngx_http_limit_req_module,</span><br><span class="line">    &amp;ngx_http_geo_module,</span><br><span class="line">    &amp;ngx_http_map_module,</span><br><span class="line">    &amp;ngx_http_split_clients_module,</span><br><span class="line">    &amp;ngx_http_referer_module,</span><br><span class="line">    &amp;ngx_http_rewrite_module,</span><br><span class="line">    &amp;ngx_http_ssl_module,</span><br><span class="line">    &amp;ngx_http_proxy_module,</span><br><span class="line">    &amp;ngx_http_fastcgi_module,</span><br><span class="line">    &amp;ngx_http_uwsgi_module,</span><br><span class="line">    &amp;ngx_http_scgi_module,</span><br><span class="line">    &amp;ngx_http_memcached_module,</span><br><span class="line">    &amp;ngx_http_empty_gif_module,</span><br><span class="line">    &amp;ngx_http_browser_module,</span><br><span class="line">    &amp;ngx_http_upstream_hash_module,</span><br><span class="line">    &amp;ngx_http_upstream_ip_hash_module,</span><br><span class="line">    &amp;ngx_http_upstream_least_conn_module,</span><br><span class="line">    &amp;ngx_http_upstream_keepalive_module,</span><br><span class="line">    &amp;ngx_http_upstream_zone_module,</span><br><span class="line">    &amp;ngx_http_write_filter_module,</span><br><span class="line">    &amp;ngx_http_header_filter_module,</span><br><span class="line">    &amp;ngx_http_chunked_filter_module,</span><br><span class="line">    &amp;ngx_http_range_header_filter_module,</span><br><span class="line">    &amp;ngx_http_gzip_filter_module,</span><br><span class="line">    &amp;ngx_http_postpone_filter_module,</span><br><span class="line">    &amp;ngx_http_ssi_filter_module,</span><br><span class="line">    &amp;ngx_http_charset_filter_module,</span><br><span class="line">    &amp;ngx_http_userid_filter_module,</span><br><span class="line">    &amp;ngx_http_headers_filter_module,</span><br><span class="line">    &amp;ngx_http_copy_filter_module,</span><br><span class="line">    &amp;ngx_http_range_body_filter_module,</span><br><span class="line">    &amp;ngx_http_not_modified_filter_module,</span><br><span class="line">    NULL</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="通过Makefile进行编译"><a href="#通过Makefile进行编译" class="headerlink" title="通过Makefile进行编译"></a>通过Makefile进行编译</h1><ul><li>在安装包解压目录下直接执行如下命令</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><h1 id="查看nginx安装目录"><a href="#查看nginx安装目录" class="headerlink" title="查看nginx安装目录"></a>查看nginx安装目录</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><h1 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><h1 id="停止nginx"><a href="#停止nginx" class="headerlink" title="停止nginx"></a>停止nginx</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><p>如果在云服务器安装需要开启默认的nginx端口：80</p></li><li><p>如果在虚拟机安装，需要关闭防火墙</p></li><li><p>本地win或mac需要关闭防火墙</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring的7种事物的传播行为</title>
      <link href="/2020/11/07/spring%E7%9A%847%E7%A7%8D%E4%BA%8B%E7%89%A9%E7%9A%84%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/"/>
      <url>/2020/11/07/spring%E7%9A%847%E7%A7%8D%E4%BA%8B%E7%89%A9%E7%9A%84%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Transaction注解"><a href="#Transaction注解" class="headerlink" title="@Transaction注解"></a>@Transaction注解</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Inherited</span><br><span class="line">@Documented</span><br><span class="line">public @interface Transactional &#123;</span><br><span class="line">//与value互为别名(互为别名的属性值必须设置默认值；互为别名不能同时设置)</span><br><span class="line">@AliasFor(&quot;transactionManager&quot;)</span><br><span class="line">String value() default &quot;&quot;;</span><br><span class="line">@AliasFor(&quot;value&quot;)</span><br><span class="line">String transactionManager() default &quot;&quot;;</span><br><span class="line">    </span><br><span class="line">//事物传播行为(默认值Propagation.REQUIRED如果有事务, 那么加入事务, 没有的话新建一个)</span><br><span class="line">Propagation propagation() default Propagation.REQUIRED;</span><br><span class="line">   </span><br><span class="line">//事物隔离级别</span><br><span class="line">Isolation isolation() default Isolation.DEFAULT;</span><br><span class="line">   </span><br><span class="line">//事物超时设置</span><br><span class="line">int timeout() default TransactionDefinition.TIMEOUT_DEFAULT;</span><br><span class="line">   </span><br><span class="line">//设置当前事物是否为只读事物</span><br><span class="line">boolean readOnly() default false;</span><br><span class="line">   </span><br><span class="line">//当方法中抛出指定异常数组中的异常时，则进行事务回滚</span><br><span class="line">//@Transactional(rollbackFor=&#123;RuntimeException.class, Exception.class&#125;)</span><br><span class="line">Class&lt;? extends Throwable&gt;[] rollbackFor() default &#123;&#125;;</span><br><span class="line">   </span><br><span class="line">//当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。</span><br><span class="line">//@Transactional(rollbackForClassName=&#123;&quot;RuntimeException&quot;,&quot;Exception&quot;&#125;)</span><br><span class="line">String[] rollbackForClassName() default &#123;&#125;;</span><br><span class="line">   </span><br><span class="line">//当方法中抛出指定异常数组中的异常时，不进行事务回滚。</span><br><span class="line">//@Transactional(noRollbackFor=&#123;RuntimeException.class, Exception.class&#125;)</span><br><span class="line">Class&lt;? extends Throwable&gt;[] noRollbackFor() default &#123;&#125;;</span><br><span class="line">   </span><br><span class="line">//当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。</span><br><span class="line">//@Transactional(noRollbackForClassName=&#123;&quot;RuntimeException&quot;,&quot;Exception&quot;&#125;)</span><br><span class="line">String[] noRollbackForClassName() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>该注解中的方法Transaction#propagation()说明了事物的传播行为返回的是枚举类型Propagation</p></li><li><p>@Transactional 只能被应用到public方法上否则没有事物功能</p></li><li><p>@Transactional 注解可以被应用于接口定义和接口方法</p></li><li><p>Spring团队的建议是你在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。你当然可以在接口上使用 @Transactional 注解，但是这将只能当你设置了基于接口的代理时它才生效。因为注解是不能继承的，这就意味着如果你正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装（将被确认为严重的）。</p></li></ul><h1 id="事物的传播行为Propagation"><a href="#事物的传播行为Propagation" class="headerlink" title="事物的传播行为Propagation"></a>事物的传播行为Propagation</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Propagation &#123;</span><br><span class="line"><span class="comment">//如果有事务, 那么加入事务, 没有的话新建一个(默认)</span></span><br><span class="line">REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),</span><br><span class="line">    </span><br><span class="line"><span class="comment">//如果当前调用有事物则使用事物，如果当前调用没有事物则不使用事物</span></span><br><span class="line">SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),</span><br><span class="line">   </span><br><span class="line"><span class="comment">//必须在一个已有的事务中执行,否则抛出异常</span></span><br><span class="line">MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),</span><br><span class="line">   </span><br><span class="line"><span class="comment">//不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务</span></span><br><span class="line">REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),</span><br><span class="line">   </span><br><span class="line"><span class="comment">//如果当前有事物将事物挂起，自己不使用事物进行数据库操作</span></span><br><span class="line">NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),</span><br><span class="line">   </span><br><span class="line"><span class="comment">//必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)</span></span><br><span class="line">NEVER(TransactionDefinition.PROPAGATION_NEVER),</span><br><span class="line">   </span><br><span class="line"><span class="comment">//支持当前事务，如果当前事务存在，则执行一个嵌套事务，当前事务提交时嵌套事物才能提交；如果当前没有事务，就新建一个事务。</span></span><br><span class="line">NESTED(TransactionDefinition.PROPAGATION_NESTED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事物隔离级别Isolation"><a href="#事物隔离级别Isolation" class="headerlink" title="事物隔离级别Isolation"></a>事物隔离级别Isolation</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Isolation &#123;</span><br><span class="line"><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line">DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),</span><br><span class="line"><span class="comment">//读未提交（脏读、不可重复读、幻读）</span></span><br><span class="line">READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),</span><br><span class="line"><span class="comment">//不可重复读（解决：脏读/未解决：不可重复读、幻读）</span></span><br><span class="line">READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),</span><br><span class="line"><span class="comment">//可重复读(mysql默认使用的隔离级别)（解决：脏读、不可重复读/未解决：幻读）</span></span><br><span class="line">REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),</span><br><span class="line"><span class="comment">//串行化（解决所有问题）</span></span><br><span class="line">SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事物的基本要素-ACID"><a href="#事物的基本要素-ACID" class="headerlink" title="事物的基本要素(ACID)"></a>事物的基本要素(ACID)</h1><h2 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h2><ul><li>事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</li></ul><h2 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h2><ul><li>事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</li></ul><h2 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h2><ul><li>同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。</li></ul><h2 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h2><ul><li>事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</li></ul><h1 id="事物的并发问题"><a href="#事物的并发问题" class="headerlink" title="事物的并发问题"></a>事物的并发问题</h1><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><ul><li>事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li></ul><h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><ul><li>事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</li></ul><h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><ul><li>系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li></ul><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Spring </category>
          
          <category> 事物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
            <tag> 事物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot排除依赖</title>
      <link href="/2020/11/04/springboot%E6%8E%92%E9%99%A4%E4%BE%9D%E8%B5%96/"/>
      <url>/2020/11/04/springboot%E6%8E%92%E9%99%A4%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<ul><li>需求：由于我们的项目是父子结构的Maven项目，可能我们在parent项目中依赖了很多基础包（可能包含有redis，数据库的相关包），那我们的子项目全部依赖parent，但是可能我们的服务是消息队列（不需要Redis/数据库），定时任务服务（不需要Redis）等等，所以我们需要排序不需要的组件</li></ul><h1 id="排除Maven依赖使用exclusion标签"><a href="#排除Maven依赖使用exclusion标签" class="headerlink" title="排除Maven依赖使用exclusion标签"></a>排除Maven依赖使用exclusion标签</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;com.nk&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;system&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;0.0.1&lt;/version&gt;  </span><br><span class="line">    &lt;exclusions&gt;  </span><br><span class="line">        &lt;exclusion&gt;  </span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;  </span><br><span class="line">        &lt;/exclusion&gt;  </span><br><span class="line">    &lt;/exclusions&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="禁用自动化配置避免今安在自动化配置"><a href="#禁用自动化配置避免今安在自动化配置" class="headerlink" title="禁用自动化配置避免今安在自动化配置"></a>禁用自动化配置避免今安在自动化配置</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot的自动装配</title>
      <link href="/2020/11/04/springboog%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
      <url>/2020/11/04/springboog%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="启动方法"><a href="#启动方法" class="headerlink" title="启动方法"></a>启动方法</h1><ul><li>Application#main()</li></ul><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(GoodsApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SpringApplication#run()</li></ul><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个静态助手通过传入的source使用默认配置</span></span><br><span class="line"><span class="comment"> * 运行一个spring应用,这个默认的配置来自于<span class="doctag">@SpringBootApplication</span>注解</span></span><br><span class="line"><span class="comment"> * args参数通常将main()方法中的参数传入即可</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个正在运行的上下文对象 &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> run(<span class="keyword">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Application启动类上的注解"><a href="#Application启动类上的注解" class="headerlink" title="Application启动类上的注解"></a>Application启动类上的注解</h1><ul><li>@SpringBootApplication</li></ul><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//@Configuration的派生注解指定该类是一个配置类</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="comment">//开启自动配置(重点/约定大于配置)</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="comment">//扫描Appliaction类下的所有子包</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),<span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br></pre></td></tr></table></figure><h1 id="EnableAutoConfiguration-约定大于配置"><a href="#EnableAutoConfiguration-约定大于配置" class="headerlink" title="@EnableAutoConfiguration (约定大于配置)"></a>@EnableAutoConfiguration (约定大于配置)</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="comment">//import导入各种ConfigBean  自动装配的选择器(可以选择很多自动装配的类)</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br></pre></td></tr></table></figure><h1 id="Import-AutoConfigurationImportSelector-class-选择自动装配的类"><a href="#Import-AutoConfigurationImportSelector-class-选择自动装配的类" class="headerlink" title="@Import(AutoConfigurationImportSelector.class) 选择自动装配的类"></a>@Import(AutoConfigurationImportSelector.class) 选择自动装配的类</h1><ul><li><p>AutoConfigurationImportSelector#selectImports()是该类最重要的方法，用于选择需要装配的类</p></li><li><p>AutoConfigurationImportSelector#getAutoConfigurationEntry() 获取需要自动装配的类</p></li></ul><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the &#123;<span class="doctag">@link</span> AutoConfigurationEntry&#125; based on the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125;</span></span><br><span class="line"><span class="comment"> * of the importing &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> autoConfigurationMetadata the auto-configuration metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotationMetadata the annotation metadata of the configuration class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the auto-configurations that should be imported</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AutoConfigurationMetadata autoConfigurationMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&#125;</span><br><span class="line">AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line"><span class="comment">//获取候选的自动装配的类</span></span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">configurations = removeDuplicates(configurations);</span><br><span class="line">Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">checkExcludedClasses(configurations, exclusions);</span><br><span class="line">configurations.removeAll(exclusions);</span><br><span class="line">configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AutoConfigurationImportSelector#getCandidateConfigurations() 获取候选自动配置</li></ul><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the auto-configuration class names that should be considered. By default</span></span><br><span class="line"><span class="comment"> * this method will load candidates using &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getSpringFactoriesLoaderFactoryClass()&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> metadata the source metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attributes the &#123;<span class="doctag">@link</span> #getAttributes(AnnotationMetadata) annotation</span></span><br><span class="line"><span class="comment"> * attributes&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a list of candidate configurations</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line"><span class="comment">//具体在这里可以抽时间细细分析</span></span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">getBeanClassLoader());</span><br><span class="line"><span class="comment">//configurations集合为空的话报异常，在META-INF/spring.factories下面找不到自动装配的类，如果使用的是自定义包装，请确保该文件正确无误。</span></span><br><span class="line">Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="META-INF-spring-factories"><a href="#META-INF-spring-factories" class="headerlink" title="META-INF/spring.factories"></a>META-INF/spring.factories</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Listeners</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Filters</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span><br><span class="line"></span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line"># spring事物的自动装配,SpringApplication项目启动的时候会自动装配，需要使用事物的地方只要添加上@TransAction注解即可开启事物</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">#springboot内置Tomcat容器</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line"><span class="comment">//内置的Tomcat在这里被启动(org.apache.catalina.startup.Tomcat)</span></span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line"><span class="comment">//springMvc的自动装配配置</span></span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class="line"></span><br><span class="line"># Failure analyzers</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="line">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</span><br><span class="line"></span><br><span class="line"># Template availability providers</span><br><span class="line">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider=\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</span><br></pre></td></tr></table></figure><h1 id="EmbeddedWebServerFactoryCustomizerAutoConfiguration-class"><a href="#EmbeddedWebServerFactoryCustomizerAutoConfiguration-class" class="headerlink" title="EmbeddedWebServerFactoryCustomizerAutoConfiguration.class"></a>EmbeddedWebServerFactoryCustomizerAutoConfiguration.class</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nested configuration if Tomcat is being used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Tomcat.class, UpgradeProtocol.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatWebServerFactoryCustomizer <span class="title">tomcatWebServerFactoryCustomizer</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TomcatWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CompletableFuture构建异步应用</title>
      <link href="/2020/06/05/CompletableFuture%E6%9E%84%E5%BB%BA%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/"/>
      <url>/2020/06/05/CompletableFuture%E6%9E%84%E5%BB%BA%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Future接口的局限性"><a href="#Future接口的局限性" class="headerlink" title="Future接口的局限性"></a>Future接口的局限性</h1><p>我们知道Future接口提供了方法来检测异步计算是否已经结束（使用isDone方法），等待异步操作结束，以及获取计算的结果。<br>但是这些特性还不足以让你编写简洁的并发代码。<br>我们很难表述Future结果之间的依赖性；从文字描述上这很简单，“当长时间计算任务完成时，请将该计算的结果通知到另一个长时间运行的计算任务，这两个计算任务都完成后，将计算的结果与另一个查询操作结果合并”。<br>使用Future中提供的方法完成这样的操作又是另外一回事。这也是我们需要更具描述能力的特性的原因，比如下面这些。</p><ul><li>将两个异步计算合并为一个——这两个异步计算之间相互独立，同时第二个又依赖于第一个的结果。</li><li>等待Future集合中的所有任务都完成。</li><li>仅等待Future集合中最快结束的任务完成（有可能因为它们试图通过不同的方式计算同一个值），并返回它的结果。</li><li>通过编程方式完成一个Future任务的执行（即以手工设定异步操作结果的方式）。</li><li>应对Future的完成事件（即当Future的完成事件发生时会收到通知，并能使用Future计算的结果进行下一步的操作，不只是简单地阻塞等待操作的结果）。</li></ul><h1 id="店铺实体类"><a href="#店铺实体类" class="headerlink" title="店铺实体类"></a>店铺实体类</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> world.ismyfree.async.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：tanliyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2020/6/4 21:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> ：商店实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> String shopName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShopName</span><span class="params">(String shopName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shopName = shopName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShopName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shopName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Shop</span><span class="params">(String shopName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shopName = shopName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(String product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calculatePrice(product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;Double&gt; <span class="title">getPriceAsync</span><span class="params">(String product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; calculatePrice(product));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">calculatePrice</span><span class="params">(String product)</span> </span>&#123;</span><br><span class="line">        delay();</span><br><span class="line">        <span class="keyword">return</span> random.nextDouble() * product.charAt(<span class="number">0</span>) + product.charAt(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="店铺测试代码"><a href="#店铺测试代码" class="headerlink" title="店铺测试代码"></a>店铺测试代码</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> world.ismyfree.async.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：tanliyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2020/6/5 10:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> ：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商店列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Shop&gt; shops = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> Shop(<span class="string">"BestShop"</span>),</span><br><span class="line">            <span class="keyword">new</span> Shop(<span class="string">"MyShop"</span>),</span><br><span class="line">            <span class="keyword">new</span> Shop(<span class="string">"YourShop"</span>),</span><br><span class="line">            <span class="keyword">new</span> Shop(<span class="string">"SuperShop"</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制多线程执行器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Executor executor = Executors.newFixedThreadPool(Math.min(shops.size(), <span class="number">100</span>), <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">            t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CompletableFuture版本获取价格</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getPricesCompletetableFuture</span><span class="params">(String product)</span> </span>&#123;</span><br><span class="line">        List&lt;CompletableFuture&lt;String&gt;&gt; pricesFuture = shops.stream().map(</span><br><span class="line">                s -&gt; CompletableFuture.supplyAsync(</span><br><span class="line">                        () -&gt; String.format(<span class="string">"%s在%s的价格是%s"</span>, product, s.getShopName(), s.getPrice(product)),</span><br><span class="line">                        executor</span><br><span class="line">                )</span><br><span class="line">        ).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"异步对象已经返回,等待耗时任务计算完成"</span>);</span><br><span class="line">        <span class="keyword">return</span> pricesFuture.stream().map(CompletableFuture::join).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用顺序流获取商品的价格</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getPricesStream</span><span class="params">(String product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shops.stream().map(s -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> s.getShopName() + <span class="string">"的价格是"</span> + s.getPrice(product);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用并发流获取商品的价格</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getPricesParallelStream</span><span class="params">(String product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shops.parallelStream().map(s -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> s.getShopName() + <span class="string">"的价格是"</span> + s.getPrice(product);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做一些有意义的事情</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"做一些其他有意义的事"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//System.out.println(getPricesStream("Apples"));</span></span><br><span class="line">        <span class="comment">//System.out.println(getPricesParallelStream("Apples"));</span></span><br><span class="line">        System.out.println(getPricesCompletetableFuture(<span class="string">"Apples"</span>));</span><br><span class="line">        <span class="keyword">long</span> invocationTime = System.currentTimeMillis() - start;</span><br><span class="line">        System.out.printf(<span class="string">"异步对象返回时间%d毫秒%n"</span>, invocationTime);</span><br><span class="line">        doSomething();</span><br><span class="line">        <span class="keyword">long</span> retrievalTime = System.currentTimeMillis() - start;</span><br><span class="line">        System.out.printf(<span class="string">"计算结果返回时间%d毫秒%n"</span>, retrievalTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持续更新中》》》》》</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步应用开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令大全</title>
      <link href="/2019/11/17/Docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/11/17/Docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="容器生命周期管理"><a href="#容器生命周期管理" class="headerlink" title="容器生命周期管理"></a>容器生命周期管理</h1><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p>docker run ：创建一个新的容器并运行一个命令</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><h3 id="OPTIONS说明："><a href="#OPTIONS说明：" class="headerlink" title="OPTIONS说明："></a>OPTIONS说明：</h3><ul><li><p>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</p></li><li><p>-d: 后台运行容器，并返回容器ID；</p></li><li><p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p></li><li><p>-P: 随机端口映射，容器内部端口随机映射到主机的高端口；</p></li><li><p>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p></li><li><p>–name=”nginx-lb”: 为容器指定一个名称；</p></li><li><p>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</p></li><li><p>–dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</p></li><li><p>-h “mars”: 指定容器的hostname；</p></li><li><p>-e username=”ritchie”: 设置环境变量；</p></li><li><p>–env-file=[]: 从指定文件读入环境变量；</p></li><li><p>–cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定CPU运行；</p></li><li><p>-m :设置容器使用内存最大值；</p></li><li><p>–net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</p></li><li><p>–link=[]: 添加链接到另一个容器；</p></li><li><p>–expose=[]: 开放一个端口或一组端口；</p></li><li><p>–volume , -v:    绑定一个卷；</p></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mynginx -d nginx:latest</span><br></pre></td></tr></table></figure><p>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -P -d nginx:latest</span><br></pre></td></tr></table></figure><p>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 -v /data:/data -d nginx:latest</span><br></pre></td></tr></table></figure><p>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 127.0.0.1:80:8080/tcp ubuntu bash</span><br></pre></td></tr></table></figure><p>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it nginx:latest /bin/bash</span><br></pre></td></tr></table></figure><h2 id="start-stop-restart"><a href="#start-stop-restart" class="headerlink" title="start/stop/restart"></a>start/stop/restart</h2><p>docker start :启动一个或多个已经被停止的容器</p><p>docker stop :停止一个运行中的容器</p><p>docker restart :重启容器</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><h3 id="OPTIONS说明：-1"><a href="#OPTIONS说明：-1" class="headerlink" title="OPTIONS说明："></a>OPTIONS说明：</h3><ul><li><p>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</p></li><li><p>-d: 后台运行容器，并返回容器ID；</p></li><li><p>-d: 后台运行容器，并返回容器ID；</p></li><li><p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p></li><li><p>-P: 随机端口映射，容器内部端口随机映射到主机的高端口</p></li><li><p>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</p></li><li><p>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p></li><li><p>–name=”nginx-lb”: 为容器指定一个名称；</p></li><li><p>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</p></li><li><p>–dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</p></li><li><p>-h “mars”: 指定容器的hostname；</p></li><li><p>–env-file=[]: 从指定文件读入环境变量；</p></li><li><p>–cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定CPU运行；</p></li><li><p>-m :设置容器使用内存最大值；</p></li><li><p>–net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</p></li><li><p>–link=[]: 添加链接到另一个容器；</p></li><li><p>–expose=[]: 开放一个端口或一组端口；</p></li><li><p>–volume , -v:    绑定一个卷；</p></li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mynginx -d nginx:latest</span><br></pre></td></tr></table></figure><p>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -P -d nginx:latest</span><br></pre></td></tr></table></figure><p>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 -v /data:/data -d nginx:latest</span><br></pre></td></tr></table></figure><p>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 127.0.0.1:80:8080/tcp ubuntu bash</span><br></pre></td></tr></table></figure><p>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it nginx:latest /bin/bash</span><br></pre></td></tr></table></figure><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>docker kill :杀掉一个运行中的容器。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h3 id="OPTIONS说明：-2"><a href="#OPTIONS说明：-2" class="headerlink" title="OPTIONS说明："></a>OPTIONS说明：</h3><ul><li>-s :向容器发送一个信号；</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>杀掉运行中的容器mynginx</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> -s KILL mynginx</span><br></pre></td></tr></table></figure><h2 id="pause-unpause"><a href="#pause-unpause" class="headerlink" title="pause/unpause"></a>pause/unpause</h2><p>docker pause :暂停容器中所有的进程。</p><p>docker unpause :恢复容器中所有的进程。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>暂停数据库容器db01提供服务。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause db01</span><br></pre></td></tr></table></figure><p>恢复数据库容器db01提供服务。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause db01</span><br></pre></td></tr></table></figure><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><p>docker create ：创建一个新的容器但不启动它</p><h3 id="OPTIONS说明：-3"><a href="#OPTIONS说明：-3" class="headerlink" title="OPTIONS说明："></a>OPTIONS说明：</h3><ul><li><p>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</p></li><li><p>-d: 后台运行容器，并返回容器ID；</p></li><li><p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p></li><li><p>-P: 随机端口映射，容器内部端口随机映射到主机的高端口</p></li><li><p>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</p></li><li><p>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p></li><li><p>–name=”nginx-lb”: 为容器指定一个名称；</p></li><li><p>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</p></li><li><p>–dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</p></li><li><p>-h “mars”: 指定容器的hostname；</p></li><li><p>-e username=”ritchie”: 设置环境变量；</p></li><li><p>–env-file=[]: 从指定文件读入环境变量；</p></li><li><p>–cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定CPU运行；</p></li><li><p>-m :设置容器使用内存最大值；</p></li><li><p>–net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</p></li><li><p>–link=[]: 添加链接到另一个容器；</p></li><li><p>–expose=[]: 开放一个端口或一组端口；</p></li><li><p>–volume , -v:    绑定一个卷 ；</p></li></ul><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create --name myrunoob nginx:latest</span><br></pre></td></tr></table></figure><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>docker exec ：在运行的容器中执行命令</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure><h3 id="OPTIONS说明：-4"><a href="#OPTIONS说明：-4" class="headerlink" title="OPTIONS说明："></a>OPTIONS说明：</h3><ul><li><p>-d :分离模式: 在后台运行</p></li><li><p>-i :即使没有附加也保持STDIN 打开</p></li><li><p>-t :分配一个伪终端</p></li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>在容器 mynginx 中以交互模式执行容器内 /root/runoob.sh 脚本:</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mynginx /bin/sh /root/runoob.sh</span><br></pre></td></tr></table></figure><p>在容器 mynginx 中开启一个交互模式的终端:</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i -t  mynginx /bin/bash</span><br></pre></td></tr></table></figure><p>也可以通过 docker ps -a 命令查看已经在运行的容器，然后使用容器 ID 进入容器。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">9df70f9a0714        openjdk             <span class="string">"/usercode/script.sh…"</span> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 9df70f9a0714 /bin/bash</span><br></pre></td></tr></table></figure><h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><h2 id="inspect"><a href="#inspect" class="headerlink" title="inspect"></a>inspect</h2><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><h2 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h2><h2 id="events"><a href="#events" class="headerlink" title="events"></a>events</h2><h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><h2 id="port"><a href="#port" class="headerlink" title="port"></a>port</h2><h1 id="容器rootfs命令"><a href="#容器rootfs命令" class="headerlink" title="容器rootfs命令"></a>容器rootfs命令</h1><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><h1 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h1><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><h1 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h1><h2 id="images"><a href="#images" class="headerlink" title="images"></a>images</h2><h2 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h2><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><h2 id="save"><a href="#save" class="headerlink" title="save"></a>save</h2><h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><h1 id="info-version"><a href="#info-version" class="headerlink" title="info/version"></a>info/version</h1><h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p>持续更新中》》》》》</p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04上安装Docker</title>
      <link href="/2019/09/11/Ubuntu18-04%E4%B8%8A%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2019/09/11/Ubuntu18-04%E4%B8%8A%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="使当前用户成为root身份"><a href="#使当前用户成为root身份" class="headerlink" title="使当前用户成为root身份"></a>使当前用户成为root身份</h1><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><h1 id="检查当前运行的Linux内核的版本"><a href="#检查当前运行的Linux内核的版本" class="headerlink" title="检查当前运行的Linux内核的版本"></a>检查当前运行的Linux内核的版本</h1><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>查看看我们系统正在使用的内核版本</p><h1 id="检查Ubuntu版本"><a href="#检查Ubuntu版本" class="headerlink" title="检查Ubuntu版本"></a>检查Ubuntu版本</h1><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/lsb-release</span><br></pre></td></tr></table></figure><p>该命令显示Ubuntu版本是18.04</p><h1 id="安装软件之前更新Ubuntu"><a href="#安装软件之前更新Ubuntu" class="headerlink" title="安装软件之前更新Ubuntu"></a>安装软件之前更新Ubuntu</h1><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h1 id="从Ubuntu存储库安装Docker"><a href="#从Ubuntu存储库安装Docker" class="headerlink" title="从Ubuntu存储库安装Docker"></a>从Ubuntu存储库安装Docker</h1><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker.io</span><br></pre></td></tr></table></figure><h1 id="启动Docker并使用systemctl命令将其添加到引导时间"><a href="#启动Docker并使用systemctl命令将其添加到引导时间" class="headerlink" title="启动Docker并使用systemctl命令将其添加到引导时间"></a>启动Docker并使用systemctl命令将其添加到引导时间</h1><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h1 id="检查Docker版本"><a href="#检查Docker版本" class="headerlink" title="检查Docker版本"></a>检查Docker版本</h1><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>到这就安装完成了，你可以尽情玩你的docker了，嘻嘻！！！</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet执行原理</title>
      <link href="/2019/09/02/Servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
      <url>/2019/09/02/Servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet概念"><a href="#Servlet概念" class="headerlink" title="Servlet概念"></a>Servlet概念</h1><ul><li><p>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</p></li><li><p>将来我们自定义一个类，实现Servlet接口，复写方法。</p></li></ul><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><ul><li><p>创建javaEE项目</p></li><li><p>定义一个类，实现servlet接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现接口中的抽象方法</p></li><li><p>配置servlet<br>在web.xml中配置：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置Servlet --&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">itcast</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">ServletDemo1</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">demo1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">demo1</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h1><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容。</url-pattern></li><li>如果有，则在找到对应的<servlet-class>全类名</servlet-class></li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol><h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><pre><code>1. 被创建：执行init方法，只执行一次    * Servlet什么时候被创建？        * 默认情况下，第一次被访问时，Servlet被创建        * 可以配置执行Servlet的创建时机。            * 在&lt;servlet&gt;标签下配置                1. 第一次被访问时，创建                    * &lt;load-on-startup&gt;的值为负数                2. 在服务器启动时，创建                    * &lt;load-on-startup&gt;的值为0或正整数    * Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的        * 多个用户同时访问时，可能存在线程安全问题。        * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值2. 提供服务：执行service方法，执行多次    * 每次访问Servlet时，Service方法都会被调用一次。3. 被销毁：执行destroy方法，只执行一次    * Servlet被销毁时执行。服务器关闭时，Servlet被销毁    * 只有服务器正常关闭时，才会执行destroy方法。    * destroy方法在Servlet被销毁之前执行，一般用于释放资源</code></pre><ul><li><p>Servlet3.0：</p><ul><li><p>好处：</p><ul><li>支持注解配置。可以不需要web.xml了。</li></ul></li><li><p>步骤：</p><ol><li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li><li>定义一个类，实现Servlet接口</li><li>复写方法</li><li>在类上使用@WebServlet注解，进行配置<figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"资源路径"</span>)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么保证redis是高并发及高可用</title>
      <link href="/2019/08/31/%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81redis%E6%98%AF%E9%AB%98%E5%B9%B6%E5%8F%91%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>/2019/08/31/%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81redis%E6%98%AF%E9%AB%98%E5%B9%B6%E5%8F%91%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="如果redis要支撑10万-的并发，那应该怎么做？"><a href="#如果redis要支撑10万-的并发，那应该怎么做？" class="headerlink" title="如果redis要支撑10万+的并发，那应该怎么做？"></a>如果redis要支撑10万+的并发，那应该怎么做？</h1><ul><li>答案是：读写分离</li></ul><p>单机的redis几乎不太可能说QPS超过10万+，除非一些特殊情况，比如你的机器性能特别好，配置特别高，物理机，维护做的特别好，而且你的整体的操作不是太复杂。<br><img src="/images/20190831_1redis/redis%E5%8D%95%E6%9C%BA%E7%9A%84%E7%93%B6%E9%A2%88.png" alt="redis单机的瓶颈"></p><p>读写分离，一般来说，对缓存，一般都是用来支撑读高并发的，写的请求是比较少的，可能写请求也就一秒钟几千，一两千大量的请求都是读，一秒钟二十万次读。</p><p>读写分离：主从架构 -&gt; 读写分离 -&gt; 支撑10万+读QPS的架构</p><p><img src="/images/20190831_1redis/redis%E4%B8%BB%E4%BB%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%94%AF%E6%92%9110%E4%B8%87+%E7%9A%84%E9%AB%98%E5%B9%B6%E5%8F%91.png" alt="主从读写分离实现的高并发"></p><h1 id="redis-replication的核心机制"><a href="#redis-replication的核心机制" class="headerlink" title="redis replication的核心机制"></a>redis replication的核心机制</h1><ul><li><p>redis采用异步方式复制数据到slave节点，不过redis 2.8开始，slave node会周期性地确认自己每次复制的数据量</p></li><li><p>一个master node是可以配置多个slave node的</p></li><li><p>slave node也可以连接其他的slave node</p></li><li><p>slave node做复制的时候，是不会block master node的正常工作的</p></li><li><p>slave node在做复制的时候，也不会block对自己的查询操作，它会用旧的数据集来提供服务; 但是复制完成的时候，需要删除旧数据集，加载新数据集，这个时候就会暂停对外服务了</p></li><li><p>slave node主要用来进行横向扩容，做读写分离，扩容的slave node可以提高读的吞吐量</p></li><li><p>slave，高可用性，有很大的关系</p></li></ul><h1 id="master持久化对于主从架构的安全保障的意义"><a href="#master持久化对于主从架构的安全保障的意义" class="headerlink" title="master持久化对于主从架构的安全保障的意义"></a>master持久化对于主从架构的安全保障的意义</h1><p>如果采用了主从架构，那么建议必须开启master node的持久化！</p><p>不建议用slave node作为master node的数据热备，因为那样的话，如果你关掉master的持久化，可能在master宕机重启的时候数据是空的，然后可能一经过复制，salve node数据也丢了</p><p>master -&gt; RDB和AOF都关闭了 -&gt; 全部在内存中</p><p>master宕机，重启，是没有本地数据可以恢复的，然后就会直接认为自己IDE数据是空的</p><p>master就会将空的数据集同步到slave上去，所有slave的数据全部清空</p><p>100%的数据丢失</p><p>master节点，必须要使用持久化机制</p><p>第二个，master的各种备份方案，要不要做，万一说本地的所有文件丢失了; 从备份中挑选一份rdb去恢复master; 这样才能确保master启动的时候，是有数据的</p><p>即使采用了后续讲解的高可用机制，slave node可以自动接管master node，但是也可能sentinal还没有检测到master failure，master node就自动重启了，还是可能导致上面的所有slave node数据清空故障</p><h1 id="面试的回答方式"><a href="#面试的回答方式" class="headerlink" title="面试的回答方式"></a>面试的回答方式</h1><p>redis高并发：主从架构，一主多从，一般来说，很多项目其实就足够了，单主用来写入数据，单机几万QPS，多从用来查询数据，多个从实例可以提供每秒10万的QPS。</p><p>redis高并发的同时，还需要容纳大量的数据：一主多从，每个实例都容纳了完整的数据，比如redis主就10G的内存量，其实你就最对只能容纳10g的数据量。如果你的缓存要容纳的数据量很大，达到了几十g，甚至几百g，或者是几t，那你就需要redis集群，而且用redis集群之后，可以提供可能每秒几十万的读写并发。</p><p>redis高可用：如果你做主从架构部署，其实就是加上哨兵就可以了，就可以实现，任何一个实例宕机，自动会进行主备切换。</p>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的过期策略</title>
      <link href="/2019/08/31/redis%E7%9A%84%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5/"/>
      <url>/2019/08/31/redis%E7%9A%84%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="redis的过期策略有哪些？"><a href="#redis的过期策略有哪些？" class="headerlink" title="redis的过期策略有哪些？"></a>redis的过期策略有哪些？</h1><ul><li><p>设置过期时间（redis会采用定期删除、惰性删除的策略）</p></li><li><p>定期删除</p></li></ul><p>所谓定期删除，指的是redis默认是每隔100ms就随机抽取一些设置了过期时间的key，检查其是否过期，如果过期就删除。</p><p><em>注意：</em></p><p>实际上redis是每隔100ms随机抽取一些key来检查和删除的，定期删除可能会导致很多过期key到了时间并没有被删除掉。这里可不是每隔100ms就遍历所有的设置过期时间的key，那样就是一场性能上的灾难。redis基本上就死了。</p><ul><li>惰性删除</li></ul><p>在你获取某个key的时候，redis会检查一下 ，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除，不会给你返回任何东西。并不是key到时间就被删除掉，而是你查询这个key的时候，redis再懒惰的检查一下。</p><ul><li><p>通过上述两种手段结合起来，保证过期的key一定会被干掉。</p></li><li><p>我的数据明明都过期了，怎么还占用着内存啊?</p></li></ul><p>redis中的过期key靠定期删除没有被删除掉，导致大量占用内存，导致redis的内存装不下数据，此时redis会进行内存淘汰。</p><ul><li>我redis里写的数据怎么没了？</li></ul><p>很简单你写的数据太多，内存满了，或者触发了什么条件，redis lru，自动给你清理掉了一些最近很少使用的数据。</p><h1 id="redis的内存淘汰的一些策略？"><a href="#redis的内存淘汰的一些策略？" class="headerlink" title="redis的内存淘汰的一些策略？"></a>redis的内存淘汰的一些策略？</h1><ul><li><p>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错，这个一般没人用吧，实在是太恶心了。</p></li><li><p>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）。</p></li><li><p>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key，这个一般没人用吧，为啥要随机，肯定是把最近最少使用的key给干掉啊。</p></li><li><p>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key（这个一般不太合适）。</p></li><li><p>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</p></li><li><p>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</p></li></ul><h1 id="手写一下LRU算法？"><a href="#手写一下LRU算法？" class="headerlink" title="手写一下LRU算法？"></a>手写一下LRU算法？</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> CACHE_SIZE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里就是传递进来最多能缓存多少数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> cacheSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>((<span class="keyword">int</span>) Math.ceil(cacheSize / <span class="number">0.75</span>) + <span class="number">1</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>); </span><br><span class="line"><span class="comment">/*这块就是设置一个hashmap的初始大小，同时最后一个true指的是让</span></span><br><span class="line"><span class="comment">linkedhashmap按照访问顺序来进行排序，最近访问的放在头，最老访问的就在尾*/</span></span><br><span class="line">CACHE_SIZE = cacheSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry eldest)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这个意思就是说当map中的数据量大于指定的缓存个数的时候，就自动删除最老的数据</span></span><br><span class="line"><span class="keyword">return</span> size() &gt; CACHE_SIZE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis有哪些数据类型及使用场景</title>
      <link href="/2019/08/30/redis%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2019/08/30/redis%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串类型（String）"><a href="#字符串类型（String）" class="headerlink" title="字符串类型（String）"></a>字符串类型（String）</h1><ul><li>举例应用场景</li></ul><p>商品编号，订单号采用string 的递增数字特性生成</p><ul><li><p>redis的string 类型可以包含任意数据，包括图片等二进制或者序列化的对象等。单个value的值最大上限为1G字节。</p></li><li><p>纯字符串操作命令</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key1 &apos;hello redis&apos; # 存值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1 # 取值</span><br><span class="line">&quot;hello redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; getset key1 redis # 将给定key1的值设为redis，并返回key1的旧值(old value)</span><br><span class="line">&quot;hello redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; del key1 # 删除 key1</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></li><li><p>整数自增自减操作命令</p></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key2 10 # 存入一个值为10的整数字符串</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr key2 # 自增</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; incr key2 # 自增</span><br><span class="line">(integer) 12</span><br><span class="line">127.0.0.1:6379&gt; incrby key2 5 # 自增指定数值 -- 5</span><br><span class="line">(integer) 17</span><br><span class="line">127.0.0.1:6379&gt; decr key2 # 自减</span><br><span class="line">(integer) 16</span><br><span class="line">127.0.0.1:6379&gt; decr key2 # 自减</span><br><span class="line">(integer) 15</span><br><span class="line">127.0.0.1:6379&gt;  decrby key2 5 # 自减指定数值 -- 5</span><br><span class="line">(integer) 10</span><br></pre></td></tr></table></figure><ul><li>其他操作命令</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key1 redis</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; append key1 hello # 将 hello 追加到 key1 原来的值的末尾,放回追加后字符串长度</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;redishello&quot;</span><br><span class="line">127.0.0.1:6379&gt; strlen key1 # 返回 key1 所储存的字符串值的长度</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; mset key1 v1 key2 v2 key3 v3 # 批量同时设置一个或多个 key-value 对</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget key1 key2 key3 # 返回所有(一个或多个)给定 key 的值</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br></pre></td></tr></table></figure><h1 id="散列类型（Hash）"><a href="#散列类型（Hash）" class="headerlink" title="散列类型（Hash）"></a>散列类型（Hash）</h1><ul><li>举例应用场景</li></ul><p>保存大量的对象数据</p><ul><li>redis hash介绍</li></ul><p>hash 叫散列类型。等价于Java 中的 HashMap。但是在 redis 中 hash 的 key 必须是 string 类型。不支持其他类型。这个特性非常适合存储对象。因为一个对象可以有很多属性，存储起来就是键值对形式的。在 Reids 中，每个 Hash 可以存储多达 4 亿个键值对。</p><ul><li>相关操作命令</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user name zhangsan # 使用 hset 为 user 添加一个键值对 name = zhangsan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user age 18 # 使用 hset 为 user 添加一个键值对 age = 18</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget user name # 使用 hget 获取 user 中键为 name 的值</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget user age # 使用 hget 获取 user 中键为 age 的值</span><br><span class="line">&quot;18&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall user # 使用 hgetall 获取 user 中所有的键值对</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;zhangsan&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;18&quot;</span><br><span class="line">127.0.0.1:6379&gt; hmset user name lisi age 20 # 使用 hmset 为 user 批量添加键值对</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget user name age # 使用 hmget 批量获取 user 中键的值</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; hdel user name# 使用 hdel 删除 user 一个（或多个）键值对</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists user name # 使用 hexists 判断 user 中 name 元素是否存在</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hexists user age # 使用 hexists  user 中 age 元素是否存在</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hkeys user # 使用 hkeys 只获得 user 中的字段名</span><br><span class="line">1) &quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals user # 使用 hvals 只获得 user 中的字段值</span><br><span class="line">1) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; hlen user # 使用 hlen 获得  user 中字段（键值对）数量</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h1 id="列表类型（List"><a href="#列表类型（List" class="headerlink" title="列表类型（List)"></a>列表类型（List)</h1><ul><li>举例应用场景</li></ul><p>微博某个大v的粉丝就可以以list的格式放在redis里去缓存</p><p>key=某大v  value=[zhangsan, lisi, wangwu]</p><p>商品，博客，文章下面的评论列表。</p><ul><li>redis list介绍</li></ul><p>在 Redis 中的 List 类型，其内部使用的是双向链表实现的,所以它具有双向链表具有的相关特性。其常用操作就是向列表两端添加或删除元素。这使得 List 既可以当做栈（先进后出）来使用，也可以当做队列（先进先出）来使用。</p><ul><li>相关操作命令</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list 1 2 3 4 # 使用 lpush 将 1 2 3 4 依次插入到 list 的左端</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; rpush list 5 6 7 8 # 使用 rpush 将 5 6 7 8 依次插入到 list 的右端</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1 # 使用 lrange 获取 指定区间上所有值（0 -1 表示获取全部）</span><br><span class="line">1) &quot;4&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;2&quot;</span><br><span class="line">4) &quot;1&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">6) &quot;6&quot;</span><br><span class="line">7) &quot;7&quot;</span><br><span class="line">8) &quot;8&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop list # 使用 lpop 弹出 list 左端的一个值，并返回弹出的值</span><br><span class="line">&quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop list </span><br><span class="line">&quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list # 使用 rpop 弹出 list 右端的一个值，并返回弹出的值</span><br><span class="line">&quot;8&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list</span><br><span class="line">&quot;7&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;5&quot;</span><br><span class="line">4) &quot;6&quot;</span><br><span class="line">127.0.0.1:6379&gt; llen list # 使用 llen 获取 list 中元素个数</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><h1 id="集合类型（Set）"><a href="#集合类型（Set）" class="headerlink" title="集合类型（Set）"></a>集合类型（Set）</h1><ul><li>举例应用场景</li></ul><p>可以基于set玩儿交集、并集、差集的操作</p><p>可以把两个人的粉丝列表整一个交集，看看俩人的共同好友是谁</p><ul><li>相关操作命令</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd set a b c 1 2 3  # 使用 sadd 将 a b c 1 2 3 添加到 set 集合中</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; sadd set a b 2  # 添加重复元素，返回成功添加 0 个，说明 set 中元素不重复</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; srem set a b 1  # 使用 srem 删除 set 集合中的 a b 1 三个元素</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers set  # 使用 smembers 获取 set 集合中所以元素</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; sismember set a  # 使用 sismember 判断 a 是否在 set 集合中</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; sismember set c  # 使用 sismember 判断 c 是否在 set 集合中</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><ul><li>集合的并集运算 A ∪ B</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd seta 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd setb 3 4 5</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sunion seta setb # 使用 sunion 计算 seta 和 setb 的并集</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br></pre></td></tr></table></figure><ul><li>集合的交集运算 A ∩ B</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd seta 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd setb 3 4 5</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sinter seta setb # 使用 sinter 计算 seta 和 setb 的交集</span><br><span class="line">1) &quot;3&quot;</span><br></pre></td></tr></table></figure><ul><li>集合的差集运算 A - B</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd seta 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd setb 3 4 5</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sdiff seta setb # 使用 sdiff 计算 seta - setb (属于seta 但不属于 setb)</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; sdiff setb seta # 使用 sdiff 计算 setb - setb (属于setb 但不属于 seta)</span><br><span class="line">1) &quot;4&quot;</span><br><span class="line">2) &quot;5&quot;</span><br></pre></td></tr></table></figure><h1 id="有序集合类型-sorted-set"><a href="#有序集合类型-sorted-set" class="headerlink" title="有序集合类型 (sorted set)"></a>有序集合类型 (sorted set)</h1><ul><li>举例应用场景</li></ul><p>商品销售，软件下载等各种排行榜</p><p>还可以分页查询</p><ul><li>相关操作命令</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd board 81 java 75 python 90 c++ # 使用 zadd 增加一到多个value/score对，score 放在前面</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zscore board java # 使用 zscore 获取 java 的 score</span><br><span class="line">&quot;81&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrange board 0 -1 # 使用 zrange 获取指定区间（0 -1 表示全部）上的降序排名</span><br><span class="line">1) &quot;python&quot;</span><br><span class="line">2) &quot;java&quot;</span><br><span class="line">3) &quot;c++&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrange board 0 -1 withscores # 带上 winthscores 可以一并获取元素的 score</span><br><span class="line">1) &quot;python&quot; </span><br><span class="line">2) &quot;75&quot;</span><br><span class="line">3) &quot;java&quot;</span><br><span class="line">4) &quot;81&quot;</span><br><span class="line">5) &quot;c++&quot;</span><br><span class="line">6) &quot;90&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrevrange board 0 -1 withscores # 使用 zrevrange 获取指定区间（0 -1 表示全部）上的升序排名</span><br><span class="line">1) &quot;c++&quot;</span><br><span class="line">2) &quot;90&quot;</span><br><span class="line">3) &quot;java&quot;</span><br><span class="line">4) &quot;81&quot;</span><br><span class="line">5) &quot;python&quot;</span><br><span class="line">6) &quot;75&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore board -inf +inf withscores # 使用 zrangebyscore 获取 负无穷（-inf）到 正无穷（+inf）区间上所以元素的降序排名</span><br><span class="line">1) &quot;python&quot;</span><br><span class="line">2) &quot;75&quot;</span><br><span class="line">3) &quot;java&quot;</span><br><span class="line">4) &quot;81&quot;</span><br><span class="line">5) &quot;c++&quot;</span><br><span class="line">6) &quot;90&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrevrangebyscore board +inf -inf withscores # 使用 zrevrangebyscore 获取正无穷（+inf）到 负无穷（-inf）区间上所以元素的升序排名 </span><br><span class="line">1) &quot;c++&quot;</span><br><span class="line">2) &quot;90&quot;</span><br><span class="line">3) &quot;java&quot;</span><br><span class="line">4) &quot;81&quot;</span><br><span class="line">5) &quot;python&quot;</span><br><span class="line">6) &quot;75&quot;</span><br><span class="line">127.0.0.1:6379&gt; zcard board # 使用 zcard 计算 board 集合的元素个数</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrem board java python # 使用 zrem 删除 board 集合中的一个或多个元素 </span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的线程模型</title>
      <link href="/2019/08/29/redis%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/08/29/redis%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="redis与memcached有什么区别？"><a href="#redis与memcached有什么区别？" class="headerlink" title="redis与memcached有什么区别？"></a>redis与memcached有什么区别？</h1><ul><li><p>redis的数据类型比memcached的多,支持的数据结构更为丰富。</p></li><li><p>redis支持集群，而memcached不支持集群。</p></li></ul><h1 id="redis的线程模型是什么？"><a href="#redis的线程模型是什么？" class="headerlink" title="redis的线程模型是什么？"></a>redis的线程模型是什么？</h1><h2 id="文件事件处理器"><a href="#文件事件处理器" class="headerlink" title="文件事件处理器"></a>文件事件处理器</h2><p>redis基于reactor模式开发了网络事件处理器，这个处理器叫做文件事件处理器，file event handler。这个文件事件处理器，是单线程的，所以redis才叫做单线程的模型。<br>下图框起来的整个部分指的是文件事件处理器：<br><img src="/images/20190829_1redis/01_redis%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.png" alt="redis单线程模型"></p><h1 id="为什么单线程的redis比多线程的memcached效率高（单线程还支持高并发-）？"><a href="#为什么单线程的redis比多线程的memcached效率高（单线程还支持高并发-）？" class="headerlink" title="为什么单线程的redis比多线程的memcached效率高（单线程还支持高并发    ）？"></a>为什么单线程的redis比多线程的memcached效率高（单线程还支持高并发    ）？</h1><ul><li><p>redis的各个时间处理器属于纯内存操作，效率高</p></li><li><p>核心是基于非阻塞的IO多路复用机制</p></li><li><p>单线程反而避免了多线程的频繁上下文切换问题</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中缓存的使用</title>
      <link href="/2019/08/29/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/29/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="项目中的缓存是怎么使用的？"><a href="#项目中的缓存是怎么使用的？" class="headerlink" title="项目中的缓存是怎么使用的？"></a>项目中的缓存是怎么使用的？</h1><p>经典的电商项目都喜欢将导航栏，菜单栏，三级分类菜单数据放到redis缓存中，因为这些数据往往在用户访问的时候都能访问到，如果大量用户都去访问数据库会造成数据库访问压力，甚至宕机，而缓存基于内存，天生就支持高性能高并发，所以我们会将这些用户经常能访问到的数据都放到redis缓存中。</p><h1 id="为什么要使用缓存？"><a href="#为什么要使用缓存？" class="headerlink" title="为什么要使用缓存？"></a>为什么要使用缓存？</h1><p>一般情况下我们的项目里面基本上不会有高并发的场景，有些复杂查询的场景需要将数据放到缓存中，后续会大幅度提升访问性能，提升用户体验。</p><h1 id="用了缓存会有什么不良的后果？"><a href="#用了缓存会有什么不良的后果？" class="headerlink" title="用了缓存会有什么不良的后果？"></a>用了缓存会有什么不良的后果？</h1><ul><li>缓存与数据库双写不一致</li></ul><p>数据库里面的数据更新过后不及时更新到缓存会导致用户获取到缓存中的数据与数据库中不同步。</p><ul><li>缓存穿透</li></ul><p>缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大</p><ul><li>缓存击穿</li></ul><p>缓存击穿是指缓存中没有但数据库中有的数据。这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p><ul><li>缓存雪崩</li></ul><p>缓存雪崩是指缓存数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><ul><li>缓存并发竞争</li></ul>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程死锁的原理与实现</title>
      <link href="/2019/08/28/%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/08/28/%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="线程死锁的原理"><a href="#线程死锁的原理" class="headerlink" title="线程死锁的原理"></a>线程死锁的原理</h1><p>当线程任务中出现了多个同步(多个锁)时，如果同步中嵌套了其他的同步。这时容易引发一种现象：程序出现无限等待，这种现象我们称为死锁。这种情况能避免就避免掉。<br><img src="/images/20190828_1multi-thread/%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86.JPG" alt="线程死锁的原理"></p><h1 id="线程死锁的代码实现"><a href="#线程死锁的代码实现" class="headerlink" title="线程死锁的代码实现"></a>线程死锁的代码实现</h1><h2 id="唯一对象锁A"><a href="#唯一对象锁A" class="headerlink" title="唯一对象锁A"></a>唯一对象锁A</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockA</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LockA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> LockA locka = <span class="keyword">new</span> LockA();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="唯一对象锁B"><a href="#唯一对象锁B" class="headerlink" title="唯一对象锁B"></a>唯一对象锁B</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LockB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> LockB lockb = <span class="keyword">new</span> LockB();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="死锁代码具体实现"><a href="#死锁代码具体实现" class="headerlink" title="死锁代码具体实现"></a>死锁代码具体实现</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//先进入A同步,再进入B同步</span></span><br><span class="line"><span class="keyword">synchronized</span>(LockA.locka)&#123;</span><br><span class="line">System.out.println(<span class="string">"if...locka"</span>);</span><br><span class="line"><span class="keyword">synchronized</span>(LockB.lockb)&#123;</span><br><span class="line">System.out.println(<span class="string">"if...lockb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//先进入B同步,再进入A同步</span></span><br><span class="line"><span class="keyword">synchronized</span>(LockB.lockb)&#123;</span><br><span class="line">System.out.println(<span class="string">"else...lockb"</span>);</span><br><span class="line"><span class="keyword">synchronized</span>(LockA.locka)&#123;</span><br><span class="line">System.out.println(<span class="string">"else...locka"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DeadLock dead = <span class="keyword">new</span> DeadLock();</span><br><span class="line">Thread t0 = <span class="keyword">new</span> Thread(dead);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(dead);</span><br><span class="line">t0.start();</span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式的7种写法</title>
      <link href="/2019/08/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%847%E7%A7%8D%E5%86%99%E6%B3%95/"/>
      <url>/2019/08/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%847%E7%A7%8D%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式在类加载时就完成了初始化，所以类加载较慢，但获取对象的速度快。 这种方式基于类加载机制避免了多线程的同步问题，但是有其他的静态方法导致类装载，这时候初始化instance显然没有达到懒加载的效果。</p><h1 id="懒汉模式（线程不安全）"><a href="#懒汉模式（线程不安全）" class="headerlink" title="懒汉模式（线程不安全）"></a>懒汉模式（线程不安全）</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉模式申明了一个静态对象，在用户第一次调用时初始化，虽然节约了资源，但第一次加载时需要实例化，反映稍慢一些，而且在多线程不能正常工作。</p><h1 id="懒汉模式（线程安全）"><a href="#懒汉模式（线程安全）" class="headerlink" title="懒汉模式（线程安全）"></a>懒汉模式（线程安全）</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span>  Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法能够在多线程中很好的工作，但是每次调用getInstance方法时都需要进行同步，造成不必要的同步开销，而且大部分时候我们是用不到同步的，所以不建议用这种模式。</p><h1 id="双重检查模式-（DCL）"><a href="#双重检查模式-（DCL）" class="headerlink" title="双重检查模式 （DCL）"></a>双重检查模式 （DCL）</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance== <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (instance== <span class="keyword">null</span>) &#123;</span><br><span class="line">instance= <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法在getSingleton方法中对singleton进行了两次判空，第一次是为了不必要的同步，第二次是在singleton等于null的情况下才创建实例。在这里用到了volatile关键字，双重检查模式是正确使用volatile关键字的场景之一。<br>在这里使用volatile会或多或少的影响性能，但考虑到程序的正确性，牺牲这点性能还是值得的。 DCL优点是资源利用率高，第一次执行getInstance时单例对象才被实例化，效率高。缺点是第一次加载时反应稍慢一些，在高并发环境下也有一定的缺陷，虽然发生的概率很小。DCL虽然在一定程度解决了资源的消耗和多余的同步，线程安全等问题，但是他还是在某些情况会出现失效的问题，也就是DCL失效，在《java并发编程实践》一书建议用静态内部类单例模式来替代DCL。</p><h1 id="静态内部类单例模式（建议使用）"><a href="#静态内部类单例模式（建议使用）" class="headerlink" title="静态内部类单例模式（建议使用）"></a>静态内部类单例模式（建议使用）</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.sInstance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton sInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次加载Singleton类时并不会初始化sInstance，只有第一次调用getInstance方法时虚拟机加载SingletonHolder并初始化sInstance，这样不仅能确保线程安全也能保证Singleton类的唯一性，所以推荐使用静态内部类单例模式。</p><h1 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">INSTANCE;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认枚举实例的创建是线程安全的，并且在任何情况下都是单例，上述讲的几种单例模式实现中，有一种情况下他们会重新创建对象，那就是反序列化，将一个单例实例对象写到磁盘再读回来，从而获得了一个实例。反序列化操作提供了readResolve方法，这个方法可以让开发人员控制对象的反序列化。</p><h1 id="单例模式避免反序列化重新创建对象"><a href="#单例模式避免反序列化重新创建对象" class="headerlink" title="单例模式避免反序列化重新创建对象"></a>单例模式避免反序列化重新创建对象</h1><p>在上述的几个方法示例中如果要杜绝单例对象被反序列化是重新生成对象，就必须加入如下方法</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举单例的优点就是简单，但是大部分应用开发很少用枚举，可读性并不是很高，不建议用。</p><h1 id="使用容器实现单例模式"><a href="#使用容器实现单例模式" class="headerlink" title="使用容器实现单例模式"></a>使用容器实现单例模式</h1><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; objMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key, Objectinstance)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!objMap.containsKey(key) ) &#123;</span><br><span class="line">objMap.put(key, instance) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">ObjectgetService</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> objMap.get(key) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用SingletonManager 将多种的单例类统一管理，在使用时根据key获取对象对应类型的对象。这种方式使得我们可以管理多种类型的单例，并且在使用时可以通过统一的接口进行获取操作，降低了用户的使用成本，也对用户隐藏了具体实现，降低了耦合度。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分库分表之后处理主键id的办法</title>
      <link href="/2019/08/21/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E4%B9%8B%E5%90%8E%E5%A4%84%E7%90%86%E4%B8%BB%E9%94%AEid%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/08/21/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E4%B9%8B%E5%90%8E%E5%A4%84%E7%90%86%E4%B8%BB%E9%94%AEid%E7%9A%84%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库自增ID"><a href="#数据库自增ID" class="headerlink" title="数据库自增ID"></a>数据库自增ID</h1><p>这个就是说你的系统里每次得到一个id，都是往一个库的一个表里插入一条没什么业务含义的数据，然后获取一个数据库自增的一个id。拿到这个id之后再往对应的分库分表里去写入。</p><p>这个方案的好处就是方便简单，谁都会用；缺点就是单库生成自增id，要是高并发的话，就会有瓶颈的；如果你硬是要改进一下，那么就专门开一个服务出来，这个服务每次就拿到当前id最大值，然后自己递增几个id，一次性返回一批id，然后再把当前最大id值修改成递增几个id之后的一个值；但是无论怎么说都是基于单个数据库。</p><p>适合的场景：你分库分表就俩原因，要不就是单库并发太高，要不就是单库数据量太大；除非是你并发不高，但是数据量太大导致的分库分表扩容，你可以用这个方案，因为可能每秒最高并发最多就几百，那么就走单独的一个库和表生成自增主键即可。</p><p>并发很低，几百/s，但是数据量大，几十亿的数据，所以需要靠分库分表来存放海量的数据。<br><img src="/images/20190821_1databaseIdGenerate/01_dabaseIdGenerate.png" alt="数据库自增原理分析"></p><h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><p>好处就是本地生成，不要基于数据库来了；不好之处就是，uuid太长了，作为主键性能太差了，不适合用于主键。</p><p>适合的场景：如果你是要随机生成个什么文件名了，编号之类的，你可以用uuid，但是作为主键是不能用uuid的。</p><p>UUID.randomUUID().toString().replace(“-”, “”) -&gt; sfsdf23423rr234sfdaf</p><h1 id="获取系统当前时间"><a href="#获取系统当前时间" class="headerlink" title="获取系统当前时间"></a>获取系统当前时间</h1><p>这个就是获取当前时间即可，但是问题是，并发很高的时候，比如一秒并发几千，会有重复的情况，这个是肯定不合适的。基本就不用考虑了。<br>适合的场景：一般如果用这个方案，是将当前时间跟很多其他的业务字段拼接起来，作为一个id，如果业务上你觉得可以接受，那么也是可以的。你可以将别的业务字段值跟当前时间拼接起来，组成一个全局唯一的编号，订单编号，时间戳 + 用户id + 业务含义编码。</p><h1 id="snowflake算法"><a href="#snowflake算法" class="headerlink" title="snowflake算法"></a>snowflake算法</h1><p>twitter开源的分布式id生成算法，就是把一个64位的long型的id，1个bit是不用的，用其中的41 bit作为毫秒数，用10 bit作为工作机器id，12 bit作为序列号</p><p>1 bit：不用，为啥呢？因为二进制里第一个bit为如果是1，那么都是负数，但是我们生成的id都是正数，所以第一个bit统一都是0</p><p>41 bit：表示的是时间戳，单位是毫秒。41 bit可以表示的数字多达2^41 - 1，也就是可以标识2 ^ 41 - 1个毫秒值，换算成年就是表示69年的时间。</p><p>10 bit：记录工作机器id，代表的是这个服务最多可以部署在2^10台机器上哪，也就是1024台机器。但是10 bit里5个bit代表机房id，5个bit代表机器id。意思就是最多代表2 ^ 5个机房（32个机房），每个机房里可以代表2 ^ 5个机器（32台机器）。</p><p>12 bit：这个是用来记录同一个毫秒内产生的不同id，12 bit可以代表的最大正整数是2 ^ 12 - 1 = 4096，也就是说可以用这个12bit代表的数字来区分同一个毫秒内的4096个不同的id</p><p>64位的long型的id，64位的long -&gt; 二进制</p><p>0 | 0001100 10100010 10111110 10001001 01011100 00 | 10001 | 1 1001 | 0000 00000000</p><p>2018-01-01 10:00:00 -&gt; 做了一些计算，再换算成一个二进制，41bit来放 -&gt; 0001100 10100010 10111110 10001001 01011100 00</p><p>机房id，17 -&gt; 换算成一个二进制 -&gt; 10001</p><p>机器id，25 -&gt; 换算成一个二进制 -&gt; 11001</p><p>snowflake算法服务，会判断一下，当前这个请求是否是，机房17的机器25，在2175/11/7 12:12:14时间点发送过来的第一个请求，如果是第一个请求</p><p>假设，在2175/11/7 12:12:14时间里，机房17的机器25，发送了第二条消息，snowflake算法服务，会发现说机房17的机器25，在2175/11/7 12:12:14时间里，在这一毫秒，之前已经生成过一个id了，此时如果你同一个机房，同一个机器，在同一个毫秒内，再次要求生成一个id，此时我只能把加1</p><p>0 | 0001100 10100010 10111110 10001001 01011100 00 | 10001 | 1 1001 | 0000 00000001</p><p>比如我们来观察上面的那个，就是一个典型的二进制的64位的id，换算成10进制就是910499571847892992。</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;名称：IdWorker.java&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;描述：分布式自增长ID&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     Twitter的 Snowflake　JAVA实现方案</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> * 核心代码为其IdWorker这个类实现，其原理结构如下，我分别用一个0表示一位，用—分割开部分的作用：</span></span><br><span class="line"><span class="comment"> * 1||0---0000000000 0000000000 0000000000 0000000000 0 --- 00000 ---00000 ---000000000000</span></span><br><span class="line"><span class="comment"> * 在上面的字符串中，第一位为未使用（实际上也可作为long的符号位），接下来的41位为毫秒级时间，</span></span><br><span class="line"><span class="comment"> * 然后5位datacenter标识位，5位机器ID（并不算标识符，实际是为线程标识），</span></span><br><span class="line"><span class="comment"> * 然后12位该毫秒内的当前毫秒内的计数，加起来刚好64位，为一个Long型。</span></span><br><span class="line"><span class="comment"> * 这样的好处是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和机器ID作区分），</span></span><br><span class="line"><span class="comment"> * 并且效率较高，经测试，snowflake每秒能够产生26万ID左右，完全满足需要。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 64位ID (42(毫秒)+5(机器ID)+5(业务编码)+12(重复累加))</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Polim</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间起始标记点，作为基准，一般取系统的最近时间（一旦确定不能变动）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> twepoch = <span class="number">1288834974657L</span>;</span><br><span class="line">    <span class="comment">// 机器标识位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">// 数据中心标识位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">// 机器ID最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line">    <span class="comment">// 数据中心ID最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line">    <span class="comment">// 毫秒内自增位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line">    <span class="comment">// 机器ID偏左移12位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="comment">// 数据中心ID左移17位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="comment">// 时间毫秒左移22位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line">    <span class="comment">/* 上次生产id时间戳 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line">    <span class="comment">// 0，并发控制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerId;</span><br><span class="line">    <span class="comment">// 数据标识id部分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = getDatacenterId(maxDatacenterId);</span><br><span class="line">        <span class="keyword">this</span>.workerId = getMaxWorkerId(datacenterId, maxWorkerId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId</span></span><br><span class="line"><span class="comment">     *            工作机器ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId</span></span><br><span class="line"><span class="comment">     *            序列号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            <span class="comment">// 当前毫秒内，则+1</span></span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 当前毫秒内计数满了，则等待下一秒</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">        <span class="comment">// ID偏移组合生成最终的ID，并返回ID</span></span><br><span class="line">        <span class="keyword">long</span> nextId = ((timestamp - twepoch) &lt;&lt; timestampLeftShift)</span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift)</span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) | sequence;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nextId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = <span class="keyword">this</span>.timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = <span class="keyword">this</span>.timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 获取 maxWorkerId</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getMaxWorkerId</span><span class="params">(<span class="keyword">long</span> datacenterId, <span class="keyword">long</span> maxWorkerId)</span> </span>&#123;</span><br><span class="line">        StringBuffer mpid = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        mpid.append(datacenterId);</span><br><span class="line">        String name = ManagementFactory.getRuntimeMXBean().getName();</span><br><span class="line">        <span class="keyword">if</span> (!name.isEmpty()) &#123;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * GET jvmPid</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">            mpid.append(name.split(<span class="string">"@"</span>)[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * MAC + PID 的 hashcode 获取16个低位</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">return</span> (mpid.toString().hashCode() &amp; <span class="number">0xffff</span>) % (maxWorkerId + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 数据标识id部分</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getDatacenterId</span><span class="params">(<span class="keyword">long</span> maxDatacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress ip = InetAddress.getLocalHost();</span><br><span class="line">            NetworkInterface network = NetworkInterface.getByInetAddress(ip);</span><br><span class="line">            <span class="keyword">if</span> (network == <span class="keyword">null</span>) &#123;</span><br><span class="line">                id = <span class="number">1L</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] mac = network.getHardwareAddress();</span><br><span class="line">                id = ((<span class="number">0x000000FF</span> &amp; (<span class="keyword">long</span>) mac[mac.length - <span class="number">1</span>])</span><br><span class="line">                        | (<span class="number">0x0000FF00</span> &amp; (((<span class="keyword">long</span>) mac[mac.length - <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>))) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">                id = id % (maxDatacenterId + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">" getDatacenterId: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snowflake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2019/07/31/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/07/31/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h1><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h1 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h1><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="/images/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h1 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h1><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h1 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h1><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h1 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h1><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h1 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h1><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/20/hello-world/"/>
      <url>/2019/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>文章分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/solarized-dark.css"/>
      <url>/css/solarized-dark.css</url>
      
        <content type="html"><![CDATA[/*Orginal Style from ethanschoonover.com/solarized (c) Jeremy Hull <sourdrums@gmail.com>*/.hljs {  display: block;  overflow-x: auto;  padding: 0.5em;  background: #002b36;  color: #839496;}.hljs-comment,.hljs-quote {  color: #586e75;}/* Solarized Green */.hljs-keyword,.hljs-selector-tag,.hljs-addition {  color: #859900;}/* Solarized Cyan */.hljs-number,.hljs-string,.hljs-meta .hljs-meta-string,.hljs-literal,.hljs-doctag,.hljs-regexp {  color: #2aa198;}/* Solarized Blue */.hljs-title,.hljs-section,.hljs-name,.hljs-selector-id,.hljs-selector-class {  color: #268bd2;}/* Solarized Yellow */.hljs-attribute,.hljs-attr,.hljs-variable,.hljs-template-variable,.hljs-class .hljs-title,.hljs-type {  color: #b58900;}/* Solarized Orange */.hljs-symbol,.hljs-bullet,.hljs-subst,.hljs-meta,.hljs-meta .hljs-keyword,.hljs-selector-attr,.hljs-selector-pseudo,.hljs-link {  color: #cb4b16;}/* Solarized Red */.hljs-built_in,.hljs-deletion {  color: #dc322f;}.hljs-formula {  background: #073642;}.hljs-emphasis {  font-style: italic;}.hljs-strong {  font-weight: bold;}</sourdrums@gmail.com>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="I-am-in-Beijing-I-am-not-crazy-yet"><a href="#I-am-in-Beijing-I-am-not-crazy-yet" class="headerlink" title="I am in Beijing, I am not crazy yet."></a>I am in Beijing, I am not crazy yet.</h1><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">          _____                                                                                                          </span><br><span class="line">         /\    \</span><br><span class="line">        /::\    \</span><br><span class="line">        \:::\    \</span><br><span class="line">         \:::\    \</span><br><span class="line">          \:::\    \</span><br><span class="line">           \:::\    \</span><br><span class="line">           /::::\    \</span><br><span class="line">  ____    /::::::\    \</span><br><span class="line"> /\   \  /:::/\:::\    \</span><br><span class="line">/::\   \/:::/  \:::\____\</span><br><span class="line">\:::\  /:::/    \::/    /                                                                                                </span><br><span class="line"> \:::\/:::/    / \/____/                                                                                                 </span><br><span class="line">  \::::::/    /                                                                                                          </span><br><span class="line">   \::::/____/                                                                                                           </span><br><span class="line">    \:::\    \</span><br><span class="line">     \:::\    \</span><br><span class="line">      \:::\    \</span><br><span class="line">       \:::\____\</span><br><span class="line">        \::/    /                                                                                                        </span><br><span class="line">         \/____/                                                                                                         </span><br><span class="line">                                                                                                                         </span><br><span class="line">          _____                    _____                                                                                 </span><br><span class="line">         /\    \                  /\    \</span><br><span class="line">        /::\    \                /::\____\</span><br><span class="line">       /::::\    \              /::::|   |                                                                               </span><br><span class="line">      /::::::\    \            /:::::|   |                                                                               </span><br><span class="line">     /:::/\:::\    \          /::::::|   |                                                                               </span><br><span class="line">    /:::/__\:::\    \        /:::/|::|   |                                                                               </span><br><span class="line">   /::::\   \:::\    \      /:::/ |::|   |                                                                               </span><br><span class="line">  /::::::\   \:::\    \    /:::/  |::|___|______                                                                         </span><br><span class="line"> /:::/\:::\   \:::\    \  /:::/   |::::::::\    \</span><br><span class="line">/:::/  \:::\   \:::\____\/:::/    |:::::::::\____\</span><br><span class="line">\::/    \:::\  /:::/    /\::/    / ~~~~~/:::/    /                                                                       </span><br><span class="line"> \/____/ \:::\/:::/    /  \/____/      /:::/    /                                                                        </span><br><span class="line">          \::::::/    /               /:::/    /                                                                         </span><br><span class="line">           \::::/    /               /:::/    /                                                                          </span><br><span class="line">           /:::/    /               /:::/    /                                                                           </span><br><span class="line">          /:::/    /               /:::/    /                                                                            </span><br><span class="line">         /:::/    /               /:::/    /                                                                             </span><br><span class="line">        /:::/    /               /:::/    /                                                                              </span><br><span class="line">        \::/    /                \::/    /                                                                               </span><br><span class="line">         \/____/                  \/____/                                                                                </span><br><span class="line">                                                                                                                         </span><br><span class="line">          _____                    _____                                                                                 </span><br><span class="line">         /\    \                  /\    \</span><br><span class="line">        /::\    \                /::\____\</span><br><span class="line">        \:::\    \              /::::|   |                                                                               </span><br><span class="line">         \:::\    \            /:::::|   |                                                                               </span><br><span class="line">          \:::\    \          /::::::|   |                                                                               </span><br><span class="line">           \:::\    \        /:::/|::|   |                                                                               </span><br><span class="line">           /::::\    \      /:::/ |::|   |                                                                               </span><br><span class="line">  ____    /::::::\    \    /:::/  |::|   | _____                                                                         </span><br><span class="line"> /\   \  /:::/\:::\    \  /:::/   |::|   |/\    \</span><br><span class="line">/::\   \/:::/  \:::\____\/:: /    |::|   /::\____\</span><br><span class="line">\:::\  /:::/    \::/    /\::/    /|::|  /:::/    /                                                                       </span><br><span class="line"> \:::\/:::/    / \/____/  \/____/ |::| /:::/    /                                                                        </span><br><span class="line">  \::::::/    /                   |::|/:::/    /                                                                         </span><br><span class="line">   \::::/____/                    |::::::/    /                                                                          </span><br><span class="line">    \:::\    \                    |:::::/    /                                                                           </span><br><span class="line">     \:::\    \                   |::::/    /                                                                            </span><br><span class="line">      \:::\    \                  /:::/    /                                                                             </span><br><span class="line">       \:::\____\                /:::/    /                                                                              </span><br><span class="line">        \::/    /                \::/    /                                                                               </span><br><span class="line">         \/____/                  \/____/                                                                                </span><br><span class="line">                                                                                                                         </span><br><span class="line">          _____                    _____                    _____                                                        </span><br><span class="line">         /\    \                  /\    \                  /\    \</span><br><span class="line">        /::\    \                /::\    \                /::\    \</span><br><span class="line">       /::::\    \              /::::\    \               \:::\    \</span><br><span class="line">      /::::::\    \            /::::::\    \               \:::\    \</span><br><span class="line">     /:::/\:::\    \          /:::/\:::\    \               \:::\    \</span><br><span class="line">    /:::/__\:::\    \        /:::/__\:::\    \               \:::\    \</span><br><span class="line">   /::::\   \:::\    \      /::::\   \:::\    \              /::::\    \</span><br><span class="line">  /::::::\   \:::\    \    /::::::\   \:::\    \    ____    /::::::\    \</span><br><span class="line"> /:::/\:::\   \:::\ ___\  /:::/\:::\   \:::\    \  /\   \  /:::/\:::\    \</span><br><span class="line">/:::/__\:::\   \:::|    |/:::/__\:::\   \:::\____\/::\   \/:::/  \:::\____\</span><br><span class="line">\:::\   \:::\  /:::|____|\:::\   \:::\   \::/    /\:::\  /:::/    \::/    /                                              </span><br><span class="line"> \:::\   \:::\/:::/    /  \:::\   \:::\   \/____/  \:::\/:::/    / \/____/                                               </span><br><span class="line">  \:::\   \::::::/    /    \:::\   \:::\    \       \::::::/    /                                                        </span><br><span class="line">   \:::\   \::::/    /      \:::\   \:::\____\       \::::/____/                                                         </span><br><span class="line">    \:::\  /:::/    /        \:::\   \::/    /        \:::\    \</span><br><span class="line">     \:::\/:::/    /          \:::\   \/____/          \:::\    \</span><br><span class="line">      \::::::/    /            \:::\    \               \:::\    \</span><br><span class="line">       \::::/    /              \:::\____\               \:::\____\</span><br><span class="line">        \::/____/                \::/    /                \::/    /                                                      </span><br><span class="line">         ~~                       \/____/                  \/____/                                                       </span><br><span class="line">                                                                                                                         </span><br><span class="line">          _____                    _____                    _____                    _____                               </span><br><span class="line">         /\    \                  /\    \                  /\    \                  /\    \</span><br><span class="line">        /::\    \                /::\    \                /::\____\                /::\    \</span><br><span class="line">        \:::\    \               \:::\    \              /::::|   |               /::::\    \</span><br><span class="line">         \:::\    \               \:::\    \            /:::::|   |              /::::::\    \</span><br><span class="line">          \:::\    \               \:::\    \          /::::::|   |             /:::/\:::\    \</span><br><span class="line">           \:::\    \               \:::\    \        /:::/|::|   |            /:::/  \:::\    \</span><br><span class="line">           /::::\    \              /::::\    \      /:::/ |::|   |           /:::/    \:::\    \</span><br><span class="line">  _____   /::::::\    \    ____    /::::::\    \    /:::/  |::|   | _____    /:::/    / \:::\    \</span><br><span class="line"> /\    \ /:::/\:::\    \  /\   \  /:::/\:::\    \  /:::/   |::|   |/\    \  /:::/    /   \:::\ ___\</span><br><span class="line">/::\    /:::/  \:::\____\/::\   \/:::/  \:::\____\/:: /    |::|   /::\____\/:::/____/  ___\:::|    |                     </span><br><span class="line">\:::\  /:::/    \::/    /\:::\  /:::/    \::/    /\::/    /|::|  /:::/    /\:::\    \ /\  /:::|____|                     </span><br><span class="line"> \:::\/:::/    / \/____/  \:::\/:::/    / \/____/  \/____/ |::| /:::/    /  \:::\    /::\ \::/    /                      </span><br><span class="line">  \::::::/    /            \::::::/    /                   |::|/:::/    /    \:::\   \:::\ \/____/                       </span><br><span class="line">   \::::/    /              \::::/____/                    |::::::/    /      \:::\   \:::\____\</span><br><span class="line">    \::/    /                \:::\    \                    |:::::/    /        \:::\  /:::/    /                         </span><br><span class="line">     \/____/                  \:::\    \                   |::::/    /          \:::\/:::/    /                          </span><br><span class="line">                               \:::\    \                  /:::/    /            \::::::/    /                           </span><br><span class="line">                                \:::\____\                /:::/    /              \::::/    /                            </span><br><span class="line">                                 \::/    /                \::/    /                \::/____/                             </span><br><span class="line">                                  \/____/                  \/____/                                                       </span><br><span class="line">                                                                                                                         </span><br><span class="line">          _____                                                                                                          </span><br><span class="line">         /\    \</span><br><span class="line">        /::\    \</span><br><span class="line">        \:::\    \</span><br><span class="line">         \:::\    \</span><br><span class="line">          \:::\    \</span><br><span class="line">           \:::\    \</span><br><span class="line">           /::::\    \</span><br><span class="line">  ____    /::::::\    \</span><br><span class="line"> /\   \  /:::/\:::\    \</span><br><span class="line">/::\   \/:::/  \:::\____\</span><br><span class="line">\:::\  /:::/    \::/    /                                                                                                </span><br><span class="line"> \:::\/:::/    / \/____/                                                                                                 </span><br><span class="line">  \::::::/    /                                                                                                          </span><br><span class="line">   \::::/____/                                                                                                           </span><br><span class="line">    \:::\    \</span><br><span class="line">     \:::\    \</span><br><span class="line">      \:::\    \</span><br><span class="line">       \:::\____\</span><br><span class="line">        \::/    /                                                                                                        </span><br><span class="line">         \/____/                                                                                                         </span><br><span class="line">                                                                                                                         </span><br><span class="line">          _____                    _____                                                                                 </span><br><span class="line">         /\    \                  /\    \</span><br><span class="line">        /::\    \                /::\____\</span><br><span class="line">       /::::\    \              /::::|   |                                                                               </span><br><span class="line">      /::::::\    \            /:::::|   |                                                                               </span><br><span class="line">     /:::/\:::\    \          /::::::|   |                                                                               </span><br><span class="line">    /:::/__\:::\    \        /:::/|::|   |                                                                               </span><br><span class="line">   /::::\   \:::\    \      /:::/ |::|   |                                                                               </span><br><span class="line">  /::::::\   \:::\    \    /:::/  |::|___|______                                                                         </span><br><span class="line"> /:::/\:::\   \:::\    \  /:::/   |::::::::\    \</span><br><span class="line">/:::/  \:::\   \:::\____\/:::/    |:::::::::\____\</span><br><span class="line">\::/    \:::\  /:::/    /\::/    / ~~~~~/:::/    /                                                                       </span><br><span class="line"> \/____/ \:::\/:::/    /  \/____/      /:::/    /                                                                        </span><br><span class="line">          \::::::/    /               /:::/    /                                                                         </span><br><span class="line">           \::::/    /               /:::/    /                                                                          </span><br><span class="line">           /:::/    /               /:::/    /                                                                           </span><br><span class="line">          /:::/    /               /:::/    /                                                                            </span><br><span class="line">         /:::/    /               /:::/    /                                                                             </span><br><span class="line">        /:::/    /               /:::/    /                                                                              </span><br><span class="line">        \::/    /                \::/    /                                                                               </span><br><span class="line">         \/____/                  \/____/                                                                                </span><br><span class="line">                                                                                                                         </span><br><span class="line">          _____                   _______               _____                                                            </span><br><span class="line">         /\    \                 /::\    \             /\    \</span><br><span class="line">        /::\____\               /::::\    \           /::\    \</span><br><span class="line">       /::::|   |              /::::::\    \          \:::\    \</span><br><span class="line">      /:::::|   |             /::::::::\    \          \:::\    \</span><br><span class="line">     /::::::|   |            /:::/~~\:::\    \          \:::\    \</span><br><span class="line">    /:::/|::|   |           /:::/    \:::\    \          \:::\    \</span><br><span class="line">   /:::/ |::|   |          /:::/    / \:::\    \         /::::\    \</span><br><span class="line">  /:::/  |::|   | _____   /:::/____/   \:::\____\       /::::::\    \</span><br><span class="line"> /:::/   |::|   |/\    \ |:::|    |     |:::|    |     /:::/\:::\    \</span><br><span class="line">/:: /    |::|   /::\____\|:::|____|     |:::|    |    /:::/  \:::\____\</span><br><span class="line">\::/    /|::|  /:::/    / \:::\    \   /:::/    /    /:::/    \::/    /                                                  </span><br><span class="line"> \/____/ |::| /:::/    /   \:::\    \ /:::/    /    /:::/    / \/____/                                                   </span><br><span class="line">         |::|/:::/    /     \:::\    /:::/    /    /:::/    /                                                            </span><br><span class="line">         |::::::/    /       \:::\__/:::/    /    /:::/    /                                                             </span><br><span class="line">         |:::::/    /         \::::::::/    /     \::/    /                                                              </span><br><span class="line">         |::::/    /           \::::::/    /       \/____/                                                               </span><br><span class="line">         /:::/    /             \::::/    /                                                                              </span><br><span class="line">        /:::/    /               \::/____/                                                                               </span><br><span class="line">        \::/    /                 ~~                                                                                     </span><br><span class="line">         \/____/                                                                                                         </span><br><span class="line">                                                                                                                         </span><br><span class="line">          _____                    _____                    _____                    _____                _____          </span><br><span class="line">         /\    \                  /\    \                  /\    \                  /\    \              |\    \</span><br><span class="line">        /::\    \                /::\    \                /::\    \                /::\    \             |:\____\</span><br><span class="line">       /::::\    \              /::::\    \              /::::\    \               \:::\    \            |::|   |        </span><br><span class="line">      /::::::\    \            /::::::\    \            /::::::\    \               \:::\    \           |::|   |        </span><br><span class="line">     /:::/\:::\    \          /:::/\:::\    \          /:::/\:::\    \               \:::\    \          |::|   |        </span><br><span class="line">    /:::/  \:::\    \        /:::/__\:::\    \        /:::/__\:::\    \               \:::\    \         |::|   |        </span><br><span class="line">   /:::/    \:::\    \      /::::\   \:::\    \      /::::\   \:::\    \               \:::\    \        |::|   |        </span><br><span class="line">  /:::/    / \:::\    \    /::::::\   \:::\    \    /::::::\   \:::\    \               \:::\    \       |::|___|______  </span><br><span class="line"> /:::/    /   \:::\    \  /:::/\:::\   \:::\____\  /:::/\:::\   \:::\    \               \:::\    \      /::::::::\    \</span><br><span class="line">/:::/____/     \:::\____\/:::/  \:::\   \:::|    |/:::/  \:::\   \:::\____\_______________\:::\____\    /::::::::::\____\</span><br><span class="line">\:::\    \      \::/    /\::/   |::::\  /:::|____|\::/    \:::\  /:::/    /\::::::::::::::::::/    /   /:::/~~~~/~~      </span><br><span class="line"> \:::\    \      \/____/  \/____|:::::\/:::/    /  \/____/ \:::\/:::/    /  \::::::::::::::::/____/   /:::/    /         </span><br><span class="line">  \:::\    \                    |:::::::::/    /            \::::::/    /    \:::\~~~~\~~~~~~        /:::/    /          </span><br><span class="line">   \:::\    \                   |::|\::::/    /              \::::/    /      \:::\    \            /:::/    /           </span><br><span class="line">    \:::\    \                  |::| \::/____/               /:::/    /        \:::\    \           \::/    /            </span><br><span class="line">     \:::\    \                 |::|  ~|                    /:::/    /          \:::\    \           \/____/             </span><br><span class="line">      \:::\    \                |::|   |                   /:::/    /            \:::\    \</span><br><span class="line">       \:::\____\               \::|   |                  /:::/    /              \:::\____\</span><br><span class="line">        \::/    /                \:|   |                  \::/    /                \::/    /                             </span><br><span class="line">         \/____/                  \|___|                   \/____/                  \/____/                              </span><br><span class="line">                                                                                                                         </span><br><span class="line">      _____                    _____                _____                                                                </span><br><span class="line">     |\    \                  /\    \              /\    \</span><br><span class="line">     |:\____\                /::\    \            /::\    \</span><br><span class="line">     |::|   |               /::::\    \           \:::\    \</span><br><span class="line">     |::|   |              /::::::\    \           \:::\    \</span><br><span class="line">     |::|   |             /:::/\:::\    \           \:::\    \</span><br><span class="line">     |::|   |            /:::/__\:::\    \           \:::\    \</span><br><span class="line">     |::|   |           /::::\   \:::\    \          /::::\    \</span><br><span class="line">     |::|___|______    /::::::\   \:::\    \        /::::::\    \</span><br><span class="line">     /::::::::\    \  /:::/\:::\   \:::\    \      /:::/\:::\    \</span><br><span class="line">    /::::::::::\____\/:::/__\:::\   \:::\____\    /:::/  \:::\____\</span><br><span class="line">   /:::/~~~~/~~      \:::\   \:::\   \::/    /   /:::/    \::/    /                                                      </span><br><span class="line">  /:::/    /          \:::\   \:::\   \/____/   /:::/    / \/____/                                                       </span><br><span class="line"> /:::/    /            \:::\   \:::\    \      /:::/    /                                                                </span><br><span class="line">/:::/    /              \:::\   \:::\____\    /:::/    /                                                                 </span><br><span class="line">\::/    /                \:::\   \::/    /    \::/    /                                                                  </span><br><span class="line"> \/____/                  \:::\   \/____/      \/____/                                                                   </span><br><span class="line">                           \:::\    \</span><br><span class="line">                            \:::\____\</span><br><span class="line">                             \::/    /                                                                                   </span><br><span class="line">                              \/____/</span><br></pre></td></tr></table></figure>]]></content>
      
    </entry>
    
    
  
</search>
